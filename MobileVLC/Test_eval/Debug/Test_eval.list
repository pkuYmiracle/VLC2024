
Test_eval.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054bc  080054bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c4  080054c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080054cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000068  08005534  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08005534  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb0d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a5  00000000  00000000  0002fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00032390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000900  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f01  00000000  00000000  00033878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010266  00000000  00000000  00054779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cabd5  00000000  00000000  000649df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034c8  00000000  00000000  0012f5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00132a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005450 	.word	0x08005450

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08005450 	.word	0x08005450

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2230      	movs	r2, #48	; 0x30
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f004 fc07 	bl	8004d34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_DAC1_Init+0x6c>)
 8000528:	4a16      	ldr	r2, [pc, #88]	; (8000584 <MX_DAC1_Init+0x70>)
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <MX_DAC1_Init+0x6c>)
 800052e:	f000 fe22 	bl	8001176 <HAL_DAC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000538:	f000 f9ce 	bl	80008d8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800053c:	2302      	movs	r3, #2
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	2210      	movs	r2, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_DAC1_Init+0x6c>)
 8000568:	f000 fea2 	bl	80012b0 <HAL_DAC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000572:	f000 f9b1 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3730      	adds	r7, #48	; 0x30
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000084 	.word	0x20000084
 8000584:	50000800 	.word	0x50000800

08000588 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a15      	ldr	r2, [pc, #84]	; (80005fc <HAL_DAC_MspInit+0x74>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d124      	bne.n	80005f4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_DAC_MspInit+0x78>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005da:	2320      	movs	r3, #32
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fb44 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	50000800 	.word	0x50000800
 8000600:	40021000 	.word	0x40021000

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_DMA_Init+0x60>)
 800060c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_DMA_Init+0x60>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6493      	str	r3, [r2, #72]	; 0x48
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_DMA_Init+0x60>)
 8000618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_DMA_Init+0x60>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_DMA_Init+0x60>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6493      	str	r3, [r2, #72]	; 0x48
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_DMA_Init+0x60>)
 8000630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	200b      	movs	r0, #11
 8000640:	f000 fd65 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000644:	200b      	movs	r0, #11
 8000646:	f000 fd7c 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200c      	movs	r0, #12
 8000650:	f000 fd5d 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000654:	200c      	movs	r0, #12
 8000656:	f000 fd74 	bl	8001142 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_GPIO_Init+0x74>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <MX_GPIO_Init+0x74>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_GPIO_Init+0x74>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_GPIO_Init+0x74>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <MX_GPIO_Init+0x74>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_GPIO_Init+0x74>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2110      	movs	r1, #16
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x78>)
 80006b4:	f001 fc64 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006b8:	2310      	movs	r3, #16
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0x78>)
 80006d0:	f001 fad4 	bl	8001c7c <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	48000400 	.word	0x48000400

080006e4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	2201      	movs	r2, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <__io_putchar+0x20>)
 80006f6:	f002 fce1 	bl	80030bc <HAL_UART_Transmit>

  return ch;
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200002a0 	.word	0x200002a0

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fb90 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f8a1 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f7ff ffa7 	bl	8000668 <MX_GPIO_Init>
  MX_DMA_Init();
 800071a:	f7ff ff73 	bl	8000604 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800071e:	f000 fa47 	bl	8000bb0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000722:	f7ff fef7 	bl	8000514 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000726:	2110      	movs	r1, #16
 8000728:	4844      	ldr	r0, [pc, #272]	; (800083c <main+0x134>)
 800072a:	f000 fd46 	bl	80011ba <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	4843      	ldr	r0, [pc, #268]	; (8000840 <main+0x138>)
 8000734:	f001 fc24 	bl	8001f80 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,0);
 8000738:	2300      	movs	r3, #0
 800073a:	2200      	movs	r2, #0
 800073c:	2110      	movs	r1, #16
 800073e:	483f      	ldr	r0, [pc, #252]	; (800083c <main+0x134>)
 8000740:	f000 fd8e 	bl	8001260 <HAL_DAC_SetValue>
	  if(USART1_RECV_CPLT_FLAG ==1)
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <main+0x13c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b01      	cmp	r3, #1
 800074c:	d16e      	bne.n	800082c <main+0x124>
	  	{
		  	for(int i=0;i<32;++i)
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e00c      	b.n	800076e <main+0x66>
		  	{
		  		HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,4095);
 8000754:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4837      	ldr	r0, [pc, #220]	; (800083c <main+0x134>)
 800075e:	f000 fd7f 	bl	8001260 <HAL_DAC_SetValue>
		  		HAL_Delay(2);
 8000762:	2002      	movs	r0, #2
 8000764:	f000 fbd6 	bl	8000f14 <HAL_Delay>
		  	for(int i=0;i<32;++i)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b1f      	cmp	r3, #31
 8000772:	ddef      	ble.n	8000754 <main+0x4c>
		  	}
		  	for(int i=0;i<16;++i)
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	e00b      	b.n	8000792 <main+0x8a>
		  	{
		  		HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,0);
 800077a:	2300      	movs	r3, #0
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	482e      	ldr	r0, [pc, #184]	; (800083c <main+0x134>)
 8000782:	f000 fd6d 	bl	8001260 <HAL_DAC_SetValue>
		  		HAL_Delay(2);
 8000786:	2002      	movs	r0, #2
 8000788:	f000 fbc4 	bl	8000f14 <HAL_Delay>
		  	for(int i=0;i<16;++i)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3301      	adds	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	ddf0      	ble.n	800077a <main+0x72>
		  	}
	  		//printf("rx_len=%d\r\n",USART1_RX_LEN);//打印接收长度
	  		//HAL_UART_Transmit(&huart1,USART1_RX_BUF, USART1_RX_LEN,200);//接收数据打印出来
	  		for(int i=0;i<USART1_RX_LEN;i++)
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	e030      	b.n	8000800 <main+0xf8>
	  		{
	  			uint8_t val=USART1_RX_BUF[i];
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <main+0x140>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	70bb      	strb	r3, [r7, #2]
	  			//printf("Val %d: 0x%x\r\n",i,val);
	  			for(uint8_t j=0;j<8;++j)
 80007a8:	2300      	movs	r3, #0
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	e022      	b.n	80007f4 <main+0xec>
	  			{
	  				uint8_t bit_val=(val>>(7-j))&1;
 80007ae:	78ba      	ldrb	r2, [r7, #2]
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	fa42 f303 	asr.w	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	707b      	strb	r3, [r7, #1]
	  				//printf("%d\r\n",bit_val);
	  				//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,bit_val);
	  				HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,2500);
 80007c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <main+0x134>)
 80007cc:	f000 fd48 	bl	8001260 <HAL_DAC_SetValue>
	  				HAL_Delay(2);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f000 fb9f 	bl	8000f14 <HAL_Delay>
	  				HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,bit_val*4095);
 80007d6:	787a      	ldrb	r2, [r7, #1]
 80007d8:	4613      	mov	r3, r2
 80007da:	031b      	lsls	r3, r3, #12
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	4816      	ldr	r0, [pc, #88]	; (800083c <main+0x134>)
 80007e4:	f000 fd3c 	bl	8001260 <HAL_DAC_SetValue>
	  				HAL_Delay(2);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f000 fb93 	bl	8000f14 <HAL_Delay>
	  			for(uint8_t j=0;j<8;++j)
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	3301      	adds	r3, #1
 80007f2:	70fb      	strb	r3, [r7, #3]
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9d9      	bls.n	80007ae <main+0xa6>
	  		for(int i=0;i<USART1_RX_LEN;i++)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3301      	adds	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <main+0x144>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4293      	cmp	r3, r2
 800080c:	dbc7      	blt.n	800079e <main+0x96>
	  			}

	  		}
	  		//HAL_UART_Transmit(&huart1,USART1_RX_BUF, USART1_RX_LEN,200);//接收数据打印出来
	  		printf("Transmission Over.\n");
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <main+0x148>)
 8000810:	f004 fa88 	bl	8004d24 <puts>
	  		// 清除数据
	  		memset(USART1_RX_BUF,0,USART1_RX_BUF_SIZE);
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	2100      	movs	r1, #0
 800081a:	480b      	ldr	r0, [pc, #44]	; (8000848 <main+0x140>)
 800081c:	f004 fa8a 	bl	8004d34 <memset>
	  		USART1_RX_LEN=0;//清除计数
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <main+0x144>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	  		USART1_RECV_CPLT_FLAG=0;//清除接收结束标志位
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <main+0x13c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	  	}
	  	HAL_UART_Receive_DMA(&huart1,USART1_RX_BUF,USART1_RX_BUF_SIZE);
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	4905      	ldr	r1, [pc, #20]	; (8000848 <main+0x140>)
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <main+0x14c>)
 8000834:	f002 fcd8 	bl	80031e8 <HAL_UART_Receive_DMA>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
 8000838:	e779      	b.n	800072e <main+0x26>
 800083a:	bf00      	nop
 800083c:	20000084 	.word	0x20000084
 8000840:	48000400 	.word	0x48000400
 8000844:	2000009d 	.word	0x2000009d
 8000848:	200000a0 	.word	0x200000a0
 800084c:	2000009c 	.word	0x2000009c
 8000850:	08005468 	.word	0x08005468
 8000854:	200002a0 	.word	0x200002a0

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2238      	movs	r2, #56	; 0x38
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fa64 	bl	8004d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087e:	f001 fb97 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fc3d 	bl	8002118 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008a4:	f000 f818 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ac:	2301      	movs	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 ff41 	bl	8002748 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008cc:	f000 f804 	bl	80008d8 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	; 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800091a:	f001 fbed 	bl	80020f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 faae 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Channel1_IRQHandler+0x10>)
 8000986:	f001 f81e 	bl	80019c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000330 	.word	0x20000330

08000994 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <DMA1_Channel2_IRQHandler+0x10>)
 800099a:	f001 f814 	bl	80019c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000390 	.word	0x20000390

080009a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint32_t tmp_flag = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  uint32_t temp;

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b2:	481e      	ldr	r0, [pc, #120]	; (8000a2c <USART1_IRQHandler+0x84>)
 80009b4:	f002 fd02 	bl	80033bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(USART1 == huart1.Instance)
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <USART1_IRQHandler+0x84>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <USART1_IRQHandler+0x88>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12f      	bne.n	8000a22 <USART1_IRQHandler+0x7a>
    {
        tmp_flag =__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE); //获取IDLE标志位
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <USART1_IRQHandler+0x84>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	2b10      	cmp	r3, #16
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	607b      	str	r3, [r7, #4]

        if((tmp_flag != RESET))//idle标志被置位
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d021      	beq.n	8000a22 <USART1_IRQHandler+0x7a>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);//清除标志位
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <USART1_IRQHandler+0x84>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2210      	movs	r2, #16
 80009e4:	621a      	str	r2, [r3, #32]
            HAL_UART_DMAStop(&huart1);
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <USART1_IRQHandler+0x84>)
 80009e8:	f002 fc54 	bl	8003294 <HAL_UART_DMAStop>
            temp  =  __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);// 获取DMA中未传输的数据个数
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <USART1_IRQHandler+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	603b      	str	r3, [r7, #0]
            USART1_RX_LEN =  USART1_RX_BUF_SIZE - temp; //总计数减去未传输的数据个数，得到已经接收的数据个数
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	425b      	negs	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <USART1_IRQHandler+0x90>)
 80009fe:	701a      	strb	r2, [r3, #0]

            USART1_RECV_CPLT_FLAG = USART1_RX_LEN?1:0;  // 如果接收到数据，设置完成标志
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <USART1_IRQHandler+0x90>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <USART1_IRQHandler+0x94>)
 8000a14:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_DMA(&huart1,USART1_RX_BUF,USART1_RX_BUF_SIZE);//重新打开DMA接收
 8000a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1a:	4909      	ldr	r1, [pc, #36]	; (8000a40 <USART1_IRQHandler+0x98>)
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <USART1_IRQHandler+0x84>)
 8000a1e:	f002 fbe3 	bl	80031e8 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART1_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200002a0 	.word	0x200002a0
 8000a30:	40013800 	.word	0x40013800
 8000a34:	20000390 	.word	0x20000390
 8000a38:	2000009c 	.word	0x2000009c
 8000a3c:	2000009d 	.word	0x2000009d
 8000a40:	200000a0 	.word	0x200000a0

08000a44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a56:	f3af 8000 	nop.w
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf0      	blt.n	8000a56 <_read+0x12>
  }

  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e009      	b.n	8000aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe23 	bl	80006e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf1      	blt.n	8000a90 <_write+0x12>
  }
  return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f004 f8f8 	bl	8004d44 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000098 	.word	0x20000098
 8000b88:	20000540 	.word	0x20000540

08000b8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <MX_USART1_UART_Init+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf8:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000bfa:	f002 fa0f 	bl	800301c <HAL_UART_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c04:	f7ff fe68 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c0c:	f003 feaa 	bl	8004964 <HAL_UARTEx_SetTxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c16:	f7ff fe5f 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c1e:	f003 fedf 	bl	80049e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f7ff fe56 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c2e:	f003 fe60 	bl	80048f2 <HAL_UARTEx_DisableFifoMode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f7ff fe4e 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* 使能空闲中断 */
    __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 0210 	orr.w	r2, r2, #16
 8000c4a:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1,USART1_RX_BUF,USART1_RX_BUF_SIZE);
 8000c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <MX_USART1_UART_Init+0xb4>)
 8000c52:	4802      	ldr	r0, [pc, #8]	; (8000c5c <MX_USART1_UART_Init+0xac>)
 8000c54:	f002 fac8 	bl	80031e8 <HAL_UART_Receive_DMA>

  /* USER CODE END USART1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002a0 	.word	0x200002a0
 8000c60:	40013800 	.word	0x40013800
 8000c64:	200000a0 	.word	0x200000a0

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09e      	sub	sp, #120	; 0x78
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2254      	movs	r2, #84	; 0x54
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 f853 	bl	8004d34 <memset>
  if(uartHandle->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <HAL_UART_MspInit+0x160>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	f040 8093 	bne.w	8000dc0 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 ff6a 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb2:	f7ff fe11 	bl	80008d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <HAL_UART_MspInit+0x164>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f000 ffb9 	bl	8001c7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_UART_MspInit+0x16c>)
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d12:	2219      	movs	r2, #25
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d18:	2210      	movs	r2, #16
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d42:	f000 fc5d 	bl	8001600 <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000d4c:	f7ff fdc4 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d54:	679a      	str	r2, [r3, #120]	; 0x78
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0x168>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_UART_MspInit+0x174>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d64:	2218      	movs	r2, #24
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000d96:	f000 fc33 	bl	8001600 <HAL_DMA_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000da0:	f7ff fd9a 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000da8:	67da      	str	r2, [r3, #124]	; 0x7c
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_UART_MspInit+0x170>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2025      	movs	r0, #37	; 0x25
 8000db6:	f000 f9aa 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dba:	2025      	movs	r0, #37	; 0x25
 8000dbc:	f000 f9c1 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3778      	adds	r7, #120	; 0x78
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	20000330 	.word	0x20000330
 8000dd4:	40020008 	.word	0x40020008
 8000dd8:	20000390 	.word	0x20000390
 8000ddc:	4002001c 	.word	0x4002001c

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e0a:	f7ff febf 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 ff9f 	bl	8004d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fc79 	bl	8000708 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   r0, =_estack
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e24:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8000e28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e2c:	20000540 	.word	0x20000540

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>

08000e32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f95b 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f000 f80e 	bl	8000e64 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e001      	b.n	8000e58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e54:	f7ff fd46 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e58:	79fb      	ldrb	r3, [r7, #7]

}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_InitTick+0x68>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d022      	beq.n	8000ebe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_InitTick+0x68>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f966 	bl	800115e <HAL_SYSTICK_Config>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10f      	bne.n	8000eb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	d809      	bhi.n	8000eb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea6:	f000 f932 	bl	800110e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_InitTick+0x70>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e004      	b.n	8000ec2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e001      	b.n	8000ec2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	200003f0 	.word	0x200003f0
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200003f0 	.word	0x200003f0

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f2c:	d004      	beq.n	8000f38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f38:	bf00      	nop
 8000f3a:	f7ff ffdf 	bl	8000efc <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8f7      	bhi.n	8000f3a <HAL_Delay+0x26>
  {
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff40 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff90 	bl	800104c <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5f 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff33 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa4 	bl	80010b4 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e014      	b.n	80011b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff f9f5 	bl	8000588 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	795b      	ldrb	r3, [r3, #5]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_DAC_Start+0x16>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e043      	b.n	8001258 <HAL_DAC_Start+0x9e>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2202      	movs	r2, #2
 80011da:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2201      	movs	r2, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff fe8d 	bl	8000f14 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10f      	bne.n	8001220 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800120a:	2b02      	cmp	r3, #2
 800120c:	d11d      	bne.n	800124a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	e014      	b.n	800124a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2102      	movs	r1, #2
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	429a      	cmp	r2, r3
 8001238:	d107      	bne.n	800124a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	3308      	adds	r3, #8
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e004      	b.n	800129a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	3314      	adds	r3, #20
 8001298:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	461a      	mov	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	795b      	ldrb	r3, [r3, #5]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_DAC_ConfigChannel+0x18>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e192      	b.n	80015ee <HAL_DAC_ConfigChannel+0x33e>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2201      	movs	r2, #1
 80012cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2202      	movs	r2, #2
 80012d2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d174      	bne.n	80013c6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012dc:	f7ff fe0e 	bl	8000efc <HAL_GetTick>
 80012e0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d134      	bne.n	8001352 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012e8:	e011      	b.n	800130e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012ea:	f7ff fe07 	bl	8000efc <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90a      	bls.n	800130e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f043 0208 	orr.w	r2, r3, #8
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2203      	movs	r2, #3
 8001308:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e16f      	b.n	80015ee <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e6      	bne.n	80012ea <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fdf9 	bl	8000f14 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
 800132c:	e01e      	b.n	800136c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800132e:	f7ff fde5 	bl	8000efc <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d90a      	bls.n	8001352 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	f043 0208 	orr.w	r2, r3, #8
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2203      	movs	r2, #3
 800134c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e14d      	b.n	80015ee <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	2b00      	cmp	r3, #0
 800135a:	dbe8      	blt.n	800132e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff fdd9 	bl	8000f14 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	ea02 0103 	and.w	r1, r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	21ff      	movs	r1, #255	; 0xff
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	ea02 0103 	and.w	r1, r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d11d      	bne.n	800140a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e6:	4013      	ands	r3, r2
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2207      	movs	r2, #7
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	4013      	ands	r3, r2
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	e00f      	b.n	8001454 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	e008      	b.n	8001454 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	e001      	b.n	8001454 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	6a3a      	ldr	r2, [r7, #32]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001476:	4013      	ands	r3, r2
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	791b      	ldrb	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <HAL_DAC_ConfigChannel+0x1d8>
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	e000      	b.n	800148a <HAL_DAC_ConfigChannel+0x1da>
 8001488:	2300      	movs	r3, #0
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a2:	4013      	ands	r3, r2
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	795b      	ldrb	r3, [r3, #5]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <HAL_DAC_ConfigChannel+0x204>
 80014ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b2:	e000      	b.n	80014b6 <HAL_DAC_ConfigChannel+0x206>
 80014b4:	2300      	movs	r3, #0
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d114      	bne.n	80014f6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80014cc:	f001 fada 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 80014d0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_DAC_ConfigChannel+0x348>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d904      	bls.n	80014e4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
 80014e2:	e00f      	b.n	8001504 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4a45      	ldr	r2, [pc, #276]	; (80015fc <HAL_DAC_ConfigChannel+0x34c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d90a      	bls.n	8001502 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
 80014f4:	e006      	b.n	8001504 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	4313      	orrs	r3, r2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	e000      	b.n	8001504 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001502:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001512:	4313      	orrs	r3, r2
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	4013      	ands	r3, r2
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4313      	orrs	r3, r2
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	22c0      	movs	r2, #192	; 0xc0
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43da      	mvns	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	ea02 0103 	and.w	r1, r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	09896800 	.word	0x09896800
 80015fc:	04c4b400 	.word	0x04c4b400

08001600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e08d      	b.n	800172e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <HAL_DMA_Init+0x138>)
 800161a:	429a      	cmp	r2, r3
 800161c:	d80f      	bhi.n	800163e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <HAL_DMA_Init+0x13c>)
 8001626:	4413      	add	r3, r2
 8001628:	4a45      	ldr	r2, [pc, #276]	; (8001740 <HAL_DMA_Init+0x140>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a42      	ldr	r2, [pc, #264]	; (8001744 <HAL_DMA_Init+0x144>)
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
 800163c:	e00e      	b.n	800165c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_DMA_Init+0x148>)
 8001646:	4413      	add	r3, r2
 8001648:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <HAL_DMA_Init+0x140>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	009a      	lsls	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a3c      	ldr	r2, [pc, #240]	; (800174c <HAL_DMA_Init+0x14c>)
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001676:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa82 	bl	8001bb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016bc:	d102      	bne.n	80016c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d010      	beq.n	8001704 <HAL_DMA_Init+0x104>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d80c      	bhi.n	8001704 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 faa2 	bl	8001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	e008      	b.n	8001716 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40020407 	.word	0x40020407
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	cccccccd 	.word	0xcccccccd
 8001744:	40020000 	.word	0x40020000
 8001748:	bffdfbf8 	.word	0xbffdfbf8
 800174c:	40020400 	.word	0x40020400

08001750 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_DMA_Start_IT+0x20>
 800176c:	2302      	movs	r3, #2
 800176e:	e066      	b.n	800183e <HAL_DMA_Start_IT+0xee>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d155      	bne.n	8001830 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f9c7 	bl	8001b3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 020e 	orr.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e00f      	b.n	80017e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 020a 	orr.w	r2, r2, #10
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e005      	b.n	800183c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d005      	beq.n	800186a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2204      	movs	r2, #4
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e037      	b.n	80018da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 020e 	bic.w	r2, r2, #14
 8001878:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f003 021f 	and.w	r2, r3, #31
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d00d      	beq.n	800192c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2204      	movs	r2, #4
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e047      	b.n	80019bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020e 	bic.w	r2, r2, #14
 800193a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001978:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00c      	beq.n	800199c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800199a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
    }
  }
  return status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2204      	movs	r2, #4
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d026      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x7a>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d021      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0204 	bic.w	r2, r2, #4
 8001a18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 021f 	and.w	r2, r3, #31
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2104      	movs	r1, #4
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d071      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a3e:	e06c      	b.n	8001b1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2202      	movs	r2, #2
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d02e      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d029      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10b      	bne.n	8001a84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 020a 	bic.w	r2, r2, #10
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2102      	movs	r1, #2
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d038      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ab0:	e033      	b.n	8001b1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2208      	movs	r2, #8
 8001abc:	409a      	lsls	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d02a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d025      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020e 	bic.w	r2, r2, #14
 8001ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
}
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 021f 	and.w	r2, r3, #31
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d108      	bne.n	8001b9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b9a:	e007      	b.n	8001bac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d802      	bhi.n	8001bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e001      	b.n	8001bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bd4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3b08      	subs	r3, #8
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	009a      	lsls	r2, r3, #2
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40020407 	.word	0x40020407
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020820 	.word	0x40020820
 8001c2c:	cccccccd 	.word	0xcccccccd
 8001c30:	40020880 	.word	0x40020880

08001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	1000823f 	.word	0x1000823f
 8001c78:	40020940 	.word	0x40020940

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c8a:	e15a      	b.n	8001f42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 814c 	beq.w	8001f3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d123      	bne.n	8001dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	6939      	ldr	r1, [r7, #16]
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0203 	and.w	r2, r3, #3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80a6 	beq.w	8001f3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df0:	4b5b      	ldr	r3, [pc, #364]	; (8001f60 <HAL_GPIO_Init+0x2e4>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	4a5a      	ldr	r2, [pc, #360]	; (8001f60 <HAL_GPIO_Init+0x2e4>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfc:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <HAL_GPIO_Init+0x2e4>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e08:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e32:	d01f      	beq.n	8001e74 <HAL_GPIO_Init+0x1f8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d019      	beq.n	8001e70 <HAL_GPIO_Init+0x1f4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_GPIO_Init+0x2f0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x2f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <HAL_GPIO_Init+0x1ec>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_GPIO_Init+0x2f8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_Init+0x1e8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_GPIO_Init+0x1e4>
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	e00a      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e60:	2306      	movs	r3, #6
 8001e62:	e008      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e74:	2300      	movs	r3, #0
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e86:	4937      	ldr	r1, [pc, #220]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e94:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb8:	4a30      	ldr	r2, [pc, #192]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f ae9d 	bne.w	8001c8c <HAL_GPIO_Init+0x10>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	48000c00 	.word	0x48000c00
 8001f74:	48001000 	.word	0x48001000
 8001f78:	48001400 	.word	0x48001400
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d141      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d131      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd2:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2232      	movs	r2, #50	; 0x32
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002002:	e002      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3b01      	subs	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d102      	bne.n	800201e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f2      	bne.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201e:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202a:	d158      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e057      	b.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002036:	4a2d      	ldr	r2, [pc, #180]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002040:	e04d      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002070:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	; 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d112      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e011      	b.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020cc:	e007      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40007000 	.word	0x40007000
 80020f0:	20000000 	.word	0x20000000
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002106:	6093      	str	r3, [r2, #8]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e306      	b.n	8002738 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d075      	beq.n	8002222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	4b97      	ldr	r3, [pc, #604]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002140:	4b94      	ldr	r3, [pc, #592]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0x3e>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d002      	beq.n	800215c <HAL_RCC_OscConfig+0x44>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e2e1      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x74>
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a84      	ldr	r2, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 80021b0:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b75      	ldr	r3, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a74      	ldr	r2, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe94 	bl	8000efc <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fe90 	bl	8000efc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e2a6      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ea:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fe80 	bl	8000efc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fe7c 	bl	8000efc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e292      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002212:	4b60      	ldr	r3, [pc, #384]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d075      	beq.n	800231a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002238:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d102      	bne.n	800224e <HAL_RCC_OscConfig+0x136>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d002      	beq.n	8002254 <HAL_RCC_OscConfig+0x13c>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11f      	bne.n	8002294 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_OscConfig+0x154>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e265      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4946      	ldr	r1, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002280:	4b45      	ldr	r3, [pc, #276]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fded 	bl	8000e64 <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d043      	beq.n	8002318 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e251      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe28 	bl	8000efc <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7fe fe24 	bl	8000efc <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e23a      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	492d      	ldr	r1, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
 80022e2:	e01a      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe04 	bl	8000efc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe fe00 	bl	8000efc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e216      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d041      	beq.n	80023aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01c      	beq.n	8002368 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fddd 	bl	8000efc <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe fdd9 	bl	8000efc <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1ef      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ef      	beq.n	8002346 <HAL_RCC_OscConfig+0x22e>
 8002366:	e020      	b.n	80023aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fdc0 	bl	8000efc <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800237e:	e00d      	b.n	800239c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fdbc 	bl	8000efc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d906      	bls.n	800239c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1d2      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800239c:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ea      	bne.n	8002380 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80a6 	beq.w	8002504 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023bc:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x2b4>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x2b6>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	4a7e      	ldr	r2, [pc, #504]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
 80023de:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b79      	ldr	r3, [pc, #484]	; (80025d4 <HAL_RCC_OscConfig+0x4bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x4bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x4bc>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe fd79 	bl	8000efc <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7fe fd75 	bl	8000efc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e18b      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	4b6c      	ldr	r3, [pc, #432]	; (80025d4 <HAL_RCC_OscConfig+0x4bc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d108      	bne.n	8002446 <HAL_RCC_OscConfig+0x32e>
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002444:	e024      	b.n	8002490 <HAL_RCC_OscConfig+0x378>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d110      	bne.n	8002470 <HAL_RCC_OscConfig+0x358>
 800244e:	4b60      	ldr	r3, [pc, #384]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	4a5e      	ldr	r2, [pc, #376]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	4a5a      	ldr	r2, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246e:	e00f      	b.n	8002490 <HAL_RCC_OscConfig+0x378>
 8002470:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fd30 	bl	8000efc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fd2c 	bl	8000efc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e140      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ed      	beq.n	80024a0 <HAL_RCC_OscConfig+0x388>
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fd19 	bl	8000efc <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd15 	bl	8000efc <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e129      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ed      	bne.n	80024ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03c      	beq.n	800258a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01c      	beq.n	8002552 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251e:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fce8 	bl	8000efc <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002530:	f7fe fce4 	bl	8000efc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0fa      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ef      	beq.n	8002530 <HAL_RCC_OscConfig+0x418>
 8002550:	e01b      	b.n	800258a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7fe fccb 	bl	8000efc <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256a:	f7fe fcc7 	bl	8000efc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0dd      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 800257e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ef      	bne.n	800256a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80d1 	beq.w	8002736 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b0c      	cmp	r3, #12
 800259e:	f000 808b 	beq.w	80026b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d15e      	bne.n	8002668 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fca1 	bl	8000efc <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e00c      	b.n	80025d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe fc9d 	bl	8000efc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d905      	bls.n	80025d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0b3      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ec      	bne.n	80025be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x62c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6a11      	ldr	r1, [r2, #32]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025fe:	0212      	lsls	r2, r2, #8
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002606:	0852      	lsrs	r2, r2, #1
 8002608:	3a01      	subs	r2, #1
 800260a:	0552      	lsls	r2, r2, #21
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002612:	0852      	lsrs	r2, r2, #1
 8002614:	3a01      	subs	r2, #1
 8002616:	0652      	lsls	r2, r2, #25
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800261e:	06d2      	lsls	r2, r2, #27
 8002620:	430a      	orrs	r2, r1
 8002622:	4947      	ldr	r1, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 8002624:	4313      	orrs	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800262e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a41      	ldr	r2, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fc5c 	bl	8000efc <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fc58 	bl	8000efc <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e06e      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x530>
 8002666:	e066      	b.n	8002736 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800266e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a31      	ldr	r2, [pc, #196]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 8002686:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe fc34 	bl	8000efc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fc30 	bl	8000efc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e046      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x580>
 80026b6:	e03e      	b.n	8002736 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e039      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_OscConfig+0x628>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d12c      	bne.n	8002732 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	3b01      	subs	r3, #1
 80026e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d123      	bne.n	8002732 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d11b      	bne.n	8002732 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d113      	bne.n	8002732 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d109      	bne.n	8002732 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	019f800c 	.word	0x019f800c

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e11e      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b91      	ldr	r3, [pc, #580]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b8e      	ldr	r3, [pc, #568]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 020f 	bic.w	r2, r3, #15
 8002776:	498c      	ldr	r1, [pc, #560]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b8a      	ldr	r3, [pc, #552]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e106      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d073      	beq.n	8002884 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d129      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0f4      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027b4:	f000 f99e 	bl	8002af4 <RCC_GetSysClockFreqFromPLLSource>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a7c      	ldr	r2, [pc, #496]	; (80029b0 <HAL_RCC_ClockConfig+0x268>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d93f      	bls.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027c2:	4b7a      	ldr	r3, [pc, #488]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d033      	beq.n	8002842 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d12f      	bne.n	8002842 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ea:	4a70      	ldr	r2, [pc, #448]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e024      	b.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0c6      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0be      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002820:	f000 f8ce 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <HAL_RCC_ClockConfig+0x268>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d909      	bls.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002836:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4957      	ldr	r1, [pc, #348]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb52 	bl	8000efc <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fb4e 	bl	8000efc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e095      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b4e      	ldr	r3, [pc, #312]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a42      	ldr	r2, [pc, #264]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028bc:	4a3b      	ldr	r2, [pc, #236]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
 80028d6:	e008      	b.n	80028ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4a32      	ldr	r2, [pc, #200]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d21d      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 020f 	bic.w	r2, r3, #15
 8002900:	4929      	ldr	r1, [pc, #164]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002908:	f7fe faf8 	bl	8000efc <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe faf4 	bl	8000efc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e03b      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1ed      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4917      	ldr	r1, [pc, #92]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490f      	ldr	r1, [pc, #60]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002972:	f000 f825 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490c      	ldr	r1, [pc, #48]	; (80029b4 <HAL_RCC_ClockConfig+0x26c>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x270>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa64 	bl	8000e64 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	04c4b400 	.word	0x04c4b400
 80029b4:	0800547c 	.word	0x0800547c
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e047      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e03e      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d136      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	68d2      	ldr	r2, [r2, #12]
 8002a20:	0a12      	lsrs	r2, r2, #8
 8002a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
      break;
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	0a12      	lsrs	r2, r2, #8
 8002a3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
      break;
 8002a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0e5b      	lsrs	r3, r3, #25
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e001      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a68:	693b      	ldr	r3, [r7, #16]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	0800548c 	.word	0x0800548c

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002acc:	f7ff ffda 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	0800548c 	.word	0x0800548c

08002af4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d10c      	bne.n	8002b32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b22:	68d2      	ldr	r2, [r2, #12]
 8002b24:	0a12      	lsrs	r2, r2, #8
 8002b26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
    break;
 8002b30:	e00c      	b.n	8002b4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	0a12      	lsrs	r2, r2, #8
 8002b40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    break;
 8002b4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0e5b      	lsrs	r3, r3, #25
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b66:	687b      	ldr	r3, [r7, #4]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000
 8002b78:	007a1200 	.word	0x007a1200
 8002b7c:	00f42400 	.word	0x00f42400

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8098 	beq.w	8002cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a3f      	ldr	r2, [pc, #252]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a39      	ldr	r2, [pc, #228]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe f991 	bl	8000efc <HAL_GetTick>
 8002bda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bdc:	e009      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe f98d 	bl	8000efc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf0:	e005      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ef      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d159      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01e      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fe f94d 	bl	8000efc <HAL_GetTick>
 8002c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	e00b      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe f949 	bl	8000efc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d902      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c7c:	e006      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ec      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	74bb      	strb	r3, [r7, #18]
 8002cae:	e005      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cbc:	7c7b      	ldrb	r3, [r7, #17]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4ba7      	ldr	r3, [pc, #668]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	4aa6      	ldr	r2, [pc, #664]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cda:	4ba1      	ldr	r3, [pc, #644]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	499d      	ldr	r1, [pc, #628]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cfc:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 020c 	bic.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4995      	ldr	r1, [pc, #596]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d1e:	4b90      	ldr	r3, [pc, #576]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	498c      	ldr	r1, [pc, #560]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d40:	4b87      	ldr	r3, [pc, #540]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4984      	ldr	r1, [pc, #528]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	497b      	ldr	r1, [pc, #492]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4973      	ldr	r1, [pc, #460]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da6:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	496a      	ldr	r1, [pc, #424]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc8:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4962      	ldr	r1, [pc, #392]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4959      	ldr	r1, [pc, #356]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e0c:	4b54      	ldr	r3, [pc, #336]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	4951      	ldr	r1, [pc, #324]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4948      	ldr	r1, [pc, #288]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4940      	ldr	r1, [pc, #256]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	4932      	ldr	r1, [pc, #200]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	4924      	ldr	r1, [pc, #144]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	4916      	ldr	r1, [pc, #88]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f16:	d105      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4908      	ldr	r1, [pc, #32]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a02      	ldr	r2, [pc, #8]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5a:	60d3      	str	r3, [r2, #12]
 8002f5c:	e002      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4926      	ldr	r1, [pc, #152]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb6:	4918      	ldr	r1, [pc, #96]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800300c:	7cbb      	ldrb	r3, [r7, #18]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e042      	b.n	80030b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fe11 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2224      	movs	r2, #36	; 0x24
 800304a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fcf8 	bl	8003a54 <UART_SetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 ffe8 	bl	800404c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800308a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f001 f86f 	bl	8004190 <UART_CheckIdleState>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 8083 	bne.w	80031de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Transmit+0x28>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e07b      	b.n	80031e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Transmit+0x3a>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e074      	b.n	80031e0 <HAL_UART_Transmit+0x124>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2221      	movs	r2, #33	; 0x21
 800310a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800310e:	f7fd fef5 	bl	8000efc <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d108      	bne.n	8003140 <HAL_UART_Transmit+0x84>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e003      	b.n	8003148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003150:	e02c      	b.n	80031ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f001 f862 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e039      	b.n	80031e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3302      	adds	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e007      	b.n	800319a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1cc      	bne.n	8003152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f001 f82f 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e006      	b.n	80031e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d142      	bne.n	8003286 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_UART_Receive_DMA+0x24>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e03b      	b.n	8003288 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_UART_Receive_DMA+0x36>
 800321a:	2302      	movs	r3, #2
 800321c:	e034      	b.n	8003288 <HAL_UART_Receive_DMA+0xa0>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_UART_Receive_DMA+0xa8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	613b      	str	r3, [r7, #16]
   return(result);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	69f9      	ldr	r1, [r7, #28]
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e6      	bne.n	8003244 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f001 f89b 	bl	80043b8 <UART_Start_Receive_DMA>
 8003282:	4603      	mov	r3, r0
 8003284:	e000      	b.n	8003288 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40008000 	.word	0x40008000

08003294 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b090      	sub	sp, #64	; 0x40
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d139      	bne.n	800332e <HAL_UART_DMAStop+0x9a>
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	2b21      	cmp	r3, #33	; 0x21
 80032be:	d136      	bne.n	800332e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3308      	adds	r3, #8
 80032de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e5      	bne.n	80032c0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe faa0 	bl	8001846 <HAL_DMA_Abort>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fc07 	bl	8001b24 <HAL_DMA_GetError>
 8003316:	4603      	mov	r3, r0
 8003318:	2b20      	cmp	r3, #32
 800331a:	d105      	bne.n	8003328 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2210      	movs	r2, #16
 8003320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e044      	b.n	80033b2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f001 f8ed 	bl	8004508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d139      	bne.n	80033b0 <HAL_UART_DMAStop+0x11c>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	2b22      	cmp	r3, #34	; 0x22
 8003340:	d136      	bne.n	80033b0 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	60bb      	str	r3, [r7, #8]
   return(result);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	61ba      	str	r2, [r7, #24]
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6979      	ldr	r1, [r7, #20]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	613b      	str	r3, [r7, #16]
   return(result);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e5      	bne.n	8003342 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fa5f 	bl	8001846 <HAL_DMA_Abort>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fbc6 	bl	8001b24 <HAL_DMA_GetError>
 8003398:	4603      	mov	r3, r0
 800339a:	2b20      	cmp	r3, #32
 800339c:	d105      	bne.n	80033aa <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2210      	movs	r2, #16
 80033a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e003      	b.n	80033b2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 f8ed 	bl	800458a <UART_EndRxTransfer>
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3740      	adds	r7, #64	; 0x40
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0ba      	sub	sp, #232	; 0xe8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80033e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80033ea:	4013      	ands	r3, r2
 80033ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80033f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 82d6 	beq.w	80039d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
      }
      return;
 800342e:	e2d0      	b.n	80039d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 811f 	beq.w	8003678 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800343a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <HAL_UART_IRQHandler+0x2b0>)
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800344a:	4b89      	ldr	r3, [pc, #548]	; (8003670 <HAL_UART_IRQHandler+0x2b4>)
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8112 	beq.w	8003678 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d011      	beq.n	8003484 <HAL_UART_IRQHandler+0xc8>
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d011      	beq.n	80034b4 <HAL_UART_IRQHandler+0xf8>
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2202      	movs	r2, #2
 80034a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d011      	beq.n	80034e4 <HAL_UART_IRQHandler+0x128>
 80034c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2204      	movs	r2, #4
 80034d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d017      	beq.n	8003520 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80034fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_UART_IRQHandler+0x2b0>)
 8003502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_UART_IRQHandler+0x196>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 823c 	beq.w	80039d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d013      	beq.n	8003592 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d105      	bne.n	8003582 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04f      	beq.n	8003656 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 ffe7 	bl	800458a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d141      	bne.n	800364e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3308      	adds	r3, #8
 80035d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800360e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1d9      	bne.n	80035ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_UART_IRQHandler+0x2b8>)
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe f964 	bl	80018f8 <HAL_DMA_Abort_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003640:	4610      	mov	r0, r2
 8003642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e00f      	b.n	8003666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9ee 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	e00b      	b.n	8003666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9ea 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e007      	b.n	8003666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f9e6 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003664:	e1b7      	b.n	80039d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003666:	bf00      	nop
    return;
 8003668:	e1b5      	b.n	80039d6 <HAL_UART_IRQHandler+0x61a>
 800366a:	bf00      	nop
 800366c:	10000001 	.word	0x10000001
 8003670:	04000120 	.word	0x04000120
 8003674:	08004835 	.word	0x08004835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 814a 	bne.w	8003916 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8143 	beq.w	8003916 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 813c 	beq.w	8003916 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2210      	movs	r2, #16
 80036a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	f040 80b5 	bne.w	8003820 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8187 	beq.w	80039da <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036d6:	429a      	cmp	r2, r3
 80036d8:	f080 817f 	bcs.w	80039da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8086 	bne.w	8003804 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800370c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003726:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800372e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800373a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1da      	bne.n	80036f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800376e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e1      	bne.n	8003742 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d4:	f023 0310 	bic.w	r3, r3, #16
 80037d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80037e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e4      	bne.n	80037c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe f821 	bl	8001846 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003810:	b29b      	uxth	r3, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f90f 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800381e:	e0dc      	b.n	80039da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800382c:	b29b      	uxth	r3, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80ce 	beq.w	80039de <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80c9 	beq.w	80039de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e4      	bne.n	800384c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	623b      	str	r3, [r7, #32]
   return(result);
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038aa:	633a      	str	r2, [r7, #48]	; 0x30
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e1      	bne.n	8003882 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	617b      	str	r3, [r7, #20]
   return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e4      	bne.n	80038d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f894 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003914:	e063      	b.n	80039de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <HAL_UART_IRQHandler+0x584>
 8003922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ffbc 	bl	80048b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800393e:	e051      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b00      	cmp	r3, #0
 800394a:	d014      	beq.n	8003976 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	2b00      	cmp	r3, #0
 800396a:	d03a      	beq.n	80039e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
    }
    return;
 8003974:	e035      	b.n	80039e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_UART_IRQHandler+0x5da>
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 ff66 	bl	8004860 <UART_EndTransmit_IT>
    return;
 8003994:	e026      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_UART_IRQHandler+0x5fa>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 ff95 	bl	80048de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039b4:	e016      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_UART_IRQHandler+0x628>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da0c      	bge.n	80039e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 ff7d 	bl	80048ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039d0:	e008      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
      return;
 80039d2:	bf00      	nop
 80039d4:	e006      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
    return;
 80039d6:	bf00      	nop
 80039d8:	e004      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
      return;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
      return;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <HAL_UART_IRQHandler+0x628>
    return;
 80039e2:	bf00      	nop
  }
}
 80039e4:	37e8      	adds	r7, #232	; 0xe8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b08c      	sub	sp, #48	; 0x30
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4baa      	ldr	r3, [pc, #680]	; (8003d2c <UART_SetConfig+0x2d8>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a9f      	ldr	r2, [pc, #636]	; (8003d30 <UART_SetConfig+0x2dc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	4313      	orrs	r3, r2
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003aca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f023 010f 	bic.w	r1, r3, #15
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a90      	ldr	r2, [pc, #576]	; (8003d34 <UART_SetConfig+0x2e0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d125      	bne.n	8003b44 <UART_SetConfig+0xf0>
 8003af8:	4b8f      	ldr	r3, [pc, #572]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d81a      	bhi.n	8003b3c <UART_SetConfig+0xe8>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0xb8>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b35 	.word	0x08003b35
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b22:	e116      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2a:	e112      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b32:	e10e      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003b34:	2308      	movs	r3, #8
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e10a      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e106      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7c      	ldr	r2, [pc, #496]	; (8003d3c <UART_SetConfig+0x2e8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d138      	bne.n	8003bc0 <UART_SetConfig+0x16c>
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d82d      	bhi.n	8003bb8 <UART_SetConfig+0x164>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <UART_SetConfig+0x110>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003bb9 	.word	0x08003bb9
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bb9 	.word	0x08003bb9
 8003b80:	08003bb9 	.word	0x08003bb9
 8003b84:	08003ba1 	.word	0x08003ba1
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	e0d8      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e0d4      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bae:	e0d0      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb6:	e0cc      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	e0c8      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5e      	ldr	r2, [pc, #376]	; (8003d40 <UART_SetConfig+0x2ec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d125      	bne.n	8003c16 <UART_SetConfig+0x1c2>
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d016      	beq.n	8003c06 <UART_SetConfig+0x1b2>
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d818      	bhi.n	8003c0e <UART_SetConfig+0x1ba>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d00a      	beq.n	8003bf6 <UART_SetConfig+0x1a2>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d814      	bhi.n	8003c0e <UART_SetConfig+0x1ba>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <UART_SetConfig+0x19a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d008      	beq.n	8003bfe <UART_SetConfig+0x1aa>
 8003bec:	e00f      	b.n	8003c0e <UART_SetConfig+0x1ba>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf4:	e0ad      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfc:	e0a9      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c04:	e0a5      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c06:	2308      	movs	r3, #8
 8003c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0c:	e0a1      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c0e:	2310      	movs	r3, #16
 8003c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c14:	e09d      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <UART_SetConfig+0x2f0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d125      	bne.n	8003c6c <UART_SetConfig+0x218>
 8003c20:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c2c:	d016      	beq.n	8003c5c <UART_SetConfig+0x208>
 8003c2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c30:	d818      	bhi.n	8003c64 <UART_SetConfig+0x210>
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d00a      	beq.n	8003c4c <UART_SetConfig+0x1f8>
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d814      	bhi.n	8003c64 <UART_SetConfig+0x210>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <UART_SetConfig+0x1f0>
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d008      	beq.n	8003c54 <UART_SetConfig+0x200>
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x210>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e082      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c52:	e07e      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e07a      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e076      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e072      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <UART_SetConfig+0x2f4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12a      	bne.n	8003ccc <UART_SetConfig+0x278>
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0x268>
 8003c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0x270>
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d00c      	beq.n	8003cac <UART_SetConfig+0x258>
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	d815      	bhi.n	8003cc4 <UART_SetConfig+0x270>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x250>
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x260>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x270>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e052      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e04e      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e04a      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e046      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cca:	e042      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <UART_SetConfig+0x2dc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13a      	bne.n	8003d4c <UART_SetConfig+0x2f8>
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <UART_SetConfig+0x2e4>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce4:	d01a      	beq.n	8003d1c <UART_SetConfig+0x2c8>
 8003ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cea:	d81b      	bhi.n	8003d24 <UART_SetConfig+0x2d0>
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf0:	d00c      	beq.n	8003d0c <UART_SetConfig+0x2b8>
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	d815      	bhi.n	8003d24 <UART_SetConfig+0x2d0>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <UART_SetConfig+0x2b0>
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d008      	beq.n	8003d14 <UART_SetConfig+0x2c0>
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x2d0>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e022      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e01e      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e01a      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e016      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e012      	b.n	8003d52 <UART_SetConfig+0x2fe>
 8003d2c:	cfff69f3 	.word	0xcfff69f3
 8003d30:	40008000 	.word	0x40008000
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40004800 	.word	0x40004800
 8003d44:	40004c00 	.word	0x40004c00
 8003d48:	40005000 	.word	0x40005000
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4aae      	ldr	r2, [pc, #696]	; (8004010 <UART_SetConfig+0x5bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f040 8097 	bne.w	8003e8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d823      	bhi.n	8003dae <UART_SetConfig+0x35a>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x318>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003d9f 	.word	0x08003d9f
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003daf 	.word	0x08003daf
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fe84 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b9e      	ldr	r3, [pc, #632]	; (8004014 <UART_SetConfig+0x5c0>)
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fe0f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8130 	beq.w	8004022 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	4a94      	ldr	r2, [pc, #592]	; (8004018 <UART_SetConfig+0x5c4>)
 8003dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d305      	bcc.n	8003df2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d903      	bls.n	8003dfa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003df8:	e113      	b.n	8004022 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	60fa      	str	r2, [r7, #12]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	4a84      	ldr	r2, [pc, #528]	; (8004018 <UART_SetConfig+0x5c4>)
 8003e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2200      	movs	r2, #0
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e1c:	f7fc f9fc 	bl	8000218 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	020b      	lsls	r3, r1, #8
 8003e32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e36:	0202      	lsls	r2, r0, #8
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	6849      	ldr	r1, [r1, #4]
 8003e3c:	0849      	lsrs	r1, r1, #1
 8003e3e:	2000      	movs	r0, #0
 8003e40:	460c      	mov	r4, r1
 8003e42:	4605      	mov	r5, r0
 8003e44:	eb12 0804 	adds.w	r8, r2, r4
 8003e48:	eb43 0905 	adc.w	r9, r3, r5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	469a      	mov	sl, r3
 8003e54:	4693      	mov	fp, r2
 8003e56:	4652      	mov	r2, sl
 8003e58:	465b      	mov	r3, fp
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	f7fc f9db 	bl	8000218 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4613      	mov	r3, r2
 8003e68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e70:	d308      	bcc.n	8003e84 <UART_SetConfig+0x430>
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e78:	d204      	bcs.n	8003e84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e0ce      	b.n	8004022 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e8a:	e0ca      	b.n	8004022 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d166      	bne.n	8003f64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d827      	bhi.n	8003eee <UART_SetConfig+0x49a>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x450>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe fde8 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ece:	e014      	b.n	8003efa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe fdfa 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ed6:	e010      	b.n	8003efa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b4e      	ldr	r3, [pc, #312]	; (8004014 <UART_SetConfig+0x5c0>)
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003edc:	e00d      	b.n	8003efa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe fd6f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ee4:	e009      	b.n	8003efa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8090 	beq.w	8004022 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	4a44      	ldr	r2, [pc, #272]	; (8004018 <UART_SetConfig+0x5c4>)
 8003f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f14:	005a      	lsls	r2, r3, #1
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d916      	bls.n	8003f5c <UART_SetConfig+0x508>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d212      	bcs.n	8003f5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f023 030f 	bic.w	r3, r3, #15
 8003f3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	8bfb      	ldrh	r3, [r7, #30]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	8bfa      	ldrh	r2, [r7, #30]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e062      	b.n	8004022 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f62:	e05e      	b.n	8004022 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d828      	bhi.n	8003fbe <UART_SetConfig+0x56a>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x520>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fbf 	.word	0x08003fbf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003fbf 	.word	0x08003fbf
 8003f8c:	08003fbf 	.word	0x08003fbf
 8003f90:	08003fbf 	.word	0x08003fbf
 8003f94:	08003fb7 	.word	0x08003fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7fe fd80 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9e:	e014      	b.n	8003fca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7fe fd92 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa6:	e010      	b.n	8003fca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <UART_SetConfig+0x5c0>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fac:	e00d      	b.n	8003fca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fae:	f7fe fd07 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fb4:	e009      	b.n	8003fca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fbc:	e005      	b.n	8003fca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fc8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d028      	beq.n	8004022 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <UART_SetConfig+0x5c4>)
 8003fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	441a      	add	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	d910      	bls.n	800401c <UART_SetConfig+0x5c8>
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004000:	d20c      	bcs.n	800401c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	b29a      	uxth	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e009      	b.n	8004022 <UART_SetConfig+0x5ce>
 800400e:	bf00      	nop
 8004010:	40008000 	.word	0x40008000
 8004014:	00f42400 	.word	0x00f42400
 8004018:	08005494 	.word	0x08005494
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2201      	movs	r2, #1
 8004026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2201      	movs	r2, #1
 800402e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2200      	movs	r2, #0
 800403c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800403e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004042:	4618      	mov	r0, r3
 8004044:	3730      	adds	r7, #48	; 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800404c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01a      	beq.n	8004162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414a:	d10a      	bne.n	8004162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a0:	f7fc feac 	bl	8000efc <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d10e      	bne.n	80041d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f82f 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e025      	b.n	800421e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d10e      	bne.n	80041fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f819 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e00f      	b.n	800421e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b09c      	sub	sp, #112	; 0x70
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	e0a9      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	f000 80a5 	beq.w	800438c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fc fe5b 	bl	8000efc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <UART_WaitOnFlagUntilTimeout+0x32>
 8004252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004254:	2b00      	cmp	r3, #0
 8004256:	d140      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800426c:	667b      	str	r3, [r7, #100]	; 0x64
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004278:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800427c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e6      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	663b      	str	r3, [r7, #96]	; 0x60
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e069      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d051      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d149      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	613b      	str	r3, [r7, #16]
   return(result);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	66bb      	str	r3, [r7, #104]	; 0x68
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004354:	623a      	str	r2, [r7, #32]
 8004356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	61bb      	str	r3, [r7, #24]
   return(result);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e010      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	f43f af46 	beq.w	8004238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3770      	adds	r7, #112	; 0x70
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b096      	sub	sp, #88	; 0x58
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2222      	movs	r2, #34	; 0x22
 80043e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02c      	beq.n	8004446 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f0:	4a42      	ldr	r2, [pc, #264]	; (80044fc <UART_Start_Receive_DMA+0x144>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f8:	4a41      	ldr	r2, [pc, #260]	; (8004500 <UART_Start_Receive_DMA+0x148>)
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004400:	4a40      	ldr	r2, [pc, #256]	; (8004504 <UART_Start_Receive_DMA+0x14c>)
 8004402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004408:	2200      	movs	r2, #0
 800440a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3324      	adds	r3, #36	; 0x24
 8004416:	4619      	mov	r1, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	461a      	mov	r2, r3
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	f7fd f996 	bl	8001750 <HAL_DMA_Start_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2210      	movs	r2, #16
 800442e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e055      	b.n	80044f2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d018      	beq.n	8004488 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446a:	657b      	str	r3, [r7, #84]	; 0x54
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
 8004476:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800447a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e6      	bne.n	8004456 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	653b      	str	r3, [r7, #80]	; 0x50
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a8:	637a      	str	r2, [r7, #52]	; 0x34
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	613b      	str	r3, [r7, #16]
   return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3308      	adds	r3, #8
 80044da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044dc:	623a      	str	r2, [r7, #32]
 80044de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3758      	adds	r7, #88	; 0x58
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08004657 	.word	0x08004657
 8004500:	0800477d 	.word	0x0800477d
 8004504:	080047b5 	.word	0x080047b5

08004508 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b08f      	sub	sp, #60	; 0x3c
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	61fb      	str	r3, [r7, #28]
   return(result);
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004530:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60bb      	str	r3, [r7, #8]
   return(result);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	61ba      	str	r2, [r7, #24]
 8004564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	613b      	str	r3, [r7, #16]
   return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800457e:	bf00      	nop
 8004580:	373c      	adds	r7, #60	; 0x3c
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b095      	sub	sp, #84	; 0x54
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
 80045b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e3      	bne.n	80045c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d118      	bne.n	8004636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	60bb      	str	r3, [r7, #8]
   return(result);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e6      	bne.n	8004604 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	671a      	str	r2, [r3, #112]	; 0x70
}
 800464a:	bf00      	nop
 800464c:	3754      	adds	r7, #84	; 0x54
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b09c      	sub	sp, #112	; 0x70
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d171      	bne.n	8004756 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	2200      	movs	r2, #0
 8004676:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004698:	65bb      	str	r3, [r7, #88]	; 0x58
 800469a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	667b      	str	r3, [r7, #100]	; 0x64
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046cc:	647a      	str	r2, [r7, #68]	; 0x44
 80046ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	623b      	str	r3, [r7, #32]
   return(result);
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004700:	633a      	str	r2, [r7, #48]	; 0x30
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	2220      	movs	r2, #32
 8004718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d118      	bne.n	8004756 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	60fb      	str	r3, [r7, #12]
   return(result);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800473a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	617b      	str	r3, [r7, #20]
   return(result);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004764:	4619      	mov	r1, r3
 8004766:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004768:	f7ff f968 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476c:	e002      	b.n	8004774 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800476e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004770:	f7ff f946 	bl	8003a00 <HAL_UART_RxCpltCallback>
}
 8004774:	bf00      	nop
 8004776:	3770      	adds	r7, #112	; 0x70
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d109      	bne.n	80047a6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff f94c 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a4:	e002      	b.n	80047ac <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff f934 	bl	8003a14 <HAL_UART_RxHalfCpltCallback>
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b80      	cmp	r3, #128	; 0x80
 80047de:	d109      	bne.n	80047f4 <UART_DMAError+0x40>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b21      	cmp	r3, #33	; 0x21
 80047e4:	d106      	bne.n	80047f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7ff fe8a 	bl	8004508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d109      	bne.n	8004816 <UART_DMAError+0x62>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b22      	cmp	r3, #34	; 0x22
 8004806:	d106      	bne.n	8004816 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2200      	movs	r2, #0
 800480c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	f7ff feba 	bl	800458a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481c:	f043 0210 	orr.w	r2, r3, #16
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff f8fe 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff f8e8 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	60bb      	str	r3, [r7, #8]
   return(result);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6979      	ldr	r1, [r7, #20]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	613b      	str	r3, [r7, #16]
   return(result);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e6      	bne.n	8004868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff f89f 	bl	80039ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ae:	bf00      	nop
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UARTEx_DisableFifoMode+0x16>
 8004904:	2302      	movs	r3, #2
 8004906:	e027      	b.n	8004958 <HAL_UARTEx_DisableFifoMode+0x66>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004936:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004978:	2302      	movs	r3, #2
 800497a:	e02d      	b.n	80049d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f84f 	bl	8004a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e02d      	b.n	8004a54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f811 	bl	8004a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a7c:	e031      	b.n	8004ae2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a7e:	2308      	movs	r3, #8
 8004a80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a82:	2308      	movs	r3, #8
 8004a84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0e5b      	lsrs	r3, r3, #25
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	0f5b      	lsrs	r3, r3, #29
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aa6:	7bbb      	ldrb	r3, [r7, #14]
 8004aa8:	7b3a      	ldrb	r2, [r7, #12]
 8004aaa:	4911      	ldr	r1, [pc, #68]	; (8004af0 <UARTEx_SetNbDataToProcess+0x94>)
 8004aac:	5c8a      	ldrb	r2, [r1, r2]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ab2:	7b3a      	ldrb	r2, [r7, #12]
 8004ab4:	490f      	ldr	r1, [pc, #60]	; (8004af4 <UARTEx_SetNbDataToProcess+0x98>)
 8004ab6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	7b7a      	ldrb	r2, [r7, #13]
 8004ac8:	4909      	ldr	r1, [pc, #36]	; (8004af0 <UARTEx_SetNbDataToProcess+0x94>)
 8004aca:	5c8a      	ldrb	r2, [r1, r2]
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ad0:	7b7a      	ldrb	r2, [r7, #13]
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <UARTEx_SetNbDataToProcess+0x98>)
 8004ad4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	080054ac 	.word	0x080054ac
 8004af4:	080054b4 	.word	0x080054b4

08004af8 <std>:
 8004af8:	2300      	movs	r3, #0
 8004afa:	b510      	push	{r4, lr}
 8004afc:	4604      	mov	r4, r0
 8004afe:	e9c0 3300 	strd	r3, r3, [r0]
 8004b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b06:	6083      	str	r3, [r0, #8]
 8004b08:	8181      	strh	r1, [r0, #12]
 8004b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b0c:	81c2      	strh	r2, [r0, #14]
 8004b0e:	6183      	str	r3, [r0, #24]
 8004b10:	4619      	mov	r1, r3
 8004b12:	2208      	movs	r2, #8
 8004b14:	305c      	adds	r0, #92	; 0x5c
 8004b16:	f000 f90d 	bl	8004d34 <memset>
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <std+0x58>)
 8004b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <std+0x5c>)
 8004b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <std+0x60>)
 8004b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <std+0x64>)
 8004b28:	6323      	str	r3, [r4, #48]	; 0x30
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <std+0x68>)
 8004b2c:	6224      	str	r4, [r4, #32]
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d006      	beq.n	8004b40 <std+0x48>
 8004b32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b36:	4294      	cmp	r4, r2
 8004b38:	d002      	beq.n	8004b40 <std+0x48>
 8004b3a:	33d0      	adds	r3, #208	; 0xd0
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	d105      	bne.n	8004b4c <std+0x54>
 8004b40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b48:	f000 b926 	b.w	8004d98 <__retarget_lock_init_recursive>
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	bf00      	nop
 8004b50:	08005055 	.word	0x08005055
 8004b54:	08005077 	.word	0x08005077
 8004b58:	080050af 	.word	0x080050af
 8004b5c:	080050d3 	.word	0x080050d3
 8004b60:	200003f4 	.word	0x200003f4

08004b64 <stdio_exit_handler>:
 8004b64:	4a02      	ldr	r2, [pc, #8]	; (8004b70 <stdio_exit_handler+0xc>)
 8004b66:	4903      	ldr	r1, [pc, #12]	; (8004b74 <stdio_exit_handler+0x10>)
 8004b68:	4803      	ldr	r0, [pc, #12]	; (8004b78 <stdio_exit_handler+0x14>)
 8004b6a:	f000 b869 	b.w	8004c40 <_fwalk_sglue>
 8004b6e:	bf00      	nop
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	08004fed 	.word	0x08004fed
 8004b78:	20000018 	.word	0x20000018

08004b7c <cleanup_stdio>:
 8004b7c:	6841      	ldr	r1, [r0, #4]
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <cleanup_stdio+0x34>)
 8004b80:	4299      	cmp	r1, r3
 8004b82:	b510      	push	{r4, lr}
 8004b84:	4604      	mov	r4, r0
 8004b86:	d001      	beq.n	8004b8c <cleanup_stdio+0x10>
 8004b88:	f000 fa30 	bl	8004fec <_fflush_r>
 8004b8c:	68a1      	ldr	r1, [r4, #8]
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <cleanup_stdio+0x38>)
 8004b90:	4299      	cmp	r1, r3
 8004b92:	d002      	beq.n	8004b9a <cleanup_stdio+0x1e>
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 fa29 	bl	8004fec <_fflush_r>
 8004b9a:	68e1      	ldr	r1, [r4, #12]
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <cleanup_stdio+0x3c>)
 8004b9e:	4299      	cmp	r1, r3
 8004ba0:	d004      	beq.n	8004bac <cleanup_stdio+0x30>
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba8:	f000 ba20 	b.w	8004fec <_fflush_r>
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	bf00      	nop
 8004bb0:	200003f4 	.word	0x200003f4
 8004bb4:	2000045c 	.word	0x2000045c
 8004bb8:	200004c4 	.word	0x200004c4

08004bbc <global_stdio_init.part.0>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <global_stdio_init.part.0+0x30>)
 8004bc0:	4c0b      	ldr	r4, [pc, #44]	; (8004bf0 <global_stdio_init.part.0+0x34>)
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <global_stdio_init.part.0+0x38>)
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2104      	movs	r1, #4
 8004bcc:	f7ff ff94 	bl	8004af8 <std>
 8004bd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2109      	movs	r1, #9
 8004bd8:	f7ff ff8e 	bl	8004af8 <std>
 8004bdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004be0:	2202      	movs	r2, #2
 8004be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be6:	2112      	movs	r1, #18
 8004be8:	f7ff bf86 	b.w	8004af8 <std>
 8004bec:	2000052c 	.word	0x2000052c
 8004bf0:	200003f4 	.word	0x200003f4
 8004bf4:	08004b65 	.word	0x08004b65

08004bf8 <__sfp_lock_acquire>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__sfp_lock_acquire+0x8>)
 8004bfa:	f000 b8ce 	b.w	8004d9a <__retarget_lock_acquire_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000531 	.word	0x20000531

08004c04 <__sfp_lock_release>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__sfp_lock_release+0x8>)
 8004c06:	f000 b8c9 	b.w	8004d9c <__retarget_lock_release_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	20000531 	.word	0x20000531

08004c10 <__sinit>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4604      	mov	r4, r0
 8004c14:	f7ff fff0 	bl	8004bf8 <__sfp_lock_acquire>
 8004c18:	6a23      	ldr	r3, [r4, #32]
 8004c1a:	b11b      	cbz	r3, 8004c24 <__sinit+0x14>
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f7ff bff0 	b.w	8004c04 <__sfp_lock_release>
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <__sinit+0x28>)
 8004c26:	6223      	str	r3, [r4, #32]
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <__sinit+0x2c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f5      	bne.n	8004c1c <__sinit+0xc>
 8004c30:	f7ff ffc4 	bl	8004bbc <global_stdio_init.part.0>
 8004c34:	e7f2      	b.n	8004c1c <__sinit+0xc>
 8004c36:	bf00      	nop
 8004c38:	08004b7d 	.word	0x08004b7d
 8004c3c:	2000052c 	.word	0x2000052c

08004c40 <_fwalk_sglue>:
 8004c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c44:	4607      	mov	r7, r0
 8004c46:	4688      	mov	r8, r1
 8004c48:	4614      	mov	r4, r2
 8004c4a:	2600      	movs	r6, #0
 8004c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c50:	f1b9 0901 	subs.w	r9, r9, #1
 8004c54:	d505      	bpl.n	8004c62 <_fwalk_sglue+0x22>
 8004c56:	6824      	ldr	r4, [r4, #0]
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	d1f7      	bne.n	8004c4c <_fwalk_sglue+0xc>
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c62:	89ab      	ldrh	r3, [r5, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d907      	bls.n	8004c78 <_fwalk_sglue+0x38>
 8004c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	d003      	beq.n	8004c78 <_fwalk_sglue+0x38>
 8004c70:	4629      	mov	r1, r5
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c0      	blx	r8
 8004c76:	4306      	orrs	r6, r0
 8004c78:	3568      	adds	r5, #104	; 0x68
 8004c7a:	e7e9      	b.n	8004c50 <_fwalk_sglue+0x10>

08004c7c <_puts_r>:
 8004c7c:	6a03      	ldr	r3, [r0, #32]
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	6884      	ldr	r4, [r0, #8]
 8004c82:	4605      	mov	r5, r0
 8004c84:	460e      	mov	r6, r1
 8004c86:	b90b      	cbnz	r3, 8004c8c <_puts_r+0x10>
 8004c88:	f7ff ffc2 	bl	8004c10 <__sinit>
 8004c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d405      	bmi.n	8004c9e <_puts_r+0x22>
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	0598      	lsls	r0, r3, #22
 8004c96:	d402      	bmi.n	8004c9e <_puts_r+0x22>
 8004c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9a:	f000 f87e 	bl	8004d9a <__retarget_lock_acquire_recursive>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	0719      	lsls	r1, r3, #28
 8004ca2:	d513      	bpl.n	8004ccc <_puts_r+0x50>
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	b18b      	cbz	r3, 8004ccc <_puts_r+0x50>
 8004ca8:	3e01      	subs	r6, #1
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	b9e9      	cbnz	r1, 8004cf2 <_puts_r+0x76>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da2e      	bge.n	8004d18 <_puts_r+0x9c>
 8004cba:	4622      	mov	r2, r4
 8004cbc:	210a      	movs	r1, #10
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fa0b 	bl	80050da <__swbuf_r>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d007      	beq.n	8004cd8 <_puts_r+0x5c>
 8004cc8:	250a      	movs	r5, #10
 8004cca:	e007      	b.n	8004cdc <_puts_r+0x60>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fa40 	bl	8005154 <__swsetup_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d0e7      	beq.n	8004ca8 <_puts_r+0x2c>
 8004cd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cde:	07da      	lsls	r2, r3, #31
 8004ce0:	d405      	bmi.n	8004cee <_puts_r+0x72>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	059b      	lsls	r3, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_puts_r+0x72>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cea:	f000 f857 	bl	8004d9c <__retarget_lock_release_recursive>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da04      	bge.n	8004d00 <_puts_r+0x84>
 8004cf6:	69a2      	ldr	r2, [r4, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	dc06      	bgt.n	8004d0a <_puts_r+0x8e>
 8004cfc:	290a      	cmp	r1, #10
 8004cfe:	d004      	beq.n	8004d0a <_puts_r+0x8e>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	6022      	str	r2, [r4, #0]
 8004d06:	7019      	strb	r1, [r3, #0]
 8004d08:	e7cf      	b.n	8004caa <_puts_r+0x2e>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f9e4 	bl	80050da <__swbuf_r>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c9      	bne.n	8004caa <_puts_r+0x2e>
 8004d16:	e7df      	b.n	8004cd8 <_puts_r+0x5c>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	250a      	movs	r5, #10
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	701d      	strb	r5, [r3, #0]
 8004d22:	e7db      	b.n	8004cdc <_puts_r+0x60>

08004d24 <puts>:
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <puts+0xc>)
 8004d26:	4601      	mov	r1, r0
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f7ff bfa7 	b.w	8004c7c <_puts_r>
 8004d2e:	bf00      	nop
 8004d30:	20000064 	.word	0x20000064

08004d34 <memset>:
 8004d34:	4402      	add	r2, r0
 8004d36:	4603      	mov	r3, r0
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d100      	bne.n	8004d3e <memset+0xa>
 8004d3c:	4770      	bx	lr
 8004d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d42:	e7f9      	b.n	8004d38 <memset+0x4>

08004d44 <__errno>:
 8004d44:	4b01      	ldr	r3, [pc, #4]	; (8004d4c <__errno+0x8>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000064 	.word	0x20000064

08004d50 <__libc_init_array>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4d0d      	ldr	r5, [pc, #52]	; (8004d88 <__libc_init_array+0x38>)
 8004d54:	4c0d      	ldr	r4, [pc, #52]	; (8004d8c <__libc_init_array+0x3c>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	2600      	movs	r6, #0
 8004d5c:	42a6      	cmp	r6, r4
 8004d5e:	d109      	bne.n	8004d74 <__libc_init_array+0x24>
 8004d60:	4d0b      	ldr	r5, [pc, #44]	; (8004d90 <__libc_init_array+0x40>)
 8004d62:	4c0c      	ldr	r4, [pc, #48]	; (8004d94 <__libc_init_array+0x44>)
 8004d64:	f000 fb74 	bl	8005450 <_init>
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	42a6      	cmp	r6, r4
 8004d70:	d105      	bne.n	8004d7e <__libc_init_array+0x2e>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d78:	4798      	blx	r3
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	e7ee      	b.n	8004d5c <__libc_init_array+0xc>
 8004d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d82:	4798      	blx	r3
 8004d84:	3601      	adds	r6, #1
 8004d86:	e7f2      	b.n	8004d6e <__libc_init_array+0x1e>
 8004d88:	080054c4 	.word	0x080054c4
 8004d8c:	080054c4 	.word	0x080054c4
 8004d90:	080054c4 	.word	0x080054c4
 8004d94:	080054c8 	.word	0x080054c8

08004d98 <__retarget_lock_init_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <__retarget_lock_acquire_recursive>:
 8004d9a:	4770      	bx	lr

08004d9c <__retarget_lock_release_recursive>:
 8004d9c:	4770      	bx	lr
	...

08004da0 <sbrk_aligned>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4e0e      	ldr	r6, [pc, #56]	; (8004ddc <sbrk_aligned+0x3c>)
 8004da4:	460c      	mov	r4, r1
 8004da6:	6831      	ldr	r1, [r6, #0]
 8004da8:	4605      	mov	r5, r0
 8004daa:	b911      	cbnz	r1, 8004db2 <sbrk_aligned+0x12>
 8004dac:	f000 fae2 	bl	8005374 <_sbrk_r>
 8004db0:	6030      	str	r0, [r6, #0]
 8004db2:	4621      	mov	r1, r4
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 fadd 	bl	8005374 <_sbrk_r>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d00a      	beq.n	8004dd4 <sbrk_aligned+0x34>
 8004dbe:	1cc4      	adds	r4, r0, #3
 8004dc0:	f024 0403 	bic.w	r4, r4, #3
 8004dc4:	42a0      	cmp	r0, r4
 8004dc6:	d007      	beq.n	8004dd8 <sbrk_aligned+0x38>
 8004dc8:	1a21      	subs	r1, r4, r0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 fad2 	bl	8005374 <_sbrk_r>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d101      	bne.n	8004dd8 <sbrk_aligned+0x38>
 8004dd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dd8:	4620      	mov	r0, r4
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	20000538 	.word	0x20000538

08004de0 <_malloc_r>:
 8004de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de4:	1ccd      	adds	r5, r1, #3
 8004de6:	f025 0503 	bic.w	r5, r5, #3
 8004dea:	3508      	adds	r5, #8
 8004dec:	2d0c      	cmp	r5, #12
 8004dee:	bf38      	it	cc
 8004df0:	250c      	movcc	r5, #12
 8004df2:	2d00      	cmp	r5, #0
 8004df4:	4607      	mov	r7, r0
 8004df6:	db01      	blt.n	8004dfc <_malloc_r+0x1c>
 8004df8:	42a9      	cmp	r1, r5
 8004dfa:	d905      	bls.n	8004e08 <_malloc_r+0x28>
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	2600      	movs	r6, #0
 8004e02:	4630      	mov	r0, r6
 8004e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004edc <_malloc_r+0xfc>
 8004e0c:	f000 f916 	bl	800503c <__malloc_lock>
 8004e10:	f8d8 3000 	ldr.w	r3, [r8]
 8004e14:	461c      	mov	r4, r3
 8004e16:	bb5c      	cbnz	r4, 8004e70 <_malloc_r+0x90>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f7ff ffc0 	bl	8004da0 <sbrk_aligned>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	4604      	mov	r4, r0
 8004e24:	d155      	bne.n	8004ed2 <_malloc_r+0xf2>
 8004e26:	f8d8 4000 	ldr.w	r4, [r8]
 8004e2a:	4626      	mov	r6, r4
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	d145      	bne.n	8004ebc <_malloc_r+0xdc>
 8004e30:	2c00      	cmp	r4, #0
 8004e32:	d048      	beq.n	8004ec6 <_malloc_r+0xe6>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	4631      	mov	r1, r6
 8004e38:	4638      	mov	r0, r7
 8004e3a:	eb04 0903 	add.w	r9, r4, r3
 8004e3e:	f000 fa99 	bl	8005374 <_sbrk_r>
 8004e42:	4581      	cmp	r9, r0
 8004e44:	d13f      	bne.n	8004ec6 <_malloc_r+0xe6>
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	1a6d      	subs	r5, r5, r1
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f7ff ffa7 	bl	8004da0 <sbrk_aligned>
 8004e52:	3001      	adds	r0, #1
 8004e54:	d037      	beq.n	8004ec6 <_malloc_r+0xe6>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	442b      	add	r3, r5
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d038      	beq.n	8004ed6 <_malloc_r+0xf6>
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	42a2      	cmp	r2, r4
 8004e68:	d12b      	bne.n	8004ec2 <_malloc_r+0xe2>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e00f      	b.n	8004e90 <_malloc_r+0xb0>
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	1b52      	subs	r2, r2, r5
 8004e74:	d41f      	bmi.n	8004eb6 <_malloc_r+0xd6>
 8004e76:	2a0b      	cmp	r2, #11
 8004e78:	d917      	bls.n	8004eaa <_malloc_r+0xca>
 8004e7a:	1961      	adds	r1, r4, r5
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	6025      	str	r5, [r4, #0]
 8004e80:	bf18      	it	ne
 8004e82:	6059      	strne	r1, [r3, #4]
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	bf08      	it	eq
 8004e88:	f8c8 1000 	streq.w	r1, [r8]
 8004e8c:	5162      	str	r2, [r4, r5]
 8004e8e:	604b      	str	r3, [r1, #4]
 8004e90:	4638      	mov	r0, r7
 8004e92:	f104 060b 	add.w	r6, r4, #11
 8004e96:	f000 f8d7 	bl	8005048 <__malloc_unlock>
 8004e9a:	f026 0607 	bic.w	r6, r6, #7
 8004e9e:	1d23      	adds	r3, r4, #4
 8004ea0:	1af2      	subs	r2, r6, r3
 8004ea2:	d0ae      	beq.n	8004e02 <_malloc_r+0x22>
 8004ea4:	1b9b      	subs	r3, r3, r6
 8004ea6:	50a3      	str	r3, [r4, r2]
 8004ea8:	e7ab      	b.n	8004e02 <_malloc_r+0x22>
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	d1dd      	bne.n	8004e6c <_malloc_r+0x8c>
 8004eb0:	f8c8 2000 	str.w	r2, [r8]
 8004eb4:	e7ec      	b.n	8004e90 <_malloc_r+0xb0>
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	6864      	ldr	r4, [r4, #4]
 8004eba:	e7ac      	b.n	8004e16 <_malloc_r+0x36>
 8004ebc:	4634      	mov	r4, r6
 8004ebe:	6876      	ldr	r6, [r6, #4]
 8004ec0:	e7b4      	b.n	8004e2c <_malloc_r+0x4c>
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	e7cc      	b.n	8004e60 <_malloc_r+0x80>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f000 f8bc 	bl	8005048 <__malloc_unlock>
 8004ed0:	e797      	b.n	8004e02 <_malloc_r+0x22>
 8004ed2:	6025      	str	r5, [r4, #0]
 8004ed4:	e7dc      	b.n	8004e90 <_malloc_r+0xb0>
 8004ed6:	605b      	str	r3, [r3, #4]
 8004ed8:	deff      	udf	#255	; 0xff
 8004eda:	bf00      	nop
 8004edc:	20000534 	.word	0x20000534

08004ee0 <__sflush_r>:
 8004ee0:	898a      	ldrh	r2, [r1, #12]
 8004ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	0710      	lsls	r0, r2, #28
 8004eea:	460c      	mov	r4, r1
 8004eec:	d458      	bmi.n	8004fa0 <__sflush_r+0xc0>
 8004eee:	684b      	ldr	r3, [r1, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc05      	bgt.n	8004f00 <__sflush_r+0x20>
 8004ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dc02      	bgt.n	8004f00 <__sflush_r+0x20>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	d0f9      	beq.n	8004efa <__sflush_r+0x1a>
 8004f06:	2300      	movs	r3, #0
 8004f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f0c:	682f      	ldr	r7, [r5, #0]
 8004f0e:	6a21      	ldr	r1, [r4, #32]
 8004f10:	602b      	str	r3, [r5, #0]
 8004f12:	d032      	beq.n	8004f7a <__sflush_r+0x9a>
 8004f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	075a      	lsls	r2, r3, #29
 8004f1a:	d505      	bpl.n	8004f28 <__sflush_r+0x48>
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	1ac0      	subs	r0, r0, r3
 8004f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f22:	b10b      	cbz	r3, 8004f28 <__sflush_r+0x48>
 8004f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f26:	1ac0      	subs	r0, r0, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f2e:	6a21      	ldr	r1, [r4, #32]
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b0      	blx	r6
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	d106      	bne.n	8004f48 <__sflush_r+0x68>
 8004f3a:	6829      	ldr	r1, [r5, #0]
 8004f3c:	291d      	cmp	r1, #29
 8004f3e:	d82b      	bhi.n	8004f98 <__sflush_r+0xb8>
 8004f40:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <__sflush_r+0x108>)
 8004f42:	410a      	asrs	r2, r1
 8004f44:	07d6      	lsls	r6, r2, #31
 8004f46:	d427      	bmi.n	8004f98 <__sflush_r+0xb8>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	6062      	str	r2, [r4, #4]
 8004f4c:	04d9      	lsls	r1, r3, #19
 8004f4e:	6922      	ldr	r2, [r4, #16]
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	d504      	bpl.n	8004f5e <__sflush_r+0x7e>
 8004f54:	1c42      	adds	r2, r0, #1
 8004f56:	d101      	bne.n	8004f5c <__sflush_r+0x7c>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b903      	cbnz	r3, 8004f5e <__sflush_r+0x7e>
 8004f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8004f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f60:	602f      	str	r7, [r5, #0]
 8004f62:	2900      	cmp	r1, #0
 8004f64:	d0c9      	beq.n	8004efa <__sflush_r+0x1a>
 8004f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f6a:	4299      	cmp	r1, r3
 8004f6c:	d002      	beq.n	8004f74 <__sflush_r+0x94>
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 fa22 	bl	80053b8 <_free_r>
 8004f74:	2000      	movs	r0, #0
 8004f76:	6360      	str	r0, [r4, #52]	; 0x34
 8004f78:	e7c0      	b.n	8004efc <__sflush_r+0x1c>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b0      	blx	r6
 8004f80:	1c41      	adds	r1, r0, #1
 8004f82:	d1c8      	bne.n	8004f16 <__sflush_r+0x36>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0c5      	beq.n	8004f16 <__sflush_r+0x36>
 8004f8a:	2b1d      	cmp	r3, #29
 8004f8c:	d001      	beq.n	8004f92 <__sflush_r+0xb2>
 8004f8e:	2b16      	cmp	r3, #22
 8004f90:	d101      	bne.n	8004f96 <__sflush_r+0xb6>
 8004f92:	602f      	str	r7, [r5, #0]
 8004f94:	e7b1      	b.n	8004efa <__sflush_r+0x1a>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	e7ad      	b.n	8004efc <__sflush_r+0x1c>
 8004fa0:	690f      	ldr	r7, [r1, #16]
 8004fa2:	2f00      	cmp	r7, #0
 8004fa4:	d0a9      	beq.n	8004efa <__sflush_r+0x1a>
 8004fa6:	0793      	lsls	r3, r2, #30
 8004fa8:	680e      	ldr	r6, [r1, #0]
 8004faa:	bf08      	it	eq
 8004fac:	694b      	ldreq	r3, [r1, #20]
 8004fae:	600f      	str	r7, [r1, #0]
 8004fb0:	bf18      	it	ne
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	eba6 0807 	sub.w	r8, r6, r7
 8004fb8:	608b      	str	r3, [r1, #8]
 8004fba:	f1b8 0f00 	cmp.w	r8, #0
 8004fbe:	dd9c      	ble.n	8004efa <__sflush_r+0x1a>
 8004fc0:	6a21      	ldr	r1, [r4, #32]
 8004fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b0      	blx	r6
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	dc06      	bgt.n	8004fde <__sflush_r+0xfe>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd6:	81a3      	strh	r3, [r4, #12]
 8004fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fdc:	e78e      	b.n	8004efc <__sflush_r+0x1c>
 8004fde:	4407      	add	r7, r0
 8004fe0:	eba8 0800 	sub.w	r8, r8, r0
 8004fe4:	e7e9      	b.n	8004fba <__sflush_r+0xda>
 8004fe6:	bf00      	nop
 8004fe8:	dfbffffe 	.word	0xdfbffffe

08004fec <_fflush_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	690b      	ldr	r3, [r1, #16]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	b913      	cbnz	r3, 8004ffc <_fflush_r+0x10>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	b118      	cbz	r0, 8005006 <_fflush_r+0x1a>
 8004ffe:	6a03      	ldr	r3, [r0, #32]
 8005000:	b90b      	cbnz	r3, 8005006 <_fflush_r+0x1a>
 8005002:	f7ff fe05 	bl	8004c10 <__sinit>
 8005006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f3      	beq.n	8004ff6 <_fflush_r+0xa>
 800500e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005010:	07d0      	lsls	r0, r2, #31
 8005012:	d404      	bmi.n	800501e <_fflush_r+0x32>
 8005014:	0599      	lsls	r1, r3, #22
 8005016:	d402      	bmi.n	800501e <_fflush_r+0x32>
 8005018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501a:	f7ff febe 	bl	8004d9a <__retarget_lock_acquire_recursive>
 800501e:	4628      	mov	r0, r5
 8005020:	4621      	mov	r1, r4
 8005022:	f7ff ff5d 	bl	8004ee0 <__sflush_r>
 8005026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005028:	07da      	lsls	r2, r3, #31
 800502a:	4605      	mov	r5, r0
 800502c:	d4e4      	bmi.n	8004ff8 <_fflush_r+0xc>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	059b      	lsls	r3, r3, #22
 8005032:	d4e1      	bmi.n	8004ff8 <_fflush_r+0xc>
 8005034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005036:	f7ff feb1 	bl	8004d9c <__retarget_lock_release_recursive>
 800503a:	e7dd      	b.n	8004ff8 <_fflush_r+0xc>

0800503c <__malloc_lock>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__malloc_lock+0x8>)
 800503e:	f7ff beac 	b.w	8004d9a <__retarget_lock_acquire_recursive>
 8005042:	bf00      	nop
 8005044:	20000530 	.word	0x20000530

08005048 <__malloc_unlock>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__malloc_unlock+0x8>)
 800504a:	f7ff bea7 	b.w	8004d9c <__retarget_lock_release_recursive>
 800504e:	bf00      	nop
 8005050:	20000530 	.word	0x20000530

08005054 <__sread>:
 8005054:	b510      	push	{r4, lr}
 8005056:	460c      	mov	r4, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	f000 f978 	bl	8005350 <_read_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	bfab      	itete	ge
 8005064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005066:	89a3      	ldrhlt	r3, [r4, #12]
 8005068:	181b      	addge	r3, r3, r0
 800506a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800506e:	bfac      	ite	ge
 8005070:	6563      	strge	r3, [r4, #84]	; 0x54
 8005072:	81a3      	strhlt	r3, [r4, #12]
 8005074:	bd10      	pop	{r4, pc}

08005076 <__swrite>:
 8005076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507a:	461f      	mov	r7, r3
 800507c:	898b      	ldrh	r3, [r1, #12]
 800507e:	05db      	lsls	r3, r3, #23
 8005080:	4605      	mov	r5, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4616      	mov	r6, r2
 8005086:	d505      	bpl.n	8005094 <__swrite+0x1e>
 8005088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508c:	2302      	movs	r3, #2
 800508e:	2200      	movs	r2, #0
 8005090:	f000 f94c 	bl	800532c <_lseek_r>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	4632      	mov	r2, r6
 80050a2:	463b      	mov	r3, r7
 80050a4:	4628      	mov	r0, r5
 80050a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	f000 b973 	b.w	8005394 <_write_r>

080050ae <__sseek>:
 80050ae:	b510      	push	{r4, lr}
 80050b0:	460c      	mov	r4, r1
 80050b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b6:	f000 f939 	bl	800532c <_lseek_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	bf15      	itete	ne
 80050c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ca:	81a3      	strheq	r3, [r4, #12]
 80050cc:	bf18      	it	ne
 80050ce:	81a3      	strhne	r3, [r4, #12]
 80050d0:	bd10      	pop	{r4, pc}

080050d2 <__sclose>:
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f000 b8f7 	b.w	80052c8 <_close_r>

080050da <__swbuf_r>:
 80050da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050dc:	460e      	mov	r6, r1
 80050de:	4614      	mov	r4, r2
 80050e0:	4605      	mov	r5, r0
 80050e2:	b118      	cbz	r0, 80050ec <__swbuf_r+0x12>
 80050e4:	6a03      	ldr	r3, [r0, #32]
 80050e6:	b90b      	cbnz	r3, 80050ec <__swbuf_r+0x12>
 80050e8:	f7ff fd92 	bl	8004c10 <__sinit>
 80050ec:	69a3      	ldr	r3, [r4, #24]
 80050ee:	60a3      	str	r3, [r4, #8]
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	071a      	lsls	r2, r3, #28
 80050f4:	d525      	bpl.n	8005142 <__swbuf_r+0x68>
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	b31b      	cbz	r3, 8005142 <__swbuf_r+0x68>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	1a98      	subs	r0, r3, r2
 8005100:	6963      	ldr	r3, [r4, #20]
 8005102:	b2f6      	uxtb	r6, r6
 8005104:	4283      	cmp	r3, r0
 8005106:	4637      	mov	r7, r6
 8005108:	dc04      	bgt.n	8005114 <__swbuf_r+0x3a>
 800510a:	4621      	mov	r1, r4
 800510c:	4628      	mov	r0, r5
 800510e:	f7ff ff6d 	bl	8004fec <_fflush_r>
 8005112:	b9e0      	cbnz	r0, 800514e <__swbuf_r+0x74>
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	701e      	strb	r6, [r3, #0]
 8005122:	6962      	ldr	r2, [r4, #20]
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	429a      	cmp	r2, r3
 8005128:	d004      	beq.n	8005134 <__swbuf_r+0x5a>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	07db      	lsls	r3, r3, #31
 800512e:	d506      	bpl.n	800513e <__swbuf_r+0x64>
 8005130:	2e0a      	cmp	r6, #10
 8005132:	d104      	bne.n	800513e <__swbuf_r+0x64>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f7ff ff58 	bl	8004fec <_fflush_r>
 800513c:	b938      	cbnz	r0, 800514e <__swbuf_r+0x74>
 800513e:	4638      	mov	r0, r7
 8005140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 f805 	bl	8005154 <__swsetup_r>
 800514a:	2800      	cmp	r0, #0
 800514c:	d0d5      	beq.n	80050fa <__swbuf_r+0x20>
 800514e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005152:	e7f4      	b.n	800513e <__swbuf_r+0x64>

08005154 <__swsetup_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <__swsetup_r+0xac>)
 8005158:	4605      	mov	r5, r0
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	460c      	mov	r4, r1
 800515e:	b118      	cbz	r0, 8005168 <__swsetup_r+0x14>
 8005160:	6a03      	ldr	r3, [r0, #32]
 8005162:	b90b      	cbnz	r3, 8005168 <__swsetup_r+0x14>
 8005164:	f7ff fd54 	bl	8004c10 <__sinit>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800516e:	0718      	lsls	r0, r3, #28
 8005170:	d422      	bmi.n	80051b8 <__swsetup_r+0x64>
 8005172:	06d9      	lsls	r1, r3, #27
 8005174:	d407      	bmi.n	8005186 <__swsetup_r+0x32>
 8005176:	2309      	movs	r3, #9
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005184:	e034      	b.n	80051f0 <__swsetup_r+0x9c>
 8005186:	0758      	lsls	r0, r3, #29
 8005188:	d512      	bpl.n	80051b0 <__swsetup_r+0x5c>
 800518a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800518c:	b141      	cbz	r1, 80051a0 <__swsetup_r+0x4c>
 800518e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005192:	4299      	cmp	r1, r3
 8005194:	d002      	beq.n	800519c <__swsetup_r+0x48>
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f90e 	bl	80053b8 <_free_r>
 800519c:	2300      	movs	r3, #0
 800519e:	6363      	str	r3, [r4, #52]	; 0x34
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	2300      	movs	r3, #0
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	b94b      	cbnz	r3, 80051d0 <__swsetup_r+0x7c>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c6:	d003      	beq.n	80051d0 <__swsetup_r+0x7c>
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f840 	bl	8005250 <__smakebuf_r>
 80051d0:	89a0      	ldrh	r0, [r4, #12]
 80051d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d6:	f010 0301 	ands.w	r3, r0, #1
 80051da:	d00a      	beq.n	80051f2 <__swsetup_r+0x9e>
 80051dc:	2300      	movs	r3, #0
 80051de:	60a3      	str	r3, [r4, #8]
 80051e0:	6963      	ldr	r3, [r4, #20]
 80051e2:	425b      	negs	r3, r3
 80051e4:	61a3      	str	r3, [r4, #24]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	b943      	cbnz	r3, 80051fc <__swsetup_r+0xa8>
 80051ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051ee:	d1c4      	bne.n	800517a <__swsetup_r+0x26>
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	0781      	lsls	r1, r0, #30
 80051f4:	bf58      	it	pl
 80051f6:	6963      	ldrpl	r3, [r4, #20]
 80051f8:	60a3      	str	r3, [r4, #8]
 80051fa:	e7f4      	b.n	80051e6 <__swsetup_r+0x92>
 80051fc:	2000      	movs	r0, #0
 80051fe:	e7f7      	b.n	80051f0 <__swsetup_r+0x9c>
 8005200:	20000064 	.word	0x20000064

08005204 <__swhatbuf_r>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	460c      	mov	r4, r1
 8005208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520c:	2900      	cmp	r1, #0
 800520e:	b096      	sub	sp, #88	; 0x58
 8005210:	4615      	mov	r5, r2
 8005212:	461e      	mov	r6, r3
 8005214:	da0d      	bge.n	8005232 <__swhatbuf_r+0x2e>
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f013 0f80 	tst.w	r3, #128	; 0x80
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	bf0c      	ite	eq
 8005222:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005226:	2340      	movne	r3, #64	; 0x40
 8005228:	2000      	movs	r0, #0
 800522a:	6031      	str	r1, [r6, #0]
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	b016      	add	sp, #88	; 0x58
 8005230:	bd70      	pop	{r4, r5, r6, pc}
 8005232:	466a      	mov	r2, sp
 8005234:	f000 f858 	bl	80052e8 <_fstat_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	dbec      	blt.n	8005216 <__swhatbuf_r+0x12>
 800523c:	9901      	ldr	r1, [sp, #4]
 800523e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005242:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005246:	4259      	negs	r1, r3
 8005248:	4159      	adcs	r1, r3
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	e7eb      	b.n	8005228 <__swhatbuf_r+0x24>

08005250 <__smakebuf_r>:
 8005250:	898b      	ldrh	r3, [r1, #12]
 8005252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005254:	079d      	lsls	r5, r3, #30
 8005256:	4606      	mov	r6, r0
 8005258:	460c      	mov	r4, r1
 800525a:	d507      	bpl.n	800526c <__smakebuf_r+0x1c>
 800525c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	2301      	movs	r3, #1
 8005266:	6163      	str	r3, [r4, #20]
 8005268:	b002      	add	sp, #8
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	ab01      	add	r3, sp, #4
 800526e:	466a      	mov	r2, sp
 8005270:	f7ff ffc8 	bl	8005204 <__swhatbuf_r>
 8005274:	9900      	ldr	r1, [sp, #0]
 8005276:	4605      	mov	r5, r0
 8005278:	4630      	mov	r0, r6
 800527a:	f7ff fdb1 	bl	8004de0 <_malloc_r>
 800527e:	b948      	cbnz	r0, 8005294 <__smakebuf_r+0x44>
 8005280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005284:	059a      	lsls	r2, r3, #22
 8005286:	d4ef      	bmi.n	8005268 <__smakebuf_r+0x18>
 8005288:	f023 0303 	bic.w	r3, r3, #3
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	81a3      	strh	r3, [r4, #12]
 8005292:	e7e3      	b.n	800525c <__smakebuf_r+0xc>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	6020      	str	r0, [r4, #0]
 8005298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	9b00      	ldr	r3, [sp, #0]
 80052a0:	6163      	str	r3, [r4, #20]
 80052a2:	9b01      	ldr	r3, [sp, #4]
 80052a4:	6120      	str	r0, [r4, #16]
 80052a6:	b15b      	cbz	r3, 80052c0 <__smakebuf_r+0x70>
 80052a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f82d 	bl	800530c <_isatty_r>
 80052b2:	b128      	cbz	r0, 80052c0 <__smakebuf_r+0x70>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	431d      	orrs	r5, r3
 80052c4:	81a5      	strh	r5, [r4, #12]
 80052c6:	e7cf      	b.n	8005268 <__smakebuf_r+0x18>

080052c8 <_close_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d06      	ldr	r5, [pc, #24]	; (80052e4 <_close_r+0x1c>)
 80052cc:	2300      	movs	r3, #0
 80052ce:	4604      	mov	r4, r0
 80052d0:	4608      	mov	r0, r1
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	f7fb fbef 	bl	8000ab6 <_close>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d102      	bne.n	80052e2 <_close_r+0x1a>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	b103      	cbz	r3, 80052e2 <_close_r+0x1a>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	2000053c 	.word	0x2000053c

080052e8 <_fstat_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	; (8005308 <_fstat_r+0x20>)
 80052ec:	2300      	movs	r3, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	f7fb fbea 	bl	8000ace <_fstat>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	d102      	bne.n	8005304 <_fstat_r+0x1c>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	b103      	cbz	r3, 8005304 <_fstat_r+0x1c>
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	bf00      	nop
 8005308:	2000053c 	.word	0x2000053c

0800530c <_isatty_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d06      	ldr	r5, [pc, #24]	; (8005328 <_isatty_r+0x1c>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	f7fb fbe9 	bl	8000aee <_isatty>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_isatty_r+0x1a>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_isatty_r+0x1a>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	2000053c 	.word	0x2000053c

0800532c <_lseek_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	; (800534c <_lseek_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fb fbe2 	bl	8000b04 <_lseek>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_lseek_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_lseek_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	2000053c 	.word	0x2000053c

08005350 <_read_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d07      	ldr	r5, [pc, #28]	; (8005370 <_read_r+0x20>)
 8005354:	4604      	mov	r4, r0
 8005356:	4608      	mov	r0, r1
 8005358:	4611      	mov	r1, r2
 800535a:	2200      	movs	r2, #0
 800535c:	602a      	str	r2, [r5, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7fb fb70 	bl	8000a44 <_read>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_read_r+0x1e>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_read_r+0x1e>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	2000053c 	.word	0x2000053c

08005374 <_sbrk_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d06      	ldr	r5, [pc, #24]	; (8005390 <_sbrk_r+0x1c>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fb fbce 	bl	8000b20 <_sbrk>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_sbrk_r+0x1a>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_sbrk_r+0x1a>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	2000053c 	.word	0x2000053c

08005394 <_write_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d07      	ldr	r5, [pc, #28]	; (80053b4 <_write_r+0x20>)
 8005398:	4604      	mov	r4, r0
 800539a:	4608      	mov	r0, r1
 800539c:	4611      	mov	r1, r2
 800539e:	2200      	movs	r2, #0
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fb fb6b 	bl	8000a7e <_write>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_write_r+0x1e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_write_r+0x1e>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	2000053c 	.word	0x2000053c

080053b8 <_free_r>:
 80053b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d044      	beq.n	8005448 <_free_r+0x90>
 80053be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c2:	9001      	str	r0, [sp, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ca:	bfb8      	it	lt
 80053cc:	18e4      	addlt	r4, r4, r3
 80053ce:	f7ff fe35 	bl	800503c <__malloc_lock>
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <_free_r+0x94>)
 80053d4:	9801      	ldr	r0, [sp, #4]
 80053d6:	6813      	ldr	r3, [r2, #0]
 80053d8:	b933      	cbnz	r3, 80053e8 <_free_r+0x30>
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	6014      	str	r4, [r2, #0]
 80053de:	b003      	add	sp, #12
 80053e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053e4:	f7ff be30 	b.w	8005048 <__malloc_unlock>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d908      	bls.n	80053fe <_free_r+0x46>
 80053ec:	6825      	ldr	r5, [r4, #0]
 80053ee:	1961      	adds	r1, r4, r5
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf01      	itttt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	1949      	addeq	r1, r1, r5
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	e7ed      	b.n	80053da <_free_r+0x22>
 80053fe:	461a      	mov	r2, r3
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b10b      	cbz	r3, 8005408 <_free_r+0x50>
 8005404:	42a3      	cmp	r3, r4
 8005406:	d9fa      	bls.n	80053fe <_free_r+0x46>
 8005408:	6811      	ldr	r1, [r2, #0]
 800540a:	1855      	adds	r5, r2, r1
 800540c:	42a5      	cmp	r5, r4
 800540e:	d10b      	bne.n	8005428 <_free_r+0x70>
 8005410:	6824      	ldr	r4, [r4, #0]
 8005412:	4421      	add	r1, r4
 8005414:	1854      	adds	r4, r2, r1
 8005416:	42a3      	cmp	r3, r4
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	d1e0      	bne.n	80053de <_free_r+0x26>
 800541c:	681c      	ldr	r4, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	6053      	str	r3, [r2, #4]
 8005422:	440c      	add	r4, r1
 8005424:	6014      	str	r4, [r2, #0]
 8005426:	e7da      	b.n	80053de <_free_r+0x26>
 8005428:	d902      	bls.n	8005430 <_free_r+0x78>
 800542a:	230c      	movs	r3, #12
 800542c:	6003      	str	r3, [r0, #0]
 800542e:	e7d6      	b.n	80053de <_free_r+0x26>
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	1961      	adds	r1, r4, r5
 8005434:	428b      	cmp	r3, r1
 8005436:	bf04      	itt	eq
 8005438:	6819      	ldreq	r1, [r3, #0]
 800543a:	685b      	ldreq	r3, [r3, #4]
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	bf04      	itt	eq
 8005440:	1949      	addeq	r1, r1, r5
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	6054      	str	r4, [r2, #4]
 8005446:	e7ca      	b.n	80053de <_free_r+0x26>
 8005448:	b003      	add	sp, #12
 800544a:	bd30      	pop	{r4, r5, pc}
 800544c:	20000534 	.word	0x20000534

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
