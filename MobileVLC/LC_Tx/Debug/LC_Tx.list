
LC_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ac  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ec  080043ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080043ec  080043ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043ec  080043ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004400  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004400  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126f1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e1  00000000  00000000  00032768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d09  00000000  00000000  00035fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161d2  00000000  00000000  00036cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013235  00000000  00000000  0004cec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffa5  00000000  00000000  000600f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c80  00000000  00000000  000f00a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000f3d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800434c 	.word	0x0800434c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800434c 	.word	0x0800434c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_TIM_PeriodElapsedCallback>:
	data[2]=value_adc>>8;
	data[3]=value_adc>>0;

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d113      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80003fe:	2301      	movs	r3, #1
 8000400:	425a      	negs	r2, r3
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f000 ff38 	bl	800127c <HAL_ADC_PollForConversion>
		value_adc = HAL_ADC_GetValue(&hadc1);
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800040e:	0018      	movs	r0, r3
 8000410:	f000 ffc8 	bl	80013a4 <HAL_ADC_GetValue>
 8000414:	0002      	movs	r2, r0
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000418:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)&value_adc,sizeof(uint32_t),10);
 800041a:	4907      	ldr	r1, [pc, #28]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800041e:	230a      	movs	r3, #10
 8000420:	2204      	movs	r2, #4
 8000422:	f003 fa7d 	bl	8003920 <HAL_UART_Transmit>
	}
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40000400 	.word	0x40000400
 8000434:	20000028 	.word	0x20000028
 8000438:	200001c8 	.word	0x200001c8
 800043c:	200000d8 	.word	0x200000d8

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fb46 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f81c 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f99e 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 8000450:	f000 f97e 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 8000454:	f000 f870 	bl	8000538 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000458:	f000 f92c 	bl	80006b4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800045c:	f000 f8d4 	bl	8000608 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <main+0x3c>)
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fae6 	bl	8001a34 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <main+0x3c>)
 800046a:	0018      	movs	r0, r3
 800046c:	f000 feb8 	bl	80011e0 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <main+0x40>)
 8000472:	0018      	movs	r0, r3
 8000474:	f002 fe06 	bl	8003084 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000478:	e7fe      	b.n	8000478 <main+0x38>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000028 	.word	0x20000028
 8000480:	2000008c 	.word	0x2000008c

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b093      	sub	sp, #76	; 0x4c
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2334      	movs	r3, #52	; 0x34
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 ff2d 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	0018      	movs	r0, r3
 800049e:	2310      	movs	r3, #16
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f003 ff26 	bl	80042f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 ff65 	bl	800237c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2202      	movs	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c0:	0021      	movs	r1, r4
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2240      	movs	r2, #64	; 0x40
 80004cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2202      	movs	r2, #2
 80004d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2202      	movs	r2, #2
 80004d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2208      	movs	r2, #8
 80004e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0292      	lsls	r2, r2, #10
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0592      	lsls	r2, r2, #22
 80004f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 ff8b 	bl	8002414 <HAL_RCC_OscConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000502:	f000 f965 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2207      	movs	r2, #7
 800050a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2202      	movs	r2, #2
 8000510:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2102      	movs	r1, #2
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fa86 	bl	8002a34 <HAL_RCC_ClockConfig>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800052c:	f000 f950 	bl	80007d0 <Error_Handler>
  }
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b013      	add	sp, #76	; 0x4c
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	0018      	movs	r0, r3
 8000542:	230c      	movs	r3, #12
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 fed4 	bl	80042f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_ADC1_Init+0xc4>)
 800054e:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <MX_ADC1_Init+0xc8>)
 8000550:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	05d2      	lsls	r2, r2, #23
 8000558:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_ADC1_Init+0xc4>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <MX_ADC1_Init+0xc4>)
 800056e:	2204      	movs	r2, #4
 8000570:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <MX_ADC1_Init+0xc4>)
 800057a:	2200      	movs	r2, #0
 800057c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000580:	2201      	movs	r2, #1
 8000582:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000586:	2201      	movs	r2, #1
 8000588:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_ADC1_Init+0xc4>)
 800058c:	2200      	movs	r2, #0
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000592:	2200      	movs	r2, #0
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_ADC1_Init+0xc4>)
 8000598:	222c      	movs	r2, #44	; 0x2c
 800059a:	2100      	movs	r1, #0
 800059c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005b2:	223c      	movs	r2, #60	; 0x3c
 80005b4:	2100      	movs	r1, #0
 80005b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fc65 	bl	8000e90 <HAL_ADC_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80005ca:	f000 f901 	bl	80007d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <MX_ADC1_Init+0xcc>)
 80005d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	1d3a      	adds	r2, r7, #4
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_ADC1_Init+0xc4>)
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fee8 	bl	80013bc <HAL_ADC_ConfigChannel>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80005f0:	f000 f8ee 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b004      	add	sp, #16
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000028 	.word	0x20000028
 8000600:	40012400 	.word	0x40012400
 8000604:	04000002 	.word	0x04000002

08000608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	2310      	movs	r3, #16
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	0018      	movs	r0, r3
 8000614:	2310      	movs	r3, #16
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f003 fe6b 	bl	80042f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	230c      	movs	r3, #12
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f003 fe64 	bl	80042f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_TIM3_Init+0xa0>)
 800062e:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_TIM3_Init+0xa0>)
 8000634:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_TIM3_Init+0xa8>)
 8000636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_TIM3_Init+0xa0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_TIM3_Init+0xa0>)
 8000640:	223b      	movs	r2, #59	; 0x3b
 8000642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_TIM3_Init+0xa0>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_TIM3_Init+0xa0>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_TIM3_Init+0xa0>)
 8000652:	0018      	movs	r0, r3
 8000654:	f002 fcbe 	bl	8002fd4 <HAL_TIM_Base_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800065c:	f000 f8b8 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	2110      	movs	r1, #16
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	0152      	lsls	r2, r2, #5
 8000668:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800066a:	187a      	adds	r2, r7, r1
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_TIM3_Init+0xa0>)
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f002 fe87 	bl	8003384 <HAL_TIM_ConfigClockSource>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800067a:	f000 f8a9 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_TIM3_Init+0xa0>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f003 f875 	bl	8003780 <HAL_TIMEx_MasterConfigSynchronization>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800069a:	f000 f899 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b008      	add	sp, #32
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	40000400 	.word	0x40000400
 80006b0:	000018ff 	.word	0x000018ff

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006ba:	4a24      	ldr	r2, [pc, #144]	; (800074c <MX_USART1_UART_Init+0x98>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	0252      	lsls	r2, r2, #9
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_USART1_UART_Init+0x94>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f003 f8b8 	bl	8003874 <HAL_UART_Init>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f862 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART1_UART_Init+0x94>)
 800070e:	2100      	movs	r1, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f003 fd0f 	bl	8004134 <HAL_UARTEx_SetTxFifoThreshold>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800071a:	f000 f859 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_USART1_UART_Init+0x94>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fd46 	bl	80041b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800072c:	f000 f850 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_USART1_UART_Init+0x94>)
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fcc4 	bl	80040c0 <HAL_UARTEx_DisableFifoMode>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800073c:	f000 f848 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200000d8 	.word	0x200000d8
 800074c:	40013800 	.word	0x40013800

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_DMA_Init+0x38>)
 8000758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_DMA_Init+0x38>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_DMA_Init+0x38>)
 8000764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2009      	movs	r0, #9
 8000774:	f001 fae0 	bl	8001d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000778:	2009      	movs	r0, #9
 800077a:	f001 faf2 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40021000 	.word	0x40021000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_GPIO_Init+0x40>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_GPIO_Init+0x40>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_GPIO_Init+0x40>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_GPIO_Init+0x40>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_GPIO_Init+0x40>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_GPIO_Init+0x40>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0549      	lsls	r1, r1, #21
 8000804:	430a      	orrs	r2, r1
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_MspInit+0x44>)
 800080a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	055b      	lsls	r3, r3, #21
 8000810:	4013      	ands	r3, r2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b08b      	sub	sp, #44	; 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	2414      	movs	r4, #20
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f003 fd5c 	bl	80042f4 <memset>
  if(hadc->Instance==ADC1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0x80>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d129      	bne.n	800089a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0349      	lsls	r1, r1, #13
 8000850:	430a      	orrs	r2, r1
 8000852:	641a      	str	r2, [r3, #64]	; 0x40
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	035b      	lsls	r3, r3, #13
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_ADC_MspInit+0x84>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2203      	movs	r2, #3
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fc0d 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b00b      	add	sp, #44	; 0x2c
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40012400 	.word	0x40012400
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_TIM_Base_MspInit+0x44>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d113      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	2102      	movs	r1, #2
 80008c6:	430a      	orrs	r2, r1
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ce:	2202      	movs	r2, #2
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2010      	movs	r0, #16
 80008dc:	f001 fa2c 	bl	8001d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e0:	2010      	movs	r0, #16
 80008e2:	f001 fa3e 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40000400 	.word	0x40000400
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b091      	sub	sp, #68	; 0x44
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	232c      	movs	r3, #44	; 0x2c
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 fcf2 	bl	80042f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	2414      	movs	r4, #20
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2318      	movs	r3, #24
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f003 fcea 	bl	80042f4 <memset>
  if(huart->Instance==USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <HAL_UART_MspInit+0x108>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d166      	bne.n	80009f8 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	f002 fa25 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000942:	f7ff ff45 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	01c9      	lsls	r1, r1, #7
 8000950:	430a      	orrs	r2, r1
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 8000956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	01db      	lsls	r3, r3, #7
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 8000968:	2102      	movs	r1, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <HAL_UART_MspInit+0x10c>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800097a:	212c      	movs	r1, #44	; 0x2c
 800097c:	187b      	adds	r3, r7, r1
 800097e:	22c0      	movs	r2, #192	; 0xc0
 8000980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	187b      	adds	r3, r7, r1
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x110>)
 800099e:	0019      	movs	r1, r3
 80009a0:	0010      	movs	r0, r2
 80009a2:	f001 fb87 	bl	80020b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x118>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009ae:	2233      	movs	r2, #51	; 0x33
 80009b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009b4:	2210      	movs	r2, #16
 80009b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009d2:	2220      	movs	r2, #32
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 f9dc 	bl	8001d9c <HAL_DMA_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80009e8:	f7ff fef2 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_UART_MspInit+0x114>)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b011      	add	sp, #68	; 0x44
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	50000400 	.word	0x50000400
 8000a0c:	2000016c 	.word	0x2000016c
 8000a10:	40020008 	.word	0x40020008

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f8b6 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <DMA1_Channel1_IRQHandler+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fa30 	bl	8001eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	2000016c 	.word	0x2000016c

08000a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <TIM3_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fb5c 	bl	8003120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	2000008c 	.word	0x2000008c

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a84:	f7ff fff6 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aae:	f003 fc29 	bl	8004304 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ab2:	f7ff fcc5 	bl	8000440 <main>

08000ab6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	200001d0 	.word	0x200001d0

08000ad0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x3c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Init+0x3c>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0049      	lsls	r1, r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f810 	bl	8000b14 <HAL_InitTick>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fe6c 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_InitTick+0x88>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d02b      	beq.n	8000b84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_InitTick+0x8c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_InitTick+0x88>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff fae1 	bl	8000100 <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff fadc 	bl	8000100 <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 f919 	bl	8001d82 <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d112      	bne.n	8000b7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d80a      	bhi.n	8000b70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 f8e8 	bl	8001d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_InitTick+0x90>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e00d      	b.n	8000b8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e008      	b.n	8000b8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	e003      	b.n	8000b8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b005      	add	sp, #20
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	18d2      	adds	r2, r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200001cc 	.word	0x200001cc

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	200001cc 	.word	0x200001cc

08000be0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	fe3fffff 	.word	0xfe3fffff

08000c08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	23e0      	movs	r3, #224	; 0xe0
 8000c16:	045b      	lsls	r3, r3, #17
 8000c18:	4013      	ands	r3, r2
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	2104      	movs	r1, #4
 8000c36:	400a      	ands	r2, r1
 8000c38:	2107      	movs	r1, #7
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	000a      	movs	r2, r1
 8000c3e:	43d2      	mvns	r2, r2
 8000c40:	401a      	ands	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2104      	movs	r1, #4
 8000c46:	400b      	ands	r3, r1
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4099      	lsls	r1, r3
 8000c4c:	000b      	movs	r3, r1
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	400a      	ands	r2, r1
 8000c70:	2107      	movs	r1, #7
 8000c72:	4091      	lsls	r1, r2
 8000c74:	000a      	movs	r2, r1
 8000c76:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c7e:	40da      	lsrs	r2, r3
 8000c80:	0013      	movs	r3, r2
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}

08000cac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	211f      	movs	r1, #31
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	000a      	movs	r2, r1
 8000cc8:	43d2      	mvns	r2, r2
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0e9b      	lsrs	r3, r3, #26
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	4019      	ands	r1, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	201f      	movs	r0, #31
 8000cd8:	4003      	ands	r3, r0
 8000cda:	4099      	lsls	r1, r3
 8000cdc:	000b      	movs	r3, r1
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}

08000cec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	035b      	lsls	r3, r3, #13
 8000cfe:	0b5b      	lsrs	r3, r3, #13
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	0352      	lsls	r2, r2, #13
 8000d20:	0b52      	lsrs	r2, r2, #13
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	401a      	ands	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	0212      	lsls	r2, r2, #8
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	400b      	ands	r3, r1
 8000d54:	4904      	ldr	r1, [pc, #16]	; (8000d68 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d56:	400b      	ands	r3, r1
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	07ffff00 	.word	0x07ffff00

08000d6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <LL_ADC_EnableInternalRegulator+0x24>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	0552      	lsls	r2, r2, #21
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	6fffffe8 	.word	0x6fffffe8

08000d94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	055b      	lsls	r3, r3, #21
 8000da4:	401a      	ands	r2, r3
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	055b      	lsls	r3, r3, #21
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <LL_ADC_Enable+0x20>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2201      	movs	r2, #1
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	7fffffe8 	.word	0x7fffffe8

08000de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <LL_ADC_Disable+0x20>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	2202      	movs	r2, #2
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	7fffffe8 	.word	0x7fffffe8

08000e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <LL_ADC_IsEnabled+0x18>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_ADC_IsEnabled+0x1a>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d101      	bne.n	8000e3e <LL_ADC_IsDisableOngoing+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_ADC_IsDisableOngoing+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <LL_ADC_REG_StartConversion+0x20>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	2204      	movs	r2, #4
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	7fffffe8 	.word	0x7fffffe8

08000e6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d101      	bne.n	8000e84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e98:	231f      	movs	r3, #31
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e17f      	b.n	80011b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10a      	bne.n	8000ed4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fcaf 	bl	8000824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2254      	movs	r2, #84	; 0x54
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ff5b 	bl	8000d94 <LL_ADC_IsInternalRegulatorEnabled>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d115      	bne.n	8000f0e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff ff40 	bl	8000d6c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000eec:	4bb4      	ldr	r3, [pc, #720]	; (80011c0 <HAL_ADC_Init+0x330>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	49b4      	ldr	r1, [pc, #720]	; (80011c4 <HAL_ADC_Init+0x334>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f904 	bl	8000100 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	3301      	adds	r3, #1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff ff3e 	bl	8000d94 <LL_ADC_IsInternalRegulatorEnabled>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d10f      	bne.n	8000f3c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f20:	2210      	movs	r2, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f34:	231f      	movs	r3, #31
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff93 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 8000f46:	0003      	movs	r3, r0
 8000f48:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	2210      	movs	r2, #16
 8000f50:	4013      	ands	r3, r2
 8000f52:	d000      	beq.n	8000f56 <HAL_ADC_Init+0xc6>
 8000f54:	e122      	b.n	800119c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d000      	beq.n	8000f5e <HAL_ADC_Init+0xce>
 8000f5c:	e11e      	b.n	800119c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a99      	ldr	r2, [pc, #612]	; (80011c8 <HAL_ADC_Init+0x338>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	2202      	movs	r2, #2
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff ff46 	bl	8000e04 <LL_ADC_IsEnabled>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_ADC_Init+0xee>
 8000f7c:	e0ad      	b.n	80010da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7e1b      	ldrb	r3, [r3, #24]
 8000f86:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f88:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7e5b      	ldrb	r3, [r3, #25]
 8000f8e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f90:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e9b      	ldrb	r3, [r3, #26]
 8000f96:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f98:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_ADC_Init+0x118>
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	015b      	lsls	r3, r3, #5
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_Init+0x11a>
 8000fa8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000faa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fb0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da04      	bge.n	8000fc4 <HAL_ADC_Init+0x134>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	e001      	b.n	8000fc8 <HAL_ADC_Init+0x138>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fc8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	212c      	movs	r1, #44	; 0x2c
 8000fce:	5c5b      	ldrb	r3, [r3, r1]
 8000fd0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fd2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	5c9b      	ldrb	r3, [r3, r2]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d115      	bne.n	8001010 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7e9b      	ldrb	r3, [r3, #26]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d105      	bne.n	8000ff8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0252      	lsls	r2, r2, #9
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	e00b      	b.n	8001010 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001008:	2201      	movs	r2, #1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00a      	beq.n	800102e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101c:	23e0      	movs	r3, #224	; 0xe0
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001026:	4313      	orrs	r3, r2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <HAL_ADC_Init+0x33c>)
 8001036:	4013      	ands	r3, r2
 8001038:	0019      	movs	r1, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	0f9b      	lsrs	r3, r3, #30
 800104a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001050:	4313      	orrs	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	223c      	movs	r2, #60	; 0x3c
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d111      	bne.n	8001086 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	0f9b      	lsrs	r3, r3, #30
 8001068:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800106e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001074:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800107a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	4313      	orrs	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	4313      	orrs	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_ADC_Init+0x340>)
 800108e:	4013      	ands	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	430a      	orrs	r2, r1
 800109a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	23c0      	movs	r3, #192	; 0xc0
 80010a2:	061b      	lsls	r3, r3, #24
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d018      	beq.n	80010da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d012      	beq.n	80010da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	061b      	lsls	r3, r3, #24
 80010bc:	429a      	cmp	r2, r3
 80010be:	d00c      	beq.n	80010da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <HAL_ADC_Init+0x344>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a44      	ldr	r2, [pc, #272]	; (80011d8 <HAL_ADC_Init+0x348>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	23f0      	movs	r3, #240	; 0xf0
 80010d0:	039b      	lsls	r3, r3, #14
 80010d2:	401a      	ands	r2, r3
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_ADC_Init+0x344>)
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	001a      	movs	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f7ff fd9c 	bl	8000c22 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	493a      	ldr	r1, [pc, #232]	; (80011dc <HAL_ADC_Init+0x34c>)
 80010f4:	001a      	movs	r2, r3
 80010f6:	f7ff fd94 	bl	8000c22 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2110      	movs	r1, #16
 800110e:	4249      	negs	r1, r1
 8001110:	430a      	orrs	r2, r1
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
 8001114:	e018      	b.n	8001148 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	039b      	lsls	r3, r3, #14
 800111e:	429a      	cmp	r2, r3
 8001120:	d112      	bne.n	8001148 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	3b01      	subs	r3, #1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	221c      	movs	r2, #28
 8001132:	4013      	ands	r3, r2
 8001134:	2210      	movs	r2, #16
 8001136:	4252      	negs	r2, r2
 8001138:	409a      	lsls	r2, r3
 800113a:	0011      	movs	r1, r2
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fd84 	bl	8000c5c <LL_ADC_GetSamplingTimeCommonChannels>
 8001154:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800115a:	429a      	cmp	r2, r3
 800115c:	d10b      	bne.n	8001176 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	2203      	movs	r2, #3
 800116a:	4393      	bics	r3, r2
 800116c:	2201      	movs	r2, #1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001174:	e01c      	b.n	80011b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	2212      	movs	r2, #18
 800117c:	4393      	bics	r3, r2
 800117e:	2210      	movs	r2, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001192:	231f      	movs	r3, #31
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800119a:	e009      	b.n	80011b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	2210      	movs	r2, #16
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011a8:	231f      	movs	r3, #31
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80011b0:	231f      	movs	r3, #31
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b008      	add	sp, #32
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000000 	.word	0x20000000
 80011c4:	00030d40 	.word	0x00030d40
 80011c8:	fffffefd 	.word	0xfffffefd
 80011cc:	fffe0201 	.word	0xfffe0201
 80011d0:	1ffffc02 	.word	0x1ffffc02
 80011d4:	40012708 	.word	0x40012708
 80011d8:	ffc3ffff 	.word	0xffc3ffff
 80011dc:	07ffff04 	.word	0x07ffff04

080011e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff fe3d 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d135      	bne.n	8001262 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2254      	movs	r2, #84	; 0x54
 80011fa:	5c9b      	ldrb	r3, [r3, r2]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_Start+0x24>
 8001200:	2302      	movs	r3, #2
 8001202:	e035      	b.n	8001270 <HAL_ADC_Start+0x90>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2254      	movs	r2, #84	; 0x54
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800120c:	250f      	movs	r5, #15
 800120e:	197c      	adds	r4, r7, r5
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0018      	movs	r0, r3
 8001214:	f000 faaa 	bl	800176c <ADC_Enable>
 8001218:	0003      	movs	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800121c:	197b      	adds	r3, r7, r5
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d119      	bne.n	8001258 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a13      	ldr	r2, [pc, #76]	; (8001278 <HAL_ADC_Start+0x98>)
 800122a:	4013      	ands	r3, r2
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	0052      	lsls	r2, r2, #1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	221c      	movs	r2, #28
 8001242:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2254      	movs	r2, #84	; 0x54
 8001248:	2100      	movs	r1, #0
 800124a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fdf9 	bl	8000e48 <LL_ADC_REG_StartConversion>
 8001256:	e008      	b.n	800126a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2254      	movs	r2, #84	; 0x54
 800125c:	2100      	movs	r1, #0
 800125e:	5499      	strb	r1, [r3, r2]
 8001260:	e003      	b.n	800126a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800126a:	230f      	movs	r3, #15
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	fffff0fe 	.word	0xfffff0fe

0800127c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d102      	bne.n	8001294 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800128e:	2308      	movs	r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e00f      	b.n	80012b4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	2220      	movs	r2, #32
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e072      	b.n	8001396 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80012b0:	2304      	movs	r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80012b4:	f7ff fc8a 	bl	8000bcc <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012bc:	e01f      	b.n	80012fe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	d01c      	beq.n	80012fe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80012c4:	f7ff fc82 	bl	8000bcc <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d302      	bcc.n	80012da <HAL_ADC_PollForConversion+0x5e>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	d10b      	bne.n	80012fe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	2204      	movs	r2, #4
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2254      	movs	r2, #84	; 0x54
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e04b      	b.n	8001396 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	d0d9      	beq.n	80012be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fcb4 	bl	8000c8a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d02e      	beq.n	8001384 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7e9b      	ldrb	r3, [r3, #26]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d12a      	bne.n	8001384 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	4013      	ands	r3, r2
 8001338:	2b08      	cmp	r3, #8
 800133a:	d123      	bne.n	8001384 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fd93 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d110      	bne.n	800136c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	210c      	movs	r1, #12
 8001356:	438a      	bics	r2, r1
 8001358:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_ADC_PollForConversion+0x124>)
 8001360:	4013      	ands	r3, r2
 8001362:	2201      	movs	r2, #1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58
 800136a:	e00b      	b.n	8001384 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	2220      	movs	r2, #32
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137c:	2201      	movs	r2, #1
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7e1b      	ldrb	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	220c      	movs	r2, #12
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	fffffefe 	.word	0xfffffefe

080013a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c6:	2317      	movs	r3, #23
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2254      	movs	r2, #84	; 0x54
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x24>
 80013dc:	2302      	movs	r3, #2
 80013de:	e1c0      	b.n	8001762 <HAL_ADC_ConfigChannel+0x3a6>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2254      	movs	r2, #84	; 0x54
 80013e4:	2101      	movs	r1, #1
 80013e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff fd3d 	bl	8000e6c <LL_ADC_REG_IsConversionOngoing>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x3c>
 80013f6:	e1a3      	b.n	8001740 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d100      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x46>
 8001400:	e143      	b.n	800168a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	429a      	cmp	r2, r3
 800140c:	d004      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001412:	4ac1      	ldr	r2, [pc, #772]	; (8001718 <HAL_ADC_ConfigChannel+0x35c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d108      	bne.n	800142a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f7ff fc62 	bl	8000cec <LL_ADC_REG_SetSequencerChAdd>
 8001428:	e0c9      	b.n	80015be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	211f      	movs	r1, #31
 8001434:	400b      	ands	r3, r1
 8001436:	210f      	movs	r1, #15
 8001438:	4099      	lsls	r1, r3
 800143a:	000b      	movs	r3, r1
 800143c:	43db      	mvns	r3, r3
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	035b      	lsls	r3, r3, #13
 8001448:	0b5b      	lsrs	r3, r3, #13
 800144a:	d105      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x9c>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0e9b      	lsrs	r3, r3, #26
 8001452:	221f      	movs	r2, #31
 8001454:	4013      	ands	r3, r2
 8001456:	e098      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	d000      	beq.n	8001464 <HAL_ADC_ConfigChannel+0xa8>
 8001462:	e091      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1cc>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d000      	beq.n	8001470 <HAL_ADC_ConfigChannel+0xb4>
 800146e:	e089      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1c8>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2204      	movs	r2, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d000      	beq.n	800147c <HAL_ADC_ConfigChannel+0xc0>
 800147a:	e081      	b.n	8001580 <HAL_ADC_ConfigChannel+0x1c4>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2208      	movs	r2, #8
 8001482:	4013      	ands	r3, r2
 8001484:	d000      	beq.n	8001488 <HAL_ADC_ConfigChannel+0xcc>
 8001486:	e079      	b.n	800157c <HAL_ADC_ConfigChannel+0x1c0>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2210      	movs	r2, #16
 800148e:	4013      	ands	r3, r2
 8001490:	d000      	beq.n	8001494 <HAL_ADC_ConfigChannel+0xd8>
 8001492:	e071      	b.n	8001578 <HAL_ADC_ConfigChannel+0x1bc>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	4013      	ands	r3, r2
 800149c:	d000      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0xe4>
 800149e:	e069      	b.n	8001574 <HAL_ADC_ConfigChannel+0x1b8>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	4013      	ands	r3, r2
 80014a8:	d000      	beq.n	80014ac <HAL_ADC_ConfigChannel+0xf0>
 80014aa:	e061      	b.n	8001570 <HAL_ADC_ConfigChannel+0x1b4>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	4013      	ands	r3, r2
 80014b4:	d000      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0xfc>
 80014b6:	e059      	b.n	800156c <HAL_ADC_ConfigChannel+0x1b0>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4013      	ands	r3, r2
 80014c2:	d151      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1ac>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d149      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1a8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	d141      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x1a4>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d139      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1a0>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	4013      	ands	r3, r2
 80014f2:	d131      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x19c>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	019b      	lsls	r3, r3, #6
 80014fc:	4013      	ands	r3, r2
 80014fe:	d129      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x198>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	4013      	ands	r3, r2
 800150a:	d121      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x194>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4013      	ands	r3, r2
 8001516:	d119      	bne.n	800154c <HAL_ADC_ConfigChannel+0x190>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	025b      	lsls	r3, r3, #9
 8001520:	4013      	ands	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x18c>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	029b      	lsls	r3, r3, #10
 800152c:	4013      	ands	r3, r2
 800152e:	d109      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x188>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	02db      	lsls	r3, r3, #11
 8001538:	4013      	ands	r3, r2
 800153a:	d001      	beq.n	8001540 <HAL_ADC_ConfigChannel+0x184>
 800153c:	2312      	movs	r3, #18
 800153e:	e024      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001540:	2300      	movs	r3, #0
 8001542:	e022      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001544:	2311      	movs	r3, #17
 8001546:	e020      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001548:	2310      	movs	r3, #16
 800154a:	e01e      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 800154c:	230f      	movs	r3, #15
 800154e:	e01c      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001550:	230e      	movs	r3, #14
 8001552:	e01a      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001554:	230d      	movs	r3, #13
 8001556:	e018      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001558:	230c      	movs	r3, #12
 800155a:	e016      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 800155c:	230b      	movs	r3, #11
 800155e:	e014      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	230a      	movs	r3, #10
 8001562:	e012      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001564:	2309      	movs	r3, #9
 8001566:	e010      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001568:	2308      	movs	r3, #8
 800156a:	e00e      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 800156c:	2307      	movs	r3, #7
 800156e:	e00c      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001570:	2306      	movs	r3, #6
 8001572:	e00a      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001574:	2305      	movs	r3, #5
 8001576:	e008      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001578:	2304      	movs	r3, #4
 800157a:	e006      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 800157c:	2303      	movs	r3, #3
 800157e:	e004      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_ADC_ConfigChannel+0x1ce>
 8001588:	2300      	movs	r3, #0
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	6852      	ldr	r2, [r2, #4]
 800158e:	201f      	movs	r0, #31
 8001590:	4002      	ands	r2, r0
 8001592:	4093      	lsls	r3, r2
 8001594:	000a      	movs	r2, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d808      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	001a      	movs	r2, r3
 80015ba:	f7ff fb77 	bl	8000cac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	001a      	movs	r2, r3
 80015cc:	f7ff fbb2 	bl	8000d34 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db00      	blt.n	80015da <HAL_ADC_ConfigChannel+0x21e>
 80015d8:	e0bc      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fb13 	bl	8000c08 <LL_ADC_GetCommonPathInternalCh>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a4d      	ldr	r2, [pc, #308]	; (8001720 <HAL_ADC_ConfigChannel+0x364>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d122      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f8:	d11d      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	4313      	orrs	r3, r2
 8001602:	4a46      	ldr	r2, [pc, #280]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 8001604:	0019      	movs	r1, r3
 8001606:	0010      	movs	r0, r2
 8001608:	f7ff faea 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800160c:	4b45      	ldr	r3, [pc, #276]	; (8001724 <HAL_ADC_ConfigChannel+0x368>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4945      	ldr	r1, [pc, #276]	; (8001728 <HAL_ADC_ConfigChannel+0x36c>)
 8001612:	0018      	movs	r0, r3
 8001614:	f7fe fd74 	bl	8000100 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	0013      	movs	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001626:	e002      	b.n	800162e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3b01      	subs	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001634:	e08e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_ADC_ConfigChannel+0x370>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d10e      	bne.n	800165e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	045b      	lsls	r3, r3, #17
 8001646:	4013      	ands	r3, r2
 8001648:	d109      	bne.n	800165e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	0452      	lsls	r2, r2, #17
 8001650:	4313      	orrs	r3, r2
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 8001654:	0019      	movs	r1, r3
 8001656:	0010      	movs	r0, r2
 8001658:	f7ff fac2 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
 800165c:	e07a      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a33      	ldr	r2, [pc, #204]	; (8001730 <HAL_ADC_ConfigChannel+0x374>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d000      	beq.n	800166a <HAL_ADC_ConfigChannel+0x2ae>
 8001668:	e074      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	03db      	lsls	r3, r3, #15
 8001670:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001672:	d000      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x2ba>
 8001674:	e06e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	03d2      	lsls	r2, r2, #15
 800167c:	4313      	orrs	r3, r2
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 8001680:	0019      	movs	r1, r3
 8001682:	0010      	movs	r0, r2
 8001684:	f7ff faac 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
 8001688:	e064      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	429a      	cmp	r2, r3
 8001694:	d004      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_ADC_ConfigChannel+0x35c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d107      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0019      	movs	r1, r3
 80016aa:	0010      	movs	r0, r2
 80016ac:	f7ff fb2f 	bl	8000d0e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da4d      	bge.n	8001754 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff faa4 	bl	8000c08 <LL_ADC_GetCommonPathInternalCh>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_ADC_ConfigChannel+0x364>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d108      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_ADC_ConfigChannel+0x378>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7ff fa81 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
 80016de:	e039      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_ConfigChannel+0x370>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d108      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_ADC_ConfigChannel+0x37c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 80016f2:	0019      	movs	r1, r3
 80016f4:	0010      	movs	r0, r2
 80016f6:	f7ff fa73 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
 80016fa:	e02b      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_ADC_ConfigChannel+0x374>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d126      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_ADC_ConfigChannel+0x380>)
 800170a:	4013      	ands	r3, r2
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_ADC_ConfigChannel+0x360>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f7ff fa65 	bl	8000be0 <LL_ADC_SetCommonPathInternalCh>
 8001716:	e01d      	b.n	8001754 <HAL_ADC_ConfigChannel+0x398>
 8001718:	80000004 	.word	0x80000004
 800171c:	40012708 	.word	0x40012708
 8001720:	b0001000 	.word	0xb0001000
 8001724:	20000000 	.word	0x20000000
 8001728:	00030d40 	.word	0x00030d40
 800172c:	b8004000 	.word	0xb8004000
 8001730:	b4002000 	.word	0xb4002000
 8001734:	ff7fffff 	.word	0xff7fffff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	2220      	movs	r2, #32
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800174c:	2317      	movs	r3, #23
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2254      	movs	r2, #84	; 0x54
 8001758:	2100      	movs	r1, #0
 800175a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800175c:	2317      	movs	r3, #23
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	781b      	ldrb	r3, [r3, #0]
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b006      	add	sp, #24
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)

0800176c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fb41 	bl	8000e04 <LL_ADC_IsEnabled>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d000      	beq.n	8001788 <ADC_Enable+0x1c>
 8001786:	e069      	b.n	800185c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4a36      	ldr	r2, [pc, #216]	; (8001868 <ADC_Enable+0xfc>)
 8001790:	4013      	ands	r3, r2
 8001792:	d00d      	beq.n	80017b0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	2210      	movs	r2, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2201      	movs	r2, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e056      	b.n	800185e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fb01 	bl	8000dbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <ADC_Enable+0x100>)
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fa23 	bl	8000c08 <LL_ADC_GetCommonPathInternalCh>
 80017c2:	0002      	movs	r2, r0
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	4013      	ands	r3, r2
 80017ca:	d00f      	beq.n	80017ec <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <ADC_Enable+0x104>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4928      	ldr	r1, [pc, #160]	; (8001874 <ADC_Enable+0x108>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7fe fc94 	bl	8000100 <__udivsi3>
 80017d8:	0003      	movs	r3, r0
 80017da:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80017dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017de:	e002      	b.n	80017e6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e5b      	ldrb	r3, [r3, #25]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d033      	beq.n	800185c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80017f4:	f7ff f9ea 	bl	8000bcc <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017fc:	e027      	b.n	800184e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fafe 	bl	8000e04 <LL_ADC_IsEnabled>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d104      	bne.n	8001816 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff fad3 	bl	8000dbc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001816:	f7ff f9d9 	bl	8000bcc <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d914      	bls.n	800184e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	2b01      	cmp	r3, #1
 8001830:	d00d      	beq.n	800184e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	2210      	movs	r2, #16
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2201      	movs	r2, #1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e007      	b.n	800185e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1d0      	bne.n	80017fe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	80000017 	.word	0x80000017
 800186c:	40012708 	.word	0x40012708
 8001870:	20000000 	.word	0x20000000
 8001874:	00030d40 	.word	0x00030d40

08001878 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff face 	bl	8000e26 <LL_ADC_IsDisableOngoing>
 800188a:	0003      	movs	r3, r0
 800188c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff fab6 	bl	8000e04 <LL_ADC_IsEnabled>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d046      	beq.n	800192a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d143      	bne.n	800192a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2205      	movs	r2, #5
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10d      	bne.n	80018cc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fa93 	bl	8000de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2203      	movs	r2, #3
 80018c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018c2:	f7ff f983 	bl	8000bcc <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80018ca:	e028      	b.n	800191e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	2210      	movs	r2, #16
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2201      	movs	r2, #1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e021      	b.n	800192c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018e8:	f7ff f970 	bl	8000bcc <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d913      	bls.n	800191e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	d00d      	beq.n	800191e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	2210      	movs	r2, #16
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	2201      	movs	r2, #1
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e006      	b.n	800192c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	d1de      	bne.n	80018e8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b004      	add	sp, #16
 8001932:	bd80      	pop	{r7, pc}

08001934 <LL_ADC_SetCalibrationFactor>:
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	22b4      	movs	r2, #180	; 0xb4
 8001942:	589b      	ldr	r3, [r3, r2]
 8001944:	227f      	movs	r2, #127	; 0x7f
 8001946:	4393      	bics	r3, r2
 8001948:	001a      	movs	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	21b4      	movs	r1, #180	; 0xb4
 8001952:	505a      	str	r2, [r3, r1]
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <LL_ADC_GetCalibrationFactor>:
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	22b4      	movs	r2, #180	; 0xb4
 8001968:	589b      	ldr	r3, [r3, r2]
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	4013      	ands	r3, r2
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <LL_ADC_Enable>:
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <LL_ADC_Enable+0x20>)
 8001986:	4013      	ands	r3, r2
 8001988:	2201      	movs	r2, #1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}
 8001998:	7fffffe8 	.word	0x7fffffe8

0800199c <LL_ADC_Disable>:
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <LL_ADC_Disable+0x20>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	2202      	movs	r2, #2
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	7fffffe8 	.word	0x7fffffe8

080019c0 <LL_ADC_IsEnabled>:
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <LL_ADC_IsEnabled+0x18>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <LL_ADC_IsEnabled+0x1a>
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <LL_ADC_StartCalibration>:
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <LL_ADC_StartCalibration+0x24>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0612      	lsls	r2, r2, #24
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	609a      	str	r2, [r3, #8]
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	7fffffe8 	.word	0x7fffffe8

08001a0c <LL_ADC_IsCalibrationOnGoing>:
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	0fdb      	lsrs	r3, r3, #31
 8001a1a:	07da      	lsls	r2, r3, #31
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	061b      	lsls	r3, r3, #24
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2254      	movs	r2, #84	; 0x54
 8001a48:	5c9b      	ldrb	r3, [r3, r2]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0ba      	b.n	8001bc8 <HAL_ADCEx_Calibration_Start+0x194>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2254      	movs	r2, #84	; 0x54
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001a5a:	2317      	movs	r3, #23
 8001a5c:	18fc      	adds	r4, r7, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff09 	bl	8001878 <ADC_Disable>
 8001a66:	0003      	movs	r3, r0
 8001a68:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff ffa6 	bl	80019c0 <LL_ADC_IsEnabled>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d000      	beq.n	8001a7a <HAL_ADCEx_Calibration_Start+0x46>
 8001a78:	e099      	b.n	8001bae <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a54      	ldr	r2, [pc, #336]	; (8001bd0 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	2202      	movs	r2, #2
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	494d      	ldr	r1, [pc, #308]	; (8001bd8 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e02d      	b.n	8001b08 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ff97 	bl	80019e4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ab6:	e014      	b.n	8001ae2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d90d      	bls.n	8001ae2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	2212      	movs	r2, #18
 8001acc:	4393      	bics	r3, r2
 8001ace:	2210      	movs	r2, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2254      	movs	r2, #84	; 0x54
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e072      	b.n	8001bc8 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f7ff ff90 	bl	8001a0c <LL_ADC_IsCalibrationOnGoing>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d1e3      	bne.n	8001ab8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <LL_ADC_GetCalibrationFactor>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	189b      	adds	r3, r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3301      	adds	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d9ce      	bls.n	8001aac <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001b0e:	69f9      	ldr	r1, [r7, #28]
 8001b10:	69b8      	ldr	r0, [r7, #24]
 8001b12:	f7fe faf5 	bl	8000100 <__udivsi3>
 8001b16:	0003      	movs	r3, r0
 8001b18:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff ff2a 	bl	8001978 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff ff01 	bl	8001934 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff30 	bl	800199c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f846 	bl	8000bcc <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b44:	e01b      	b.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b46:	f7ff f841 	bl	8000bcc <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d914      	bls.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <LL_ADC_IsEnabled>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	2210      	movs	r2, #16
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2201      	movs	r2, #1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e024      	b.n	8001bc8 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff ff1c 	bl	80019c0 <LL_ADC_IsEnabled>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d1dc      	bne.n	8001b46 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	659a      	str	r2, [r3, #88]	; 0x58
 8001bac:	e005      	b.n	8001bba <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2254      	movs	r2, #84	; 0x54
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001bc2:	2317      	movs	r3, #23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b009      	add	sp, #36	; 0x24
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	fffffefd 	.word	0xfffffefd
 8001bd4:	00008003 	.word	0x00008003
 8001bd8:	ffff7ffc 	.word	0xffff7ffc
 8001bdc:	0002f1ff 	.word	0x0002f1ff

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	0002      	movs	r2, r0
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bf2:	d809      	bhi.n	8001c08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	231f      	movs	r3, #31
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_EnableIRQ+0x30>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	4091      	lsls	r1, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b7f      	cmp	r3, #127	; 0x7f
 8001c28:	d828      	bhi.n	8001c7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <__NVIC_SetPriority+0xd4>)
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	33c0      	adds	r3, #192	; 0xc0
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	589b      	ldr	r3, [r3, r2]
 8001c3a:	1dfa      	adds	r2, r7, #7
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	0011      	movs	r1, r2
 8001c40:	2203      	movs	r2, #3
 8001c42:	400a      	ands	r2, r1
 8001c44:	00d2      	lsls	r2, r2, #3
 8001c46:	21ff      	movs	r1, #255	; 0xff
 8001c48:	4091      	lsls	r1, r2
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	43d2      	mvns	r2, r2
 8001c4e:	401a      	ands	r2, r3
 8001c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	401a      	ands	r2, r3
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	2303      	movs	r3, #3
 8001c62:	4003      	ands	r3, r0
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c68:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <__NVIC_SetPriority+0xd4>)
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	430a      	orrs	r2, r1
 8001c74:	33c0      	adds	r3, #192	; 0xc0
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c7a:	e031      	b.n	8001ce0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <__NVIC_SetPriority+0xd8>)
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	0019      	movs	r1, r3
 8001c84:	230f      	movs	r3, #15
 8001c86:	400b      	ands	r3, r1
 8001c88:	3b08      	subs	r3, #8
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3306      	adds	r3, #6
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	3304      	adds	r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1dfa      	adds	r2, r7, #7
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	21ff      	movs	r1, #255	; 0xff
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	43d2      	mvns	r2, r2
 8001caa:	401a      	ands	r2, r3
 8001cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	4003      	ands	r3, r0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <__NVIC_SetPriority+0xd8>)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	001c      	movs	r4, r3
 8001ccc:	230f      	movs	r3, #15
 8001cce:	4023      	ands	r3, r4
 8001cd0:	3b08      	subs	r3, #8
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	3306      	adds	r3, #6
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	18c3      	adds	r3, r0, r3
 8001cdc:	3304      	adds	r3, #4
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	045b      	lsls	r3, r3, #17
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d301      	bcc.n	8001d08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d04:	2301      	movs	r3, #1
 8001d06:	e010      	b.n	8001d2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <SysTick_Config+0x44>)
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d10:	2301      	movs	r3, #1
 8001d12:	425b      	negs	r3, r3
 8001d14:	2103      	movs	r1, #3
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff ff7c 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x44>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x44>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	210f      	movs	r1, #15
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	1c02      	adds	r2, r0, #0
 8001d48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	0002      	movs	r2, r0
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff ff33 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ffaf 	bl	8001cf0 <SysTick_Config>
 8001d92:	0003      	movs	r3, r0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e077      	b.n	8001e9e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <HAL_DMA_Init+0x10c>)
 8001db4:	4694      	mov	ip, r2
 8001db6:	4463      	add	r3, ip
 8001db8:	2114      	movs	r1, #20
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7fe f9a0 	bl	8000100 <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2225      	movs	r2, #37	; 0x25
 8001dcc:	2102      	movs	r1, #2
 8001dce:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <HAL_DMA_Init+0x110>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 f8fb 	bl	8002014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	01db      	lsls	r3, r3, #7
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d102      	bne.n	8001e30 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	213f      	movs	r1, #63	; 0x3f
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d011      	beq.n	8001e74 <HAL_DMA_Init+0xd8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d80d      	bhi.n	8001e74 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 f906 	bl	800206c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e008      	b.n	8001e86 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2225      	movs	r2, #37	; 0x25
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	bffdfff8 	.word	0xbffdfff8
 8001eac:	ffff800f 	.word	0xffff800f

08001eb0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	221c      	movs	r2, #28
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2204      	movs	r2, #4
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x7a>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2204      	movs	r2, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d023      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	4013      	ands	r3, r2
 8001eec:	d107      	bne.n	8001efe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2104      	movs	r1, #4
 8001efa:	438a      	bics	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	221c      	movs	r2, #28
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x6e>
 8001f1c:	e073      	b.n	8002006 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	0010      	movs	r0, r2
 8001f26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f28:	e06d      	b.n	8002006 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	221c      	movs	r2, #28
 8001f30:	4013      	ands	r3, r2
 8001f32:	2202      	movs	r2, #2
 8001f34:	409a      	lsls	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d02e      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xec>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d02a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d10b      	bne.n	8001f6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	210a      	movs	r1, #10
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2225      	movs	r2, #37	; 0x25
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	221c      	movs	r2, #28
 8001f74:	4013      	ands	r3, r2
 8001f76:	2202      	movs	r2, #2
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03a      	beq.n	8002006 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	0010      	movs	r0, r2
 8001f98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001f9a:	e034      	b.n	8002006 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	d02b      	beq.n	8002008 <HAL_DMA_IRQHandler+0x158>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d027      	beq.n	8002008 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	210e      	movs	r1, #14
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	221c      	movs	r2, #28
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_DMA_IRQHandler+0x160>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2225      	movs	r2, #37	; 0x25
 8001fe8:	2101      	movs	r1, #1
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	0010      	movs	r0, r2
 8002004:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46c0      	nop			; (mov r8, r8)
}
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40020000 	.word	0x40020000

08002014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002024:	4694      	mov	ip, r2
 8002026:	4463      	add	r3, ip
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	001a      	movs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	001a      	movs	r2, r3
 8002036:	23ff      	movs	r3, #255	; 0xff
 8002038:	4013      	ands	r3, r2
 800203a:	3b08      	subs	r3, #8
 800203c:	2114      	movs	r1, #20
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe f85e 	bl	8000100 <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800204c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	221f      	movs	r2, #31
 8002052:	4013      	ands	r3, r2
 8002054:	2201      	movs	r2, #1
 8002056:	409a      	lsls	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	10008200 	.word	0x10008200
 8002068:	40020880 	.word	0x40020880

0800206c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002082:	4694      	mov	ip, r2
 8002084:	4463      	add	r3, ip
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	001a      	movs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002092:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	1000823f 	.word	0x1000823f
 80020b0:	40020940 	.word	0x40020940

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e147      	b.n	8002354 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4091      	lsls	r1, r2
 80020ce:	000a      	movs	r2, r1
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d100      	bne.n	80020dc <HAL_GPIO_Init+0x28>
 80020da:	e138      	b.n	800234e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x40>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d130      	bne.n	8002156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	409a      	lsls	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	43da      	mvns	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	409a      	lsls	r2, r3
 8002116:	0013      	movs	r3, r2
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	43da      	mvns	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	2201      	movs	r2, #1
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	2b03      	cmp	r3, #3
 8002160:	d017      	beq.n	8002192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	43da      	mvns	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d123      	bne.n	80021e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	58d3      	ldr	r3, [r2, r3]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2207      	movs	r2, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2107      	movs	r1, #7
 80021ca:	400b      	ands	r3, r1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	43da      	mvns	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	401a      	ands	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4013      	ands	r3, r2
 8002224:	d100      	bne.n	8002228 <HAL_GPIO_Init+0x174>
 8002226:	e092      	b.n	800234e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_GPIO_Init+0x2b8>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3318      	adds	r3, #24
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	589b      	ldr	r3, [r3, r2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2203      	movs	r2, #3
 800223a:	4013      	ands	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	220f      	movs	r2, #15
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	43da      	mvns	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	23a0      	movs	r3, #160	; 0xa0
 8002250:	05db      	lsls	r3, r3, #23
 8002252:	429a      	cmp	r2, r3
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x1ca>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a45      	ldr	r2, [pc, #276]	; (8002370 <HAL_GPIO_Init+0x2bc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x1c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_GPIO_Init+0x2c0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x1c2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a43      	ldr	r2, [pc, #268]	; (8002378 <HAL_GPIO_Init+0x2c4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x1be>
 800226e:	2303      	movs	r3, #3
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x1cc>
 8002272:	2305      	movs	r3, #5
 8002274:	e004      	b.n	8002280 <HAL_GPIO_Init+0x1cc>
 8002276:	2302      	movs	r3, #2
 8002278:	e002      	b.n	8002280 <HAL_GPIO_Init+0x1cc>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x1cc>
 800227e:	2300      	movs	r3, #0
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	2103      	movs	r1, #3
 8002284:	400a      	ands	r2, r1
 8002286:	00d2      	lsls	r2, r2, #3
 8002288:	4093      	lsls	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002290:	4936      	ldr	r1, [pc, #216]	; (800236c <HAL_GPIO_Init+0x2b8>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3318      	adds	r3, #24
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_GPIO_Init+0x2b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43da      	mvns	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	035b      	lsls	r3, r3, #13
 80022b6:	4013      	ands	r3, r2
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_GPIO_Init+0x2b8>)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_GPIO_Init+0x2b8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43da      	mvns	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	039b      	lsls	r3, r3, #14
 80022e0:	4013      	ands	r3, r2
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_GPIO_Init+0x2b8>)
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_GPIO_Init+0x2b8>)
 80022f4:	2384      	movs	r3, #132	; 0x84
 80022f6:	58d3      	ldr	r3, [r2, r3]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	4013      	ands	r3, r2
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002318:	4914      	ldr	r1, [pc, #80]	; (800236c <HAL_GPIO_Init+0x2b8>)
 800231a:	2284      	movs	r2, #132	; 0x84
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_GPIO_Init+0x2b8>)
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	58d3      	ldr	r3, [r2, r3]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43da      	mvns	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	4013      	ands	r3, r2
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002346:	4909      	ldr	r1, [pc, #36]	; (800236c <HAL_GPIO_Init+0x2b8>)
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	40da      	lsrs	r2, r3
 800235c:	1e13      	subs	r3, r2, #0
 800235e:	d000      	beq.n	8002362 <HAL_GPIO_Init+0x2ae>
 8002360:	e6b0      	b.n	80020c4 <HAL_GPIO_Init+0x10>
  }
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b006      	add	sp, #24
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021800 	.word	0x40021800
 8002370:	50000400 	.word	0x50000400
 8002374:	50000800 	.word	0x50000800
 8002378:	50000c00 	.word	0x50000c00

0800237c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d11f      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	0013      	movs	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	189b      	adds	r3, r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4912      	ldr	r1, [pc, #72]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fd fea6 	bl	8000100 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ba:	e008      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e001      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e009      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	401a      	ands	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d0ed      	beq.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40007000 	.word	0x40007000
 80023f0:	fffff9ff 	.word	0xfffff9ff
 80023f4:	20000000 	.word	0x20000000
 80023f8:	000f4240 	.word	0x000f4240

080023fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	23e0      	movs	r3, #224	; 0xe0
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	4013      	ands	r3, r2
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e2f3      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d100      	bne.n	8002432 <HAL_RCC_OscConfig+0x1e>
 8002430:	e07c      	b.n	800252c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	4bc3      	ldr	r3, [pc, #780]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2238      	movs	r2, #56	; 0x38
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	4bc0      	ldr	r3, [pc, #768]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2203      	movs	r2, #3
 8002442:	4013      	ands	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b10      	cmp	r3, #16
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0x3e>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d002      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4bb9      	ldr	r3, [pc, #740]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	4013      	ands	r3, r2
 8002462:	d062      	beq.n	800252a <HAL_RCC_OscConfig+0x116>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d15e      	bne.n	800252a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e2ce      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x78>
 800247c:	4bb0      	ldr	r3, [pc, #704]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4baf      	ldr	r3, [pc, #700]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	0249      	lsls	r1, r1, #9
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e020      	b.n	80024ce <HAL_RCC_OscConfig+0xba>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	23a0      	movs	r3, #160	; 0xa0
 8002492:	02db      	lsls	r3, r3, #11
 8002494:	429a      	cmp	r2, r3
 8002496:	d10e      	bne.n	80024b6 <HAL_RCC_OscConfig+0xa2>
 8002498:	4ba9      	ldr	r3, [pc, #676]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4ba8      	ldr	r3, [pc, #672]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	02c9      	lsls	r1, r1, #11
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	4ba6      	ldr	r3, [pc, #664]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4ba5      	ldr	r3, [pc, #660]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0249      	lsls	r1, r1, #9
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0xba>
 80024b6:	4ba2      	ldr	r3, [pc, #648]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4ba1      	ldr	r3, [pc, #644]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	49a1      	ldr	r1, [pc, #644]	; (8002744 <HAL_RCC_OscConfig+0x330>)
 80024be:	400a      	ands	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	4b9f      	ldr	r3, [pc, #636]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024c8:	499f      	ldr	r1, [pc, #636]	; (8002748 <HAL_RCC_OscConfig+0x334>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fb79 	bl	8000bcc <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fb74 	bl	8000bcc <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e28d      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f2:	4b93      	ldr	r3, [pc, #588]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	4013      	ands	r3, r2
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xcc>
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fb64 	bl	8000bcc <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250a:	f7fe fb5f 	bl	8000bcc <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e278      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251c:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4013      	ands	r3, r2
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0xf6>
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d100      	bne.n	8002538 <HAL_RCC_OscConfig+0x124>
 8002536:	e099      	b.n	800266c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2238      	movs	r2, #56	; 0x38
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002542:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2203      	movs	r2, #3
 8002548:	4013      	ands	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b10      	cmp	r3, #16
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x144>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d002      	beq.n	800255e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d135      	bne.n	80025ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255e:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4013      	ands	r3, r2
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x162>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e24b      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a74      	ldr	r2, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x338>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002592:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_RCC_OscConfig+0x33c>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025a6:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	2207      	movs	r2, #7
 80025ae:	4013      	ands	r3, r2
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x340>)
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x344>)
 80025b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x348>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe faa9 	bl	8000b14 <HAL_InitTick>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d051      	beq.n	800266a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e221      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d030      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x33c>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	4b57      	ldr	r3, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0049      	lsls	r1, r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe faea 	bl	8000bcc <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fae5 	bl	8000bcc <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1fe      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x338>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	021a      	lsls	r2, r3, #8
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800263a:	4949      	ldr	r1, [pc, #292]	; (8002760 <HAL_RCC_OscConfig+0x34c>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fac4 	bl	8000bcc <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fabf 	bl	8000bcc <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1d8      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4013      	ands	r3, r2
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x236>
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	d047      	beq.n	8002706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2238      	movs	r2, #56	; 0x38
 800267c:	4013      	ands	r3, r2
 800267e:	2b18      	cmp	r3, #24
 8002680:	d10a      	bne.n	8002698 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	2202      	movs	r2, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d03c      	beq.n	8002706 <HAL_RCC_OscConfig+0x2f2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d138      	bne.n	8002706 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e1ba      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fa8e 	bl	8000bcc <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fa89 	bl	8000bcc <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1a2      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	d0f1      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2a2>
 80026d2:	e018      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026da:	2101      	movs	r1, #1
 80026dc:	438a      	bics	r2, r1
 80026de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa74 	bl	8000bcc <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fa6f 	bl	8000bcc <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e188      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d1f1      	bne.n	80026ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2204      	movs	r2, #4
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x2fe>
 8002710:	e0c6      	b.n	80028a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	231f      	movs	r3, #31
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	2b20      	cmp	r3, #32
 8002724:	d11e      	bne.n	8002764 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_OscConfig+0x32c>)
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x31e>
 8002730:	e0b6      	b.n	80028a0 <HAL_RCC_OscConfig+0x48c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d000      	beq.n	800273c <HAL_RCC_OscConfig+0x328>
 800273a:	e0b1      	b.n	80028a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e166      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
 8002740:	40021000 	.word	0x40021000
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	fffbffff 	.word	0xfffbffff
 800274c:	ffff80ff 	.word	0xffff80ff
 8002750:	ffffc7ff 	.word	0xffffc7ff
 8002754:	00f42400 	.word	0x00f42400
 8002758:	20000000 	.word	0x20000000
 800275c:	20000004 	.word	0x20000004
 8002760:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002764:	4bac      	ldr	r3, [pc, #688]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	055b      	lsls	r3, r3, #21
 800276c:	4013      	ands	r3, r2
 800276e:	d101      	bne.n	8002774 <HAL_RCC_OscConfig+0x360>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x362>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d011      	beq.n	800279e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4ba7      	ldr	r3, [pc, #668]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800277c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800277e:	4ba6      	ldr	r3, [pc, #664]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0549      	lsls	r1, r1, #21
 8002784:	430a      	orrs	r2, r1
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
 8002788:	4ba3      	ldr	r3, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800278a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <HAL_RCC_OscConfig+0x608>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	d11a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027aa:	4b9c      	ldr	r3, [pc, #624]	; (8002a1c <HAL_RCC_OscConfig+0x608>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b9b      	ldr	r3, [pc, #620]	; (8002a1c <HAL_RCC_OscConfig+0x608>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0049      	lsls	r1, r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fa08 	bl	8000bcc <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fa03 	bl	8000bcc <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e11c      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x608>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3e2>
 80027e8:	4b8b      	ldr	r3, [pc, #556]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80027ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ec:	4b8a      	ldr	r3, [pc, #552]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x41c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x404>
 80027fe:	4b86      	ldr	r3, [pc, #536]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002804:	2104      	movs	r1, #4
 8002806:	430a      	orrs	r2, r1
 8002808:	65da      	str	r2, [r3, #92]	; 0x5c
 800280a:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800280c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800280e:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x41c>
 8002818:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800281a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800281e:	2101      	movs	r1, #1
 8002820:	438a      	bics	r2, r1
 8002822:	65da      	str	r2, [r3, #92]	; 0x5c
 8002824:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002828:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800282a:	2104      	movs	r1, #4
 800282c:	438a      	bics	r2, r1
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d014      	beq.n	8002862 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe f9c8 	bl	8000bcc <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002840:	e009      	b.n	8002856 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe f9c3 	bl	8000bcc <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	4a74      	ldr	r2, [pc, #464]	; (8002a20 <HAL_RCC_OscConfig+0x60c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0db      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x42e>
 8002860:	e013      	b.n	800288a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe f9b3 	bl	8000bcc <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286a:	e009      	b.n	8002880 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe f9ae 	bl	8000bcc <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	4a6a      	ldr	r2, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x60c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0c6      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800288a:	231f      	movs	r3, #31
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002898:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800289a:	4962      	ldr	r1, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x610>)
 800289c:	400a      	ands	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d100      	bne.n	80028aa <HAL_RCC_OscConfig+0x496>
 80028a8:	e0b0      	b.n	8002a0c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2238      	movs	r2, #56	; 0x38
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d100      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4a4>
 80028b6:	e078      	b.n	80029aa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d153      	bne.n	8002968 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80028c6:	4958      	ldr	r1, [pc, #352]	; (8002a28 <HAL_RCC_OscConfig+0x614>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe f97e 	bl	8000bcc <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe f979 	bl	8000bcc <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e092      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	049b      	lsls	r3, r3, #18
 80028f0:	4013      	ands	r3, r2
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f4:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	431a      	orrs	r2, r3
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800291e:	430a      	orrs	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	0449      	lsls	r1, r1, #17
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	0549      	lsls	r1, r1, #21
 800293a:	430a      	orrs	r2, r1
 800293c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe f945 	bl	8000bcc <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe f940 	bl	8000bcc <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e059      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	049b      	lsls	r3, r3, #18
 8002962:	4013      	ands	r3, r2
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x534>
 8002966:	e051      	b.n	8002a0c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800296e:	492e      	ldr	r1, [pc, #184]	; (8002a28 <HAL_RCC_OscConfig+0x614>)
 8002970:	400a      	ands	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f92a 	bl	8000bcc <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe f925 	bl	8000bcc <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03e      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	049b      	lsls	r3, r3, #18
 8002998:	4013      	ands	r3, r2
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80029a2:	4923      	ldr	r1, [pc, #140]	; (8002a30 <HAL_RCC_OscConfig+0x61c>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	e030      	b.n	8002a0c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e02b      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_RCC_OscConfig+0x604>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2203      	movs	r2, #3
 80029c0:	401a      	ands	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d11e      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2270      	movs	r2, #112	; 0x70
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d117      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	23fe      	movs	r3, #254	; 0xfe
 80029dc:	01db      	lsls	r3, r3, #7
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10e      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	23f8      	movs	r3, #248	; 0xf8
 80029ee:	039b      	lsls	r3, r3, #14
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	0f5b      	lsrs	r3, r3, #29
 80029fe:	075a      	lsls	r2, r3, #29
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b008      	add	sp, #32
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	00001388 	.word	0x00001388
 8002a24:	efffffff 	.word	0xefffffff
 8002a28:	feffffff 	.word	0xfeffffff
 8002a2c:	1fc1808c 	.word	0x1fc1808c
 8002a30:	effefffc 	.word	0xeffefffc

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0e9      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d91e      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a68:	f7fe f8b0 	bl	8000bcc <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a72:	f7fe f8ab 	bl	8000bcc <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <HAL_RCC_ClockConfig+0x1f4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0ca      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d015      	beq.n	8002aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d006      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002aa8:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002aae:	21e0      	movs	r1, #224	; 0xe0
 8002ab0:	01c9      	lsls	r1, r1, #7
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <HAL_RCC_ClockConfig+0x1fc>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d057      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d12b      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e097      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	049b      	lsls	r3, r3, #18
 8002afc:	4013      	ands	r3, r2
 8002afe:	d11f      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e08b      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	d113      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e07f      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e074      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e06d      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2207      	movs	r2, #7
 8002b46:	4393      	bics	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe f83a 	bl	8000bcc <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5c:	e009      	b.n	8002b72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5e:	f7fe f835 	bl	8000bcc <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	4a2f      	ldr	r2, [pc, #188]	; (8002c28 <HAL_RCC_ClockConfig+0x1f4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e054      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2238      	movs	r2, #56	; 0x38
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1ec      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d21e      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2207      	movs	r2, #7
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe f812 	bl	8000bcc <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bae:	f7fe f80d 	bl	8000bcc <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_RCC_ClockConfig+0x1f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e02c      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	4013      	ands	r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_RCC_ClockConfig+0x200>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bee:	f000 f829 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bf2:	0001      	movs	r1, r0
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x204>)
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	58d3      	ldr	r3, [r2, r3]
 8002c04:	221f      	movs	r2, #31
 8002c06:	4013      	ands	r3, r2
 8002c08:	000a      	movs	r2, r1
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x208>)
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x20c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fd ff7d 	bl	8000b14 <HAL_InitTick>
 8002c1a:	0003      	movs	r3, r0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40022000 	.word	0x40022000
 8002c28:	00001388 	.word	0x00001388
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	fffff0ff 	.word	0xfffff0ff
 8002c34:	ffff8fff 	.word	0xffff8fff
 8002c38:	08004364 	.word	0x08004364
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2238      	movs	r2, #56	; 0x38
 8002c50:	4013      	ands	r3, r2
 8002c52:	d10f      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c54:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0adb      	lsrs	r3, r3, #11
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2201      	movs	r2, #1
 8002c60:	409a      	lsls	r2, r3
 8002c62:	0013      	movs	r3, r2
 8002c64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	4835      	ldr	r0, [pc, #212]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c6a:	f7fd fa49 	bl	8000100 <__udivsi3>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e05d      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2238      	movs	r2, #56	; 0x38
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e054      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2238      	movs	r2, #56	; 0x38
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d138      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2203      	movs	r2, #3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4824      	ldr	r0, [pc, #144]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cb4:	f7fd fa24 	bl	8000100 <__udivsi3>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	0019      	movs	r1, r3
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	227f      	movs	r2, #127	; 0x7f
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	434b      	muls	r3, r1
 8002cc8:	617b      	str	r3, [r7, #20]
        break;
 8002cca:	e00d      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	481c      	ldr	r0, [pc, #112]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cd0:	f7fd fa16 	bl	8000100 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	227f      	movs	r2, #127	; 0x7f
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	434b      	muls	r3, r1
 8002ce4:	617b      	str	r3, [r7, #20]
        break;
 8002ce6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0f5b      	lsrs	r3, r3, #29
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f7fd fa01 	bl	8000100 <__udivsi3>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2238      	movs	r2, #56	; 0x38
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d103      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2238      	movs	r2, #56	; 0x38
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b18      	cmp	r3, #24
 8002d22:	d103      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d24:	23fa      	movs	r3, #250	; 0xfa
 8002d26:	01db      	lsls	r3, r3, #7
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e001      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d30:	693b      	ldr	r3, [r7, #16]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b006      	add	sp, #24
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	20000000 	.word	0x20000000

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d60:	f7ff fff2 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d64:	0004      	movs	r4, r0
 8002d66:	f7ff fb49 	bl	80023fc <LL_RCC_GetAPB1Prescaler>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	0b1a      	lsrs	r2, r3, #12
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	58d3      	ldr	r3, [r2, r3]
 8002d74:	221f      	movs	r2, #31
 8002d76:	4013      	ands	r3, r2
 8002d78:	40dc      	lsrs	r4, r3
 8002d7a:	0023      	movs	r3, r4
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	080043a4 	.word	0x080043a4

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d90:	2313      	movs	r3, #19
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d98:	2312      	movs	r3, #18
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	d100      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002dac:	e0a3      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2011      	movs	r0, #17
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d110      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc6:	4b7b      	ldr	r3, [pc, #492]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	0549      	lsls	r1, r1, #21
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de4:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0049      	lsls	r1, r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002df2:	f7fd feeb 	bl	8000bcc <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfc:	f7fd fee6 	bl	8000bcc <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d904      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e0a:	2313      	movs	r3, #19
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	2203      	movs	r2, #3
 8002e10:	701a      	strb	r2, [r3, #0]
        break;
 8002e12:	e005      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d0ed      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e20:	2313      	movs	r3, #19
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d154      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e2a:	4b62      	ldr	r3, [pc, #392]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2e:	23c0      	movs	r3, #192	; 0xc0
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d019      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d014      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e54:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0249      	lsls	r1, r1, #9
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e62:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e64:	4956      	ldr	r1, [pc, #344]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e6a:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d016      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fd fea8 	bl	8000bcc <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e80:	e00c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fd fea3 	bl	8000bcc <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d904      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e92:	2313      	movs	r3, #19
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2203      	movs	r2, #3
 8002e98:	701a      	strb	r2, [r3, #0]
            break;
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9c:	4b45      	ldr	r3, [pc, #276]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0ed      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ea6:	2313      	movs	r3, #19
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	4a41      	ldr	r2, [pc, #260]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ec4:	e00c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2213      	movs	r2, #19
 8002ecc:	18ba      	adds	r2, r7, r2
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	2312      	movs	r3, #18
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2213      	movs	r2, #19
 8002eda:	18ba      	adds	r2, r7, r2
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee0:	2311      	movs	r3, #17
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	2203      	movs	r2, #3
 8002f06:	4393      	bics	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	01db      	lsls	r3, r3, #7
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	0899      	lsrs	r1, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0249      	lsls	r1, r1, #9
 8002f66:	430a      	orrs	r2, r1
 8002f68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0249      	lsls	r1, r1, #9
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002fa4:	2312      	movs	r3, #18
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b006      	add	sp, #24
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	fffffcff 	.word	0xfffffcff
 8002fc0:	fffeffff 	.word	0xfffeffff
 8002fc4:	00001388 	.word	0x00001388
 8002fc8:	efffffff 	.word	0xefffffff
 8002fcc:	ffffcfff 	.word	0xffffcfff
 8002fd0:	ffff3fff 	.word	0xffff3fff

08002fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e04a      	b.n	800307c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	223d      	movs	r2, #61	; 0x3d
 8002fea:	5c9b      	ldrb	r3, [r3, r2]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d107      	bne.n	8003002 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	223c      	movs	r2, #60	; 0x3c
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7fd fc55 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223d      	movs	r2, #61	; 0x3d
 8003006:	2102      	movs	r1, #2
 8003008:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f000 faab 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2248      	movs	r2, #72	; 0x48
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223e      	movs	r2, #62	; 0x3e
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223f      	movs	r2, #63	; 0x3f
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2242      	movs	r2, #66	; 0x42
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2243      	movs	r2, #67	; 0x43
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2244      	movs	r2, #68	; 0x44
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2245      	movs	r2, #69	; 0x45
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2246      	movs	r2, #70	; 0x46
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2247      	movs	r2, #71	; 0x47
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223d      	movs	r2, #61	; 0x3d
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	223d      	movs	r2, #61	; 0x3d
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d001      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e037      	b.n	800310c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	223d      	movs	r2, #61	; 0x3d
 80030a0:	2102      	movs	r1, #2
 80030a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_TIM_Base_Start_IT+0x90>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x44>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_TIM_Base_Start_IT+0x94>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d116      	bne.n	80030f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_TIM_Base_Start_IT+0x98>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d016      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x84>
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	025b      	lsls	r3, r3, #9
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d011      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2101      	movs	r1, #1
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	e008      	b.n	8003108 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e000      	b.n	800310a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40000400 	.word	0x40000400
 800311c:	00010007 	.word	0x00010007

08003120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d124      	bne.n	8003180 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11d      	bne.n	8003180 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2203      	movs	r2, #3
 800314a:	4252      	negs	r2, r2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2203      	movs	r2, #3
 800315c:	4013      	ands	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0018      	movs	r0, r3
 8003164:	f000 f9ec 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003168:	e007      	b.n	800317a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 f9df 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f9eb 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	2b04      	cmp	r3, #4
 800318c:	d125      	bne.n	80031da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	2b04      	cmp	r3, #4
 800319a:	d11e      	bne.n	80031da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2205      	movs	r2, #5
 80031a2:	4252      	negs	r2, r2
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	23c0      	movs	r3, #192	; 0xc0
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f9bf 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 80031c2:	e007      	b.n	80031d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 f9b2 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f9be 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2208      	movs	r2, #8
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d124      	bne.n	8003232 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2208      	movs	r2, #8
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d11d      	bne.n	8003232 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2209      	movs	r2, #9
 80031fc:	4252      	negs	r2, r2
 80031fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	2203      	movs	r2, #3
 800320e:	4013      	ands	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f000 f993 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 800321a:	e007      	b.n	800322c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 f986 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 f992 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2210      	movs	r2, #16
 800323a:	4013      	ands	r3, r2
 800323c:	2b10      	cmp	r3, #16
 800323e:	d125      	bne.n	800328c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2210      	movs	r2, #16
 8003248:	4013      	ands	r3, r2
 800324a:	2b10      	cmp	r3, #16
 800324c:	d11e      	bne.n	800328c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2211      	movs	r2, #17
 8003254:	4252      	negs	r2, r2
 8003256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2208      	movs	r2, #8
 800325c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	23c0      	movs	r3, #192	; 0xc0
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4013      	ands	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0018      	movs	r0, r3
 8003270:	f000 f966 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003274:	e007      	b.n	8003286 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f959 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f965 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2201      	movs	r2, #1
 8003294:	4013      	ands	r3, r2
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10f      	bne.n	80032ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2202      	movs	r2, #2
 80032ae:	4252      	negs	r2, r2
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fd f899 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d10f      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b80      	cmp	r3, #128	; 0x80
 80032d4:	d108      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2281      	movs	r2, #129	; 0x81
 80032dc:	4252      	negs	r2, r2
 80032de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fab6 	bl	8003854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	401a      	ands	r2, r3
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d10e      	bne.n	800331a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	4013      	ands	r3, r2
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d107      	bne.n	800331a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIM_IRQHandler+0x260>)
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 faa5 	bl	8003864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	4013      	ands	r3, r2
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d10f      	bne.n	8003348 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2240      	movs	r2, #64	; 0x40
 8003330:	4013      	ands	r3, r2
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d108      	bne.n	8003348 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2241      	movs	r2, #65	; 0x41
 800333c:	4252      	negs	r2, r2
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f90c 	bl	8003560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2220      	movs	r2, #32
 8003350:	4013      	ands	r3, r2
 8003352:	2b20      	cmp	r3, #32
 8003354:	d10f      	bne.n	8003376 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	2b20      	cmp	r3, #32
 8003362:	d108      	bne.n	8003376 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	4252      	negs	r2, r2
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fa67 	bl	8003844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b002      	add	sp, #8
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	fffffeff 	.word	0xfffffeff

08003384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	230f      	movs	r3, #15
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	5c9b      	ldrb	r3, [r3, r2]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x20>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0bc      	b.n	800351e <HAL_TIM_ConfigClockSource+0x19a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	223c      	movs	r2, #60	; 0x3c
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	223d      	movs	r2, #61	; 0x3d
 80033b0:	2102      	movs	r1, #2
 80033b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4a5a      	ldr	r2, [pc, #360]	; (8003528 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4a59      	ldr	r2, [pc, #356]	; (800352c <HAL_TIM_ConfigClockSource+0x1a8>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	0192      	lsls	r2, r2, #6
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0xde>
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0192      	lsls	r2, r2, #6
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d900      	bls.n	80033ea <HAL_TIM_ConfigClockSource+0x66>
 80033e8:	e088      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0152      	lsls	r2, r2, #5
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d100      	bne.n	80033f4 <HAL_TIM_ConfigClockSource+0x70>
 80033f2:	e088      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x182>
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	0152      	lsls	r2, r2, #5
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d900      	bls.n	80033fe <HAL_TIM_ConfigClockSource+0x7a>
 80033fc:	e07e      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 80033fe:	2b70      	cmp	r3, #112	; 0x70
 8003400:	d018      	beq.n	8003434 <HAL_TIM_ConfigClockSource+0xb0>
 8003402:	d900      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x82>
 8003404:	e07a      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 8003406:	2b60      	cmp	r3, #96	; 0x60
 8003408:	d04f      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x126>
 800340a:	d900      	bls.n	800340e <HAL_TIM_ConfigClockSource+0x8a>
 800340c:	e076      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 800340e:	2b50      	cmp	r3, #80	; 0x50
 8003410:	d03b      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x106>
 8003412:	d900      	bls.n	8003416 <HAL_TIM_ConfigClockSource+0x92>
 8003414:	e072      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d057      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x146>
 800341a:	d900      	bls.n	800341e <HAL_TIM_ConfigClockSource+0x9a>
 800341c:	e06e      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 800341e:	2b30      	cmp	r3, #48	; 0x30
 8003420:	d063      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x166>
 8003422:	d86b      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 8003424:	2b20      	cmp	r3, #32
 8003426:	d060      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x166>
 8003428:	d868      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d05d      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x166>
 800342e:	2b10      	cmp	r3, #16
 8003430:	d05b      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x166>
 8003432:	e063      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	f000 f97c 	bl	8003740 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2277      	movs	r2, #119	; 0x77
 8003454:	4313      	orrs	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
      break;
 8003460:	e052      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003472:	f000 f965 	bl	8003740 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	01c9      	lsls	r1, r1, #7
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
      break;
 8003488:	e03e      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	001a      	movs	r2, r3
 8003498:	f000 f8d6 	bl	8003648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2150      	movs	r1, #80	; 0x50
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 f930 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80034a8:	e02e      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b6:	001a      	movs	r2, r3
 80034b8:	f000 f8f4 	bl	80036a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2160      	movs	r1, #96	; 0x60
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 f920 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80034c8:	e01e      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	001a      	movs	r2, r3
 80034d8:	f000 f8b6 	bl	8003648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f910 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e00e      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0019      	movs	r1, r3
 80034f4:	0010      	movs	r0, r2
 80034f6:	f000 f907 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80034fa:	e005      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034fc:	230f      	movs	r3, #15
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
      break;
 8003504:	e000      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003506:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223d      	movs	r2, #61	; 0x3d
 800350c:	2101      	movs	r1, #1
 800350e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]

  return status;
 8003518:	230f      	movs	r3, #15
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	781b      	ldrb	r3, [r3, #0]
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	ffceff88 	.word	0xffceff88
 800352c:	ffff00ff 	.word	0xffff00ff

08003530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <TIM_Base_SetConfig+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0x20>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <TIM_Base_SetConfig+0xc4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2270      	movs	r2, #112	; 0x70
 8003594:	4393      	bics	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <TIM_Base_SetConfig+0xc0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x5a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <TIM_Base_SetConfig+0xc4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x5a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <TIM_Base_SetConfig+0xc8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x5a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1f      	ldr	r2, [pc, #124]	; (800363c <TIM_Base_SetConfig+0xcc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x5a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <TIM_Base_SetConfig+0xd0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <TIM_Base_SetConfig+0xd4>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	4393      	bics	r3, r2
 80035e2:	001a      	movs	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <TIM_Base_SetConfig+0xc0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0xaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <TIM_Base_SetConfig+0xcc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <TIM_Base_SetConfig+0xd0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d103      	bne.n	8003622 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	615a      	str	r2, [r3, #20]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40002000 	.word	0x40002000
 800363c:	40014400 	.word	0x40014400
 8003640:	40014800 	.word	0x40014800
 8003644:	fffffcff 	.word	0xfffffcff

08003648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	2201      	movs	r2, #1
 8003660:	4393      	bics	r3, r2
 8003662:	001a      	movs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	22f0      	movs	r2, #240	; 0xf0
 8003672:	4393      	bics	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	220a      	movs	r2, #10
 8003684:	4393      	bics	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b006      	add	sp, #24
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	2210      	movs	r2, #16
 80036b6:	4393      	bics	r3, r2
 80036b8:	001a      	movs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <TIM_TI2_ConfigInputStage+0x60>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	22a0      	movs	r2, #160	; 0xa0
 80036e0:	4393      	bics	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	ffff0fff 	.word	0xffff0fff

08003708 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <TIM_ITRx_SetConfig+0x34>)
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	2207      	movs	r2, #7
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	ffcfff8f 	.word	0xffcfff8f

08003740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <TIM_ETR_SetConfig+0x3c>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	431a      	orrs	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b006      	add	sp, #24
 800377a:	bd80      	pop	{r7, pc}
 800377c:	ffff00ff 	.word	0xffff00ff

08003780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	223c      	movs	r2, #60	; 0x3c
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003794:	2302      	movs	r3, #2
 8003796:	e04a      	b.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223c      	movs	r2, #60	; 0x3c
 800379c:	2101      	movs	r1, #1
 800379e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223d      	movs	r2, #61	; 0x3d
 80037a4:	2102      	movs	r1, #2
 80037a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2270      	movs	r2, #112	; 0x70
 80037d8:	4393      	bics	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10c      	bne.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	4393      	bics	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	223d      	movs	r2, #61	; 0x3d
 8003820:	2101      	movs	r1, #1
 8003822:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223c      	movs	r2, #60	; 0x3c
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	40012c00 	.word	0x40012c00
 800383c:	ff0fffff 	.word	0xff0fffff
 8003840:	40000400 	.word	0x40000400

08003844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e046      	b.n	8003914 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2288      	movs	r2, #136	; 0x88
 800388a:	589b      	ldr	r3, [r3, r2]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2284      	movs	r2, #132	; 0x84
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f7fd f82c 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2288      	movs	r2, #136	; 0x88
 80038a4:	2124      	movs	r1, #36	; 0x24
 80038a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	438a      	bics	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 f8cc 	bl	8003a58 <UART_SetConfig>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e024      	b.n	8003914 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 fa29 	bl	8003d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	490d      	ldr	r1, [pc, #52]	; (800391c <HAL_UART_Init+0xa8>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	212a      	movs	r1, #42	; 0x2a
 80038f6:	438a      	bics	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2101      	movs	r1, #1
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fac1 	bl	8003e94 <UART_CheckIdleState>
 8003912:	0003      	movs	r3, r0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}
 800391c:	ffffb7ff 	.word	0xffffb7ff

08003920 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2288      	movs	r2, #136	; 0x88
 8003934:	589b      	ldr	r3, [r3, r2]
 8003936:	2b20      	cmp	r3, #32
 8003938:	d000      	beq.n	800393c <HAL_UART_Transmit+0x1c>
 800393a:	e088      	b.n	8003a4e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_Transmit+0x2a>
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e080      	b.n	8003a50 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	015b      	lsls	r3, r3, #5
 8003956:	429a      	cmp	r2, r3
 8003958:	d109      	bne.n	800396e <HAL_UART_Transmit+0x4e>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2201      	movs	r2, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d001      	beq.n	800396e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e070      	b.n	8003a50 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2290      	movs	r2, #144	; 0x90
 8003972:	2100      	movs	r1, #0
 8003974:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2288      	movs	r2, #136	; 0x88
 800397a:	2121      	movs	r1, #33	; 0x21
 800397c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397e:	f7fd f925 	bl	8000bcc <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1dba      	adds	r2, r7, #6
 800398a:	2154      	movs	r1, #84	; 0x54
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1dba      	adds	r2, r7, #6
 8003994:	2156      	movs	r1, #86	; 0x56
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	015b      	lsls	r3, r3, #5
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d108      	bne.n	80039b8 <HAL_UART_Transmit+0x98>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e003      	b.n	80039c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c0:	e02c      	b.n	8003a1c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	0013      	movs	r3, r2
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	f000 faae 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d001      	beq.n	80039dc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e039      	b.n	8003a50 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	001a      	movs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	05d2      	lsls	r2, r2, #23
 80039ee:	0dd2      	lsrs	r2, r2, #23
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3302      	adds	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e007      	b.n	8003a0a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2256      	movs	r2, #86	; 0x56
 8003a0e:	5a9b      	ldrh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b299      	uxth	r1, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2256      	movs	r2, #86	; 0x56
 8003a1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2256      	movs	r2, #86	; 0x56
 8003a20:	5a9b      	ldrh	r3, [r3, r2]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1cc      	bne.n	80039c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	0013      	movs	r3, r2
 8003a32:	2200      	movs	r2, #0
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	f000 fa7b 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	1e03      	subs	r3, r0, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2288      	movs	r2, #136	; 0x88
 8003a46:	2120      	movs	r1, #32
 8003a48:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b008      	add	sp, #32
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a60:	231a      	movs	r3, #26
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4aa1      	ldr	r2, [pc, #644]	; (8003d0c <UART_SetConfig+0x2b4>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a9c      	ldr	r2, [pc, #624]	; (8003d10 <UART_SetConfig+0x2b8>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a93      	ldr	r2, [pc, #588]	; (8003d14 <UART_SetConfig+0x2bc>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	220f      	movs	r2, #15
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a89      	ldr	r2, [pc, #548]	; (8003d18 <UART_SetConfig+0x2c0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d127      	bne.n	8003b46 <UART_SetConfig+0xee>
 8003af6:	4b89      	ldr	r3, [pc, #548]	; (8003d1c <UART_SetConfig+0x2c4>)
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	2203      	movs	r2, #3
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d017      	beq.n	8003b32 <UART_SetConfig+0xda>
 8003b02:	d81b      	bhi.n	8003b3c <UART_SetConfig+0xe4>
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d00a      	beq.n	8003b1e <UART_SetConfig+0xc6>
 8003b08:	d818      	bhi.n	8003b3c <UART_SetConfig+0xe4>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <UART_SetConfig+0xbc>
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d00a      	beq.n	8003b28 <UART_SetConfig+0xd0>
 8003b12:	e013      	b.n	8003b3c <UART_SetConfig+0xe4>
 8003b14:	231b      	movs	r3, #27
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e021      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b1e:	231b      	movs	r3, #27
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e01c      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b28:	231b      	movs	r3, #27
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e017      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b32:	231b      	movs	r3, #27
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	2208      	movs	r2, #8
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e012      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b3c:	231b      	movs	r3, #27
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2210      	movs	r2, #16
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e00d      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <UART_SetConfig+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d104      	bne.n	8003b5a <UART_SetConfig+0x102>
 8003b50:	231b      	movs	r3, #27
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e003      	b.n	8003b62 <UART_SetConfig+0x10a>
 8003b5a:	231b      	movs	r3, #27
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2210      	movs	r2, #16
 8003b60:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d000      	beq.n	8003b70 <UART_SetConfig+0x118>
 8003b6e:	e065      	b.n	8003c3c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003b70:	231b      	movs	r3, #27
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d015      	beq.n	8003ba6 <UART_SetConfig+0x14e>
 8003b7a:	dc18      	bgt.n	8003bae <UART_SetConfig+0x156>
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d00d      	beq.n	8003b9c <UART_SetConfig+0x144>
 8003b80:	dc15      	bgt.n	8003bae <UART_SetConfig+0x156>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <UART_SetConfig+0x134>
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d005      	beq.n	8003b96 <UART_SetConfig+0x13e>
 8003b8a:	e010      	b.n	8003bae <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7ff f8e6 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003b90:	0003      	movs	r3, r0
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e012      	b.n	8003bbc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b96:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <UART_SetConfig+0x2cc>)
 8003b98:	617b      	str	r3, [r7, #20]
        break;
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9c:	f7ff f852 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e00a      	b.n	8003bbc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	617b      	str	r3, [r7, #20]
        break;
 8003bac:	e006      	b.n	8003bbc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bb2:	231a      	movs	r3, #26
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
        break;
 8003bba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d100      	bne.n	8003bc4 <UART_SetConfig+0x16c>
 8003bc2:	e08d      	b.n	8003ce0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc8:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <UART_SetConfig+0x2d0>)
 8003bca:	0052      	lsls	r2, r2, #1
 8003bcc:	5ad3      	ldrh	r3, [r2, r3]
 8003bce:	0019      	movs	r1, r3
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f7fc fa95 	bl	8000100 <__udivsi3>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	005a      	lsls	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	18d2      	adds	r2, r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	0019      	movs	r1, r3
 8003be8:	0010      	movs	r0, r2
 8003bea:	f7fc fa89 	bl	8000100 <__udivsi3>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d91c      	bls.n	8003c32 <UART_SetConfig+0x1da>
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	025b      	lsls	r3, r3, #9
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d217      	bcs.n	8003c32 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	200e      	movs	r0, #14
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	210f      	movs	r1, #15
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2207      	movs	r2, #7
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	183a      	adds	r2, r7, r0
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	183a      	adds	r2, r7, r0
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	e056      	b.n	8003ce0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003c32:	231a      	movs	r3, #26
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e051      	b.n	8003ce0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c3c:	231b      	movs	r3, #27
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d015      	beq.n	8003c72 <UART_SetConfig+0x21a>
 8003c46:	dc18      	bgt.n	8003c7a <UART_SetConfig+0x222>
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d00d      	beq.n	8003c68 <UART_SetConfig+0x210>
 8003c4c:	dc15      	bgt.n	8003c7a <UART_SetConfig+0x222>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <UART_SetConfig+0x200>
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d005      	beq.n	8003c62 <UART_SetConfig+0x20a>
 8003c56:	e010      	b.n	8003c7a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7ff f880 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	e012      	b.n	8003c88 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <UART_SetConfig+0x2cc>)
 8003c64:	617b      	str	r3, [r7, #20]
        break;
 8003c66:	e00f      	b.n	8003c88 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c68:	f7fe ffec 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	617b      	str	r3, [r7, #20]
        break;
 8003c70:	e00a      	b.n	8003c88 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
        break;
 8003c78:	e006      	b.n	8003c88 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c7e:	231a      	movs	r3, #26
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
        break;
 8003c86:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <UART_SetConfig+0x2d0>)
 8003c94:	0052      	lsls	r2, r2, #1
 8003c96:	5ad3      	ldrh	r3, [r2, r3]
 8003c98:	0019      	movs	r1, r3
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7fc fa30 	bl	8000100 <__udivsi3>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	18d2      	adds	r2, r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	f7fc fa24 	bl	8000100 <__udivsi3>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	d90a      	bls.n	8003cd8 <UART_SetConfig+0x280>
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	025b      	lsls	r3, r3, #9
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d205      	bcs.n	8003cd8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	e003      	b.n	8003ce0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd8:	231a      	movs	r3, #26
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	226a      	movs	r2, #106	; 0x6a
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2268      	movs	r2, #104	; 0x68
 8003cec:	2101      	movs	r1, #1
 8003cee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cfc:	231a      	movs	r3, #26
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b008      	add	sp, #32
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	cfff69f3 	.word	0xcfff69f3
 8003d10:	ffffcfff 	.word	0xffffcfff
 8003d14:	11fff4ff 	.word	0x11fff4ff
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40004400 	.word	0x40004400
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	080043c4 	.word	0x080043c4

08003d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a4a      	ldr	r2, [pc, #296]	; (8003e70 <UART_AdvFeatureConfig+0x144>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a43      	ldr	r2, [pc, #268]	; (8003e74 <UART_AdvFeatureConfig+0x148>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <UART_AdvFeatureConfig+0x14c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2208      	movs	r2, #8
 8003da0:	4013      	ands	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <UART_AdvFeatureConfig+0x150>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <UART_AdvFeatureConfig+0x154>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	2220      	movs	r2, #32
 8003de4:	4013      	ands	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <UART_AdvFeatureConfig+0x158>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	4013      	ands	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <UART_AdvFeatureConfig+0x15c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	035b      	lsls	r3, r3, #13
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10b      	bne.n	8003e46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <UART_AdvFeatureConfig+0x160>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <UART_AdvFeatureConfig+0x164>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fffdffff 	.word	0xfffdffff
 8003e74:	fffeffff 	.word	0xfffeffff
 8003e78:	fffbffff 	.word	0xfffbffff
 8003e7c:	ffff7fff 	.word	0xffff7fff
 8003e80:	ffffefff 	.word	0xffffefff
 8003e84:	ffffdfff 	.word	0xffffdfff
 8003e88:	ffefffff 	.word	0xffefffff
 8003e8c:	ff9fffff 	.word	0xff9fffff
 8003e90:	fff7ffff 	.word	0xfff7ffff

08003e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2290      	movs	r2, #144	; 0x90
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea4:	f7fc fe92 	bl	8000bcc <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d10c      	bne.n	8003ed4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0391      	lsls	r1, r2, #14
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <UART_CheckIdleState+0x98>)
 8003ec4:	9200      	str	r2, [sp, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f000 f832 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003ecc:	1e03      	subs	r3, r0, #0
 8003ece:	d001      	beq.n	8003ed4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e026      	b.n	8003f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2204      	movs	r2, #4
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d10c      	bne.n	8003efc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	03d1      	lsls	r1, r2, #15
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <UART_CheckIdleState+0x98>)
 8003eec:	9200      	str	r2, [sp, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f000 f81e 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d001      	beq.n	8003efc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e012      	b.n	8003f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2288      	movs	r2, #136	; 0x88
 8003f00:	2120      	movs	r1, #32
 8003f02:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	228c      	movs	r2, #140	; 0x8c
 8003f08:	2120      	movs	r1, #32
 8003f0a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2284      	movs	r2, #132	; 0x84
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	01ffffff 	.word	0x01ffffff

08003f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b094      	sub	sp, #80	; 0x50
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f40:	e0a7      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f44:	3301      	adds	r3, #1
 8003f46:	d100      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003f48:	e0a3      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fc fe3f 	bl	8000bcc <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d13f      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f68:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	494e      	ldr	r1, [pc, #312]	; (80040bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2288      	movs	r2, #136	; 0x88
 8003fc8:	2120      	movs	r1, #32
 8003fca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	228c      	movs	r2, #140	; 0x8c
 8003fd0:	2120      	movs	r1, #32
 8003fd2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2284      	movs	r2, #132	; 0x84
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e069      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d052      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d148      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	0112      	lsls	r2, r2, #4
 8004008:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	613b      	str	r3, [r7, #16]
  return(result);
 8004010:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	2301      	movs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4924      	ldr	r1, [pc, #144]	; (80040bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800402c:	400a      	ands	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403c:	f3ef 8310 	mrs	r3, PRIMASK
 8004040:	61fb      	str	r3, [r7, #28]
  return(result);
 8004042:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	64bb      	str	r3, [r7, #72]	; 0x48
 8004046:	2301      	movs	r3, #1
 8004048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2101      	movs	r1, #1
 800405e:	438a      	bics	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2288      	movs	r2, #136	; 0x88
 8004072:	2120      	movs	r1, #32
 8004074:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	228c      	movs	r2, #140	; 0x8c
 800407a:	2120      	movs	r1, #32
 800407c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2290      	movs	r2, #144	; 0x90
 8004082:	2120      	movs	r1, #32
 8004084:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2284      	movs	r2, #132	; 0x84
 800408a:	2100      	movs	r1, #0
 800408c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e010      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	425a      	negs	r2, r3
 80040a2:	4153      	adcs	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	001a      	movs	r2, r3
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d100      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x182>
 80040b0:	e747      	b.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b014      	add	sp, #80	; 0x50
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	fffffe5f 	.word	0xfffffe5f

080040c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2284      	movs	r2, #132	; 0x84
 80040cc:	5c9b      	ldrb	r3, [r3, r2]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e027      	b.n	8004126 <HAL_UARTEx_DisableFifoMode+0x66>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2284      	movs	r2, #132	; 0x84
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2288      	movs	r2, #136	; 0x88
 80040e2:	2124      	movs	r1, #36	; 0x24
 80040e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004102:	4013      	ands	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2288      	movs	r2, #136	; 0x88
 8004118:	2120      	movs	r1, #32
 800411a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2284      	movs	r2, #132	; 0x84
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b004      	add	sp, #16
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	dfffffff 	.word	0xdfffffff

08004134 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2284      	movs	r2, #132	; 0x84
 8004142:	5c9b      	ldrb	r3, [r3, r2]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004148:	2302      	movs	r3, #2
 800414a:	e02e      	b.n	80041aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2284      	movs	r2, #132	; 0x84
 8004150:	2101      	movs	r1, #1
 8004152:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2288      	movs	r2, #136	; 0x88
 8004158:	2124      	movs	r1, #36	; 0x24
 800415a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	438a      	bics	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	08d9      	lsrs	r1, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f854 	bl	8004238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2288      	movs	r2, #136	; 0x88
 800419c:	2120      	movs	r1, #32
 800419e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2284      	movs	r2, #132	; 0x84
 80041a4:	2100      	movs	r1, #0
 80041a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b004      	add	sp, #16
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2284      	movs	r2, #132	; 0x84
 80041c2:	5c9b      	ldrb	r3, [r3, r2]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e02f      	b.n	800422c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2284      	movs	r2, #132	; 0x84
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2288      	movs	r2, #136	; 0x88
 80041d8:	2124      	movs	r1, #36	; 0x24
 80041da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 f813 	bl	8004238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2288      	movs	r2, #136	; 0x88
 800421e:	2120      	movs	r1, #32
 8004220:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2284      	movs	r2, #132	; 0x84
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}
 8004234:	f1ffffff 	.word	0xf1ffffff

08004238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	226a      	movs	r2, #106	; 0x6a
 800424c:	2101      	movs	r1, #1
 800424e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2268      	movs	r2, #104	; 0x68
 8004254:	2101      	movs	r1, #1
 8004256:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004258:	e043      	b.n	80042e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800425a:	260f      	movs	r6, #15
 800425c:	19bb      	adds	r3, r7, r6
 800425e:	2208      	movs	r2, #8
 8004260:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004262:	200e      	movs	r0, #14
 8004264:	183b      	adds	r3, r7, r0
 8004266:	2208      	movs	r2, #8
 8004268:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	0e5b      	lsrs	r3, r3, #25
 8004272:	b2da      	uxtb	r2, r3
 8004274:	240d      	movs	r4, #13
 8004276:	193b      	adds	r3, r7, r4
 8004278:	2107      	movs	r1, #7
 800427a:	400a      	ands	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	0f5b      	lsrs	r3, r3, #29
 8004286:	b2da      	uxtb	r2, r3
 8004288:	250c      	movs	r5, #12
 800428a:	197b      	adds	r3, r7, r5
 800428c:	2107      	movs	r1, #7
 800428e:	400a      	ands	r2, r1
 8004290:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004292:	183b      	adds	r3, r7, r0
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	197a      	adds	r2, r7, r5
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	4914      	ldr	r1, [pc, #80]	; (80042ec <UARTEx_SetNbDataToProcess+0xb4>)
 800429c:	5c8a      	ldrb	r2, [r1, r2]
 800429e:	435a      	muls	r2, r3
 80042a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042a2:	197b      	adds	r3, r7, r5
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80042a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042aa:	0019      	movs	r1, r3
 80042ac:	f7fb ffb2 	bl	8000214 <__divsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	b299      	uxth	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	226a      	movs	r2, #106	; 0x6a
 80042b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ba:	19bb      	adds	r3, r7, r6
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	193a      	adds	r2, r7, r4
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	490a      	ldr	r1, [pc, #40]	; (80042ec <UARTEx_SetNbDataToProcess+0xb4>)
 80042c4:	5c8a      	ldrb	r2, [r1, r2]
 80042c6:	435a      	muls	r2, r3
 80042c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042d2:	0019      	movs	r1, r3
 80042d4:	f7fb ff9e 	bl	8000214 <__divsi3>
 80042d8:	0003      	movs	r3, r0
 80042da:	b299      	uxth	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2268      	movs	r2, #104	; 0x68
 80042e0:	5299      	strh	r1, [r3, r2]
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b005      	add	sp, #20
 80042e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	080043dc 	.word	0x080043dc
 80042f0:	080043e4 	.word	0x080043e4

080042f4 <memset>:
 80042f4:	0003      	movs	r3, r0
 80042f6:	1882      	adds	r2, r0, r2
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	7019      	strb	r1, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <__libc_init_array>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	2600      	movs	r6, #0
 8004308:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x38>)
 800430a:	4d0d      	ldr	r5, [pc, #52]	; (8004340 <__libc_init_array+0x3c>)
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	42a6      	cmp	r6, r4
 8004312:	d109      	bne.n	8004328 <__libc_init_array+0x24>
 8004314:	2600      	movs	r6, #0
 8004316:	f000 f819 	bl	800434c <_init>
 800431a:	4c0a      	ldr	r4, [pc, #40]	; (8004344 <__libc_init_array+0x40>)
 800431c:	4d0a      	ldr	r5, [pc, #40]	; (8004348 <__libc_init_array+0x44>)
 800431e:	1b64      	subs	r4, r4, r5
 8004320:	10a4      	asrs	r4, r4, #2
 8004322:	42a6      	cmp	r6, r4
 8004324:	d105      	bne.n	8004332 <__libc_init_array+0x2e>
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	00b3      	lsls	r3, r6, #2
 800432a:	58eb      	ldr	r3, [r5, r3]
 800432c:	4798      	blx	r3
 800432e:	3601      	adds	r6, #1
 8004330:	e7ee      	b.n	8004310 <__libc_init_array+0xc>
 8004332:	00b3      	lsls	r3, r6, #2
 8004334:	58eb      	ldr	r3, [r5, r3]
 8004336:	4798      	blx	r3
 8004338:	3601      	adds	r6, #1
 800433a:	e7f2      	b.n	8004322 <__libc_init_array+0x1e>
 800433c:	080043ec 	.word	0x080043ec
 8004340:	080043ec 	.word	0x080043ec
 8004344:	080043f0 	.word	0x080043f0
 8004348:	080043ec 	.word	0x080043ec

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
