
LC_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005768  08005768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005768  08005768  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005768  08005768  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000000c  0800577c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800577c  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001467d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003021  00000000  00000000  000346f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00037718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d69  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017167  00000000  00000000  000395c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161da  00000000  00000000  00050728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000938f0  00000000  00000000  00066902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d60  00000000  00000000  000fa1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000fdf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080056c8 	.word	0x080056c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080056c8 	.word	0x080056c8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f005 f92e 	bl	800565c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000402:	4a2c      	ldr	r2, [pc, #176]	; (80004b4 <MX_ADC1_Init+0xc8>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000434:	2201      	movs	r2, #1
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800044c:	222c      	movs	r2, #44	; 0x2c
 800044e:	2100      	movs	r1, #0
 8000450:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800045a:	2200      	movs	r2, #0
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000460:	2200      	movs	r2, #0
 8000462:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000466:	223c      	movs	r2, #60	; 0x3c
 8000468:	2100      	movs	r1, #0
 800046a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_ADC1_Init+0xc4>)
 800046e:	2200      	movs	r2, #0
 8000470:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fde7 	bl	8001048 <HAL_ADC_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800047e:	f000 f94f 	bl	8000720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000486:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000494:	1d3a      	adds	r2, r7, #4
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f001 f86a 	bl	8001574 <HAL_ADC_ConfigChannel>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80004a4:	f000 f93c 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b004      	add	sp, #16
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000028 	.word	0x20000028
 80004b4:	40012400 	.word	0x40012400
 80004b8:	04000002 	.word	0x04000002

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08b      	sub	sp, #44	; 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	2414      	movs	r4, #20
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f005 f8c4 	bl	800565c <memset>
  if(adcHandle->Instance==ADC1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <HAL_ADC_MspInit+0x80>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d129      	bne.n	8000532 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <HAL_ADC_MspInit+0x84>)
 80004e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <HAL_ADC_MspInit+0x84>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0349      	lsls	r1, r1, #13
 80004e8:	430a      	orrs	r2, r1
 80004ea:	641a      	str	r2, [r3, #64]	; 0x40
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_ADC_MspInit+0x84>)
 80004ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	035b      	lsls	r3, r3, #13
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_ADC_MspInit+0x84>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_ADC_MspInit+0x84>)
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_ADC_MspInit+0x84>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050a:	2201      	movs	r2, #1
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2203      	movs	r2, #3
 800051c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	23a0      	movs	r3, #160	; 0xa0
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f002 f839 	bl	80025a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b00b      	add	sp, #44	; 0x2c
 8000538:	bd90      	pop	{r4, r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40012400 	.word	0x40012400
 8000540:	40021000 	.word	0x40021000

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_DMA_Init+0x48>)
 800054c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_DMA_Init+0x48>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	639a      	str	r2, [r3, #56]	; 0x38
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_DMA_Init+0x48>)
 8000558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2009      	movs	r0, #9
 8000568:	f001 fcc2 	bl	8001ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800056c:	2009      	movs	r0, #9
 800056e:	f001 fcd4 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	200a      	movs	r0, #10
 8000578:	f001 fcba 	bl	8001ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800057c:	200a      	movs	r0, #10
 800057e:	f001 fccc 	bl	8001f1a <HAL_NVIC_EnableIRQ>

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_GPIO_Init+0x40>)
 8000598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_GPIO_Init+0x40>)
 800059c:	2102      	movs	r1, #2
 800059e:	430a      	orrs	r2, r1
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_GPIO_Init+0x40>)
 80005a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a6:	2202      	movs	r2, #2
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_GPIO_Init+0x40>)
 80005b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_GPIO_Init+0x40>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MX_GPIO_Init+0x40>)
 80005bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t value_adc=0;
uint8_t data[2];
uint32_t val_cnt=1;
uint32_t values[200]={0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d113      	bne.n	800060e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005e6:	2301      	movs	r3, #1
 80005e8:	425a      	negs	r2, r3
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 ff20 	bl	8001434 <HAL_ADC_PollForConversion>
		value_adc = HAL_ADC_GetValue(&hadc1);
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 ffb0 	bl	800155c <HAL_ADC_GetValue>
 80005fc:	0002      	movs	r2, r0
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000600:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1,(uint8_t*)&value_adc,sizeof(uint32_t));
 8000602:	4907      	ldr	r1, [pc, #28]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000606:	2204      	movs	r2, #4
 8000608:	0018      	movs	r0, r3
 800060a:	f003 fc01 	bl	8003e10 <HAL_UART_Transmit_DMA>
//			usartSend((uint8_t *)values,200*sizeof(uint32_t));
//			memset(values,0,sizeof(values));
//
//		}
	}
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40000400 	.word	0x40000400
 800061c:	20000028 	.word	0x20000028
 8000620:	2000008c 	.word	0x2000008c
 8000624:	200000dc 	.word	0x200000dc

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fb2e 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f81c 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ffac 	bl	8000590 <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f7ff ff84 	bl	8000544 <MX_DMA_Init>
  MX_ADC1_Init();
 800063c:	f7ff fed6 	bl	80003ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f966 	bl	8000910 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000644:	f000 f8e8 	bl	8000818 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <main+0x3c>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 face 	bl	8001bec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <main+0x3c>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fea0 	bl	8001398 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <main+0x40>)
 800065a:	0018      	movs	r0, r3
 800065c:	f002 ff8a 	bl	8003574 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x38>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000028 	.word	0x20000028
 8000668:	20000090 	.word	0x20000090

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b093      	sub	sp, #76	; 0x4c
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2414      	movs	r4, #20
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2334      	movs	r3, #52	; 0x34
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f004 ffed 	bl	800565c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	0018      	movs	r0, r3
 8000686:	2310      	movs	r3, #16
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f004 ffe6 	bl	800565c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	0018      	movs	r0, r3
 8000696:	f002 f8e9 	bl	800286c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0052      	lsls	r2, r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a8:	0021      	movs	r1, r4
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2208      	movs	r2, #8
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	0292      	lsls	r2, r2, #10
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0592      	lsls	r2, r2, #22
 80006dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 f90f 	bl	8002904 <HAL_RCC_OscConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ea:	f000 f819 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2202      	movs	r2, #2
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	0018      	movs	r0, r3
 800070c:	f002 fc0a 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000714:	f000 f804 	bl	8000720 <Error_Handler>
  }
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b013      	add	sp, #76	; 0x4c
 800071e:	bd90      	pop	{r4, r7, pc}

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x44>)
 8000734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_MspInit+0x44>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	641a      	str	r2, [r3, #64]	; 0x40
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x44>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_MspInit+0x44>)
 800074c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_MspInit+0x44>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	0549      	lsls	r1, r1, #21
 8000754:	430a      	orrs	r2, r1
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_MspInit+0x44>)
 800075a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	055b      	lsls	r3, r3, #21
 8000760:	4013      	ands	r3, r2
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 fae2 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <DMA1_Channel1_IRQHandler+0x14>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fdae 	bl	800230c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000170 	.word	0x20000170

080007bc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fda2 	bl	800230c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	200001cc 	.word	0x200001cc

080007d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <TIM3_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 ff18 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000090 	.word	0x20000090

080007ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_IRQHandler_myself(&huart1);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <USART1_IRQHandler+0x1c>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 f9e4 	bl	8000bc0 <USART_IRQHandler_myself>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <USART1_IRQHandler+0x1c>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f003 fc86 	bl	800410c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	200000dc 	.word	0x200000dc

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	2310      	movs	r3, #16
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	0018      	movs	r0, r3
 8000824:	2310      	movs	r3, #16
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f004 ff17 	bl	800565c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	0018      	movs	r0, r3
 8000832:	230c      	movs	r3, #12
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f004 ff10 	bl	800565c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM3_Init+0xa0>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_TIM3_Init+0xa4>)
 8000840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_TIM3_Init+0xa0>)
 8000844:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MX_TIM3_Init+0xa8>)
 8000846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM3_Init+0xa0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM3_Init+0xa0>)
 8000850:	2209      	movs	r2, #9
 8000852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_TIM3_Init+0xa0>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_TIM3_Init+0xa0>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_TIM3_Init+0xa0>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fe2e 	bl	80034c4 <HAL_TIM_Base_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800086c:	f7ff ff58 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	2110      	movs	r1, #16
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	0152      	lsls	r2, r2, #5
 8000878:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800087a:	187a      	adds	r2, r7, r1
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_TIM3_Init+0xa0>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f002 fff7 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800088a:	f7ff ff49 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_TIM3_Init+0xa0>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f003 f9e5 	bl	8003c70 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008aa:	f7ff ff39 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b008      	add	sp, #32
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000090 	.word	0x20000090
 80008bc:	40000400 	.word	0x40000400
 80008c0:	000018ff 	.word	0x000018ff

080008c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_TIM_Base_MspInit+0x44>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d113      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f001 fafc 	bl	8001ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f001 fb0e 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40000400 	.word	0x40000400
 800090c:	40021000 	.word	0x40021000

08000910 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000916:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <MX_USART1_UART_Init+0xb4>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800091c:	22e1      	movs	r2, #225	; 0xe1
 800091e:	0252      	lsls	r2, r2, #9
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800095a:	0018      	movs	r0, r3
 800095c:	f003 fa02 	bl	8003d64 <HAL_UART_Init>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f7ff fedc 	bl	8000720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800096a:	2100      	movs	r1, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f004 fd95 	bl	800549c <HAL_UARTEx_SetTxFifoThreshold>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f7ff fed3 	bl	8000720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800097c:	2100      	movs	r1, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f004 fdcc 	bl	800551c <HAL_UARTEx_SetRxFifoThreshold>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f7ff feca 	bl	8000720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800098e:	0018      	movs	r0, r3
 8000990:	f004 fd4a 	bl	8005428 <HAL_UARTEx_DisableFifoMode>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f7ff fec2 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //HAL_UART_Receive_IT(& huart1,(uint8_t  *) byteRX, SIZE_ONCE);	//串口开启接收中断
  	__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);						//使能串口空闲中断
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2110      	movs	r1, #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]
  	HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);				//DMA 接收地址设置,与缓存大小
 80009ac:	23fa      	movs	r3, #250	; 0xfa
 80009ae:	005a      	lsls	r2, r3, #1
 80009b0:	4905      	ldr	r1, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0xb8>)
 80009b2:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <MX_USART1_UART_Init+0xb0>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 fabd 	bl	8003f34 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000dc 	.word	0x200000dc
 80009c4:	40013800 	.word	0x40013800
 80009c8:	2000041c 	.word	0x2000041c

080009cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b091      	sub	sp, #68	; 0x44
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	232c      	movs	r3, #44	; 0x2c
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f004 fe3c 	bl	800565c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	2414      	movs	r4, #20
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2318      	movs	r3, #24
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f004 fe34 	bl	800565c <memset>
  if(uartHandle->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a51      	ldr	r2, [pc, #324]	; (8000b40 <HAL_UART_MspInit+0x174>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d000      	beq.n	8000a00 <HAL_UART_MspInit+0x34>
 80009fe:	e09a      	b.n	8000b36 <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 fc32 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000a18:	f7ff fe82 	bl	8000720 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1c:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a20:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	01c9      	lsls	r1, r1, #7
 8000a26:	430a      	orrs	r2, r1
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2a:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3c:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a3e:	2102      	movs	r1, #2
 8000a40:	430a      	orrs	r2, r1
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a48:	2202      	movs	r2, #2
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a50:	212c      	movs	r1, #44	; 0x2c
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	22c0      	movs	r2, #192	; 0xc0
 8000a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	4a35      	ldr	r2, [pc, #212]	; (8000b48 <HAL_UART_MspInit+0x17c>)
 8000a74:	0019      	movs	r1, r3
 8000a76:	0010      	movs	r0, r2
 8000a78:	f001 fd94 	bl	80025a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a7e:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <HAL_UART_MspInit+0x184>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a84:	2233      	movs	r2, #51	; 0x33
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a8a:	2210      	movs	r2, #16
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fa4d 	bl	8001f54 <HAL_DMA_Init>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000abe:	f7ff fe2f 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000ac6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <HAL_UART_MspInit+0x18c>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000ad6:	2232      	movs	r2, #50	; 0x32
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 fa22 	bl	8001f54 <HAL_DMA_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8000b14:	f7ff fe04 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000b1e:	505a      	str	r2, [r3, r1]
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_UART_MspInit+0x188>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201b      	movs	r0, #27
 8000b2c:	f001 f9e0 	bl	8001ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b30:	201b      	movs	r0, #27
 8000b32:	f001 f9f2 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b011      	add	sp, #68	; 0x44
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	50000400 	.word	0x50000400
 8000b4c:	20000170 	.word	0x20000170
 8000b50:	40020008 	.word	0x40020008
 8000b54:	200001cc 	.word	0x200001cc
 8000b58:	4002001c 	.word	0x4002001c

08000b5c <usartSend>:
		HAL_UART_Transmit_DMA(&huart1,(uint8_t *)&ch,1);		///<DMA串口发送数据
	#endif
	    return ch;
}

void usartSend(void* dateAdr,	uint16_t size){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	000a      	movs	r2, r1
 8000b66:	1cbb      	adds	r3, r7, #2
 8000b68:	801a      	strh	r2, [r3, #0]
	size=size>TX1_Size	?	TX1_Size	:	size;
 8000b6a:	1cba      	adds	r2, r7, #2
 8000b6c:	1cbb      	adds	r3, r7, #2
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b298      	uxth	r0, r3
 8000b72:	21fa      	movs	r1, #250	; 0xfa
 8000b74:	0049      	lsls	r1, r1, #1
 8000b76:	4288      	cmp	r0, r1
 8000b78:	d901      	bls.n	8000b7e <usartSend+0x22>
 8000b7a:	23fa      	movs	r3, #250	; 0xfa
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	8013      	strh	r3, [r2, #0]
	memcpy(buffer_TX1,dateAdr,(size>TX1_Size?TX1_Size:size));			//复制发送数据到发送数组的内存
 8000b80:	1cbb      	adds	r3, r7, #2
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b299      	uxth	r1, r3
 8000b86:	22fa      	movs	r2, #250	; 0xfa
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	4291      	cmp	r1, r2
 8000b8c:	d901      	bls.n	8000b92 <usartSend+0x36>
 8000b8e:	23fa      	movs	r3, #250	; 0xfa
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	001a      	movs	r2, r3
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <usartSend+0x5c>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f004 fd8a 	bl	80056b4 <memcpy>
	HAL_UART_Transmit_DMA(&huart1,buffer_TX1,size);
 8000ba0:	1cbb      	adds	r3, r7, #2
 8000ba2:	881a      	ldrh	r2, [r3, #0]
 8000ba4:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <usartSend+0x5c>)
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <usartSend+0x60>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 f931 	bl	8003e10 <HAL_UART_Transmit_DMA>
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000228 	.word	0x20000228
 8000bbc:	200000dc 	.word	0x200000dc

08000bc0 <USART_IRQHandler_myself>:

//stm32f4xx_it.c里面void USART2_IRQHandler(void);中加入该函数调用放在清除中断标志函数之上
void USART_IRQHandler_myself(UART_HandleTypeDef *huart){			//接收完成中断函数
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_FLAG(huart,UART_FLAG_IDLE)!=RESET){			//帧接收中断（空闲中断)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	2210      	movs	r2, #16
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b10      	cmp	r3, #16
 8000bd4:	d124      	bne.n	8000c20 <USART_IRQHandler_myself+0x60>
				__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2210      	movs	r2, #16
 8000bdc:	621a      	str	r2, [r3, #32]
				HAL_UART_DMAStop(huart);														//关闭DMA，防止处理期间有数据
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f003 f9fe 	bl	8003fe2 <HAL_UART_DMAStop>
				if(huart->Instance==USART1){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <USART_IRQHandler_myself+0x68>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d117      	bne.n	8000c20 <USART_IRQHandler_myself+0x60>
					Rx1_Count=RX1_Size-hdma_usart1_rx.Instance->CNDTR;			//接收数据个数
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <USART_IRQHandler_myself+0x6c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	22fa      	movs	r2, #250	; 0xfa
 8000bfa:	0052      	lsls	r2, r2, #1
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <USART_IRQHandler_myself+0x70>)
 8000c02:	801a      	strh	r2, [r3, #0]
					/*********************************start接收完成处理代码************************/
					usartSend(buffer_RX1,Rx1_Count);
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <USART_IRQHandler_myself+0x70>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <USART_IRQHandler_myself+0x74>)
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ffa5 	bl	8000b5c <usartSend>
					/***********************************end****************************************/
					HAL_UART_Receive_DMA(huart,buffer_RX1,RX1_Size);			//开启DMA继续接受数据
 8000c12:	23fa      	movs	r3, #250	; 0xfa
 8000c14:	005a      	lsls	r2, r3, #1
 8000c16:	4907      	ldr	r1, [pc, #28]	; (8000c34 <USART_IRQHandler_myself+0x74>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f003 f98a 	bl	8003f34 <HAL_UART_Receive_DMA>
				}
	}
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	200001cc 	.word	0x200001cc
 8000c30:	20000610 	.word	0x20000610
 8000c34:	2000041c 	.word	0x2000041c

08000c38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c3c:	f7ff fde6 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c66:	f004 fd01 	bl	800566c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c6a:	f7ff fcdd 	bl	8000628 <main>

08000c6e <LoopForever>:

LoopForever:
  b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   r0, =_estack
 8000c70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	20000618 	.word	0x20000618

08000c88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0049      	lsls	r1, r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 f810 	bl	8000ccc <HAL_InitTick>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e001      	b.n	8000cbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fd38 	bl	800072c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_InitTick+0x88>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d02b      	beq.n	8000d3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_InitTick+0x8c>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_InitTick+0x88>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	23fa      	movs	r3, #250	; 0xfa
 8000cf0:	0098      	lsls	r0, r3, #2
 8000cf2:	f7ff fa05 	bl	8000100 <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f7ff fa00 	bl	8000100 <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f001 f919 	bl	8001f3a <HAL_SYSTICK_Config>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d112      	bne.n	8000d32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d80a      	bhi.n	8000d28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f8e8 	bl	8001ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_InitTick+0x90>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e00d      	b.n	8000d44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e008      	b.n	8000d44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	230f      	movs	r3, #15
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e003      	b.n	8000d44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b005      	add	sp, #20
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x1c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	001a      	movs	r2, r3
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x20>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	18d2      	adds	r2, r2, r3
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_IncTick+0x20>)
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000614 	.word	0x20000614

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <HAL_GetTick+0x10>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000614 	.word	0x20000614

08000d98 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000da8:	401a      	ands	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fe3fffff 	.word	0xfe3fffff

08000dc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	23e0      	movs	r3, #224	; 0xe0
 8000dce:	045b      	lsls	r3, r3, #17
 8000dd0:	4013      	ands	r3, r2
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	2104      	movs	r1, #4
 8000dee:	400a      	ands	r2, r1
 8000df0:	2107      	movs	r1, #7
 8000df2:	4091      	lsls	r1, r2
 8000df4:	000a      	movs	r2, r1
 8000df6:	43d2      	mvns	r2, r2
 8000df8:	401a      	ands	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	400b      	ands	r3, r1
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4099      	lsls	r1, r3
 8000e04:	000b      	movs	r3, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	2104      	movs	r1, #4
 8000e26:	400a      	ands	r2, r1
 8000e28:	2107      	movs	r1, #7
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2104      	movs	r1, #4
 8000e34:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	0013      	movs	r3, r2
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4013      	ands	r3, r2
 8000e54:	d101      	bne.n	8000e5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	211f      	movs	r1, #31
 8000e78:	400a      	ands	r2, r1
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	201f      	movs	r0, #31
 8000e90:	4003      	ands	r3, r0
 8000e92:	4099      	lsls	r1, r3
 8000e94:	000b      	movs	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b004      	add	sp, #16
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	035b      	lsls	r3, r3, #13
 8000eb6:	0b5b      	lsrs	r3, r3, #13
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	0352      	lsls	r2, r2, #13
 8000ed8:	0b52      	lsrs	r2, r2, #13
 8000eda:	43d2      	mvns	r2, r2
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	4904      	ldr	r1, [pc, #16]	; (8000f20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f0e:	400b      	ands	r3, r1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	07ffff00 	.word	0x07ffff00

08000f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0552      	lsls	r2, r2, #21
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	6fffffe8 	.word	0x6fffffe8

08000f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	055b      	lsls	r3, r3, #21
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d101      	bne.n	8000f6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <LL_ADC_Enable+0x20>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	2201      	movs	r2, #1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	7fffffe8 	.word	0x7fffffe8

08000f98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <LL_ADC_Disable+0x20>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2202      	movs	r2, #2
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	7fffffe8 	.word	0x7fffffe8

08000fbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <LL_ADC_IsEnabled+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_ADC_IsEnabled+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_IsDisableOngoing+0x18>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_IsDisableOngoing+0x1a>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <LL_ADC_REG_StartConversion+0x20>)
 800100e:	4013      	ands	r3, r2
 8001010:	2204      	movs	r2, #4
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	7fffffe8 	.word	0x7fffffe8

08001024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2204      	movs	r2, #4
 8001032:	4013      	ands	r3, r2
 8001034:	2b04      	cmp	r3, #4
 8001036:	d101      	bne.n	800103c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	231f      	movs	r3, #31
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e17f      	b.n	800136e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10a      	bne.n	800108c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fa1f 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2254      	movs	r2, #84	; 0x54
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff5b 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d115      	bne.n	80010c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff40 	bl	8000f24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a4:	4bb4      	ldr	r3, [pc, #720]	; (8001378 <HAL_ADC_Init+0x330>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	49b4      	ldr	r1, [pc, #720]	; (800137c <HAL_ADC_Init+0x334>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff f828 	bl	8000100 <__udivsi3>
 80010b0:	0003      	movs	r3, r0
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ff3e 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d10f      	bne.n	80010f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	2210      	movs	r2, #16
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e4:	2201      	movs	r2, #1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010ec:	231f      	movs	r3, #31
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff93 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80010fe:	0003      	movs	r3, r0
 8001100:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	2210      	movs	r2, #16
 8001108:	4013      	ands	r3, r2
 800110a:	d000      	beq.n	800110e <HAL_ADC_Init+0xc6>
 800110c:	e122      	b.n	8001354 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d000      	beq.n	8001116 <HAL_ADC_Init+0xce>
 8001114:	e11e      	b.n	8001354 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a99      	ldr	r2, [pc, #612]	; (8001380 <HAL_ADC_Init+0x338>)
 800111c:	4013      	ands	r3, r2
 800111e:	2202      	movs	r2, #2
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff46 	bl	8000fbc <LL_ADC_IsEnabled>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d000      	beq.n	8001136 <HAL_ADC_Init+0xee>
 8001134:	e0ad      	b.n	8001292 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7e1b      	ldrb	r3, [r3, #24]
 800113e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001140:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7e5b      	ldrb	r3, [r3, #25]
 8001146:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001148:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e9b      	ldrb	r3, [r3, #26]
 800114e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001150:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <HAL_ADC_Init+0x118>
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	015b      	lsls	r3, r3, #5
 800115e:	e000      	b.n	8001162 <HAL_ADC_Init+0x11a>
 8001160:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001162:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001168:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da04      	bge.n	800117c <HAL_ADC_Init+0x134>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	e001      	b.n	8001180 <HAL_ADC_Init+0x138>
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001180:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	212c      	movs	r1, #44	; 0x2c
 8001186:	5c5b      	ldrb	r3, [r3, r1]
 8001188:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800118a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2220      	movs	r2, #32
 8001196:	5c9b      	ldrb	r3, [r3, r2]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d115      	bne.n	80011c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0252      	lsls	r2, r2, #9
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	e00b      	b.n	80011c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	2220      	movs	r2, #32
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	2201      	movs	r2, #1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00a      	beq.n	80011e6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d4:	23e0      	movs	r3, #224	; 0xe0
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011de:	4313      	orrs	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a65      	ldr	r2, [pc, #404]	; (8001384 <HAL_ADC_Init+0x33c>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	0f9b      	lsrs	r3, r3, #30
 8001202:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001208:	4313      	orrs	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	223c      	movs	r2, #60	; 0x3c
 8001214:	5c9b      	ldrb	r3, [r3, r2]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d111      	bne.n	800123e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	0f9b      	lsrs	r3, r3, #30
 8001220:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001226:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800122c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001232:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4313      	orrs	r3, r2
 8001238:	2201      	movs	r2, #1
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_ADC_Init+0x340>)
 8001246:	4013      	ands	r3, r2
 8001248:	0019      	movs	r1, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	429a      	cmp	r2, r3
 800125e:	d018      	beq.n	8001292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	429a      	cmp	r2, r3
 800126a:	d012      	beq.n	8001292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	061b      	lsls	r3, r3, #24
 8001274:	429a      	cmp	r2, r3
 8001276:	d00c      	beq.n	8001292 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_ADC_Init+0x344>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a44      	ldr	r2, [pc, #272]	; (8001390 <HAL_ADC_Init+0x348>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	23f0      	movs	r3, #240	; 0xf0
 8001288:	039b      	lsls	r3, r3, #14
 800128a:	401a      	ands	r2, r3
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_ADC_Init+0x344>)
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f7ff fd9c 	bl	8000dda <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	493a      	ldr	r1, [pc, #232]	; (8001394 <HAL_ADC_Init+0x34c>)
 80012ac:	001a      	movs	r2, r3
 80012ae:	f7ff fd94 	bl	8000dda <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2110      	movs	r1, #16
 80012c6:	4249      	negs	r1, r1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
 80012cc:	e018      	b.n	8001300 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	039b      	lsls	r3, r3, #14
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d112      	bne.n	8001300 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	221c      	movs	r2, #28
 80012ea:	4013      	ands	r3, r2
 80012ec:	2210      	movs	r2, #16
 80012ee:	4252      	negs	r2, r2
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0011      	movs	r1, r2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2100      	movs	r1, #0
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fd84 	bl	8000e14 <LL_ADC_GetSamplingTimeCommonChannels>
 800130c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001312:	429a      	cmp	r2, r3
 8001314:	d10b      	bne.n	800132e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	2203      	movs	r2, #3
 8001322:	4393      	bics	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800132c:	e01c      	b.n	8001368 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	2212      	movs	r2, #18
 8001334:	4393      	bics	r3, r2
 8001336:	2210      	movs	r2, #16
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	2201      	movs	r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800134a:	231f      	movs	r3, #31
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001352:	e009      	b.n	8001368 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	2210      	movs	r2, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001360:	231f      	movs	r3, #31
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001368:	231f      	movs	r3, #31
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b008      	add	sp, #32
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000000 	.word	0x20000000
 800137c:	00030d40 	.word	0x00030d40
 8001380:	fffffefd 	.word	0xfffffefd
 8001384:	fffe0201 	.word	0xfffe0201
 8001388:	1ffffc02 	.word	0x1ffffc02
 800138c:	40012708 	.word	0x40012708
 8001390:	ffc3ffff 	.word	0xffc3ffff
 8001394:	07ffff04 	.word	0x07ffff04

08001398 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fe3d 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d135      	bne.n	800141a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2254      	movs	r2, #84	; 0x54
 80013b2:	5c9b      	ldrb	r3, [r3, r2]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_Start+0x24>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e035      	b.n	8001428 <HAL_ADC_Start+0x90>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2254      	movs	r2, #84	; 0x54
 80013c0:	2101      	movs	r1, #1
 80013c2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013c4:	250f      	movs	r5, #15
 80013c6:	197c      	adds	r4, r7, r5
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 faaa 	bl	8001924 <ADC_Enable>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d119      	bne.n	8001410 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_ADC_Start+0x98>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	221c      	movs	r2, #28
 80013fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2254      	movs	r2, #84	; 0x54
 8001400:	2100      	movs	r1, #0
 8001402:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff fdf9 	bl	8001000 <LL_ADC_REG_StartConversion>
 800140e:	e008      	b.n	8001422 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2254      	movs	r2, #84	; 0x54
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
 8001418:	e003      	b.n	8001422 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2202      	movs	r2, #2
 8001420:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	fffff0fe 	.word	0xfffff0fe

08001434 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d102      	bne.n	800144c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001446:	2308      	movs	r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e00f      	b.n	800146c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	2220      	movs	r2, #32
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e072      	b.n	800154e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001468:	2304      	movs	r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800146c:	f7ff fc8a 	bl	8000d84 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001474:	e01f      	b.n	80014b6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	d01c      	beq.n	80014b6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800147c:	f7ff fc82 	bl	8000d84 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d302      	bcc.n	8001492 <HAL_ADC_PollForConversion+0x5e>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	d10b      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	2204      	movs	r2, #4
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2254      	movs	r2, #84	; 0x54
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e04b      	b.n	800154e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	d0d9      	beq.n	8001476 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fcb4 	bl	8000e42 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d02e      	beq.n	800153c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e9b      	ldrb	r3, [r3, #26]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d12a      	bne.n	800153c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2208      	movs	r2, #8
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d123      	bne.n	800153c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff fd93 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d110      	bne.n	8001524 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	210c      	movs	r1, #12
 800150e:	438a      	bics	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_ADC_PollForConversion+0x124>)
 8001518:	4013      	ands	r3, r2
 800151a:	2201      	movs	r2, #1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58
 8001522:	e00b      	b.n	800153c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	2220      	movs	r2, #32
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2201      	movs	r2, #1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	220c      	movs	r2, #12
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b004      	add	sp, #16
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	fffffefe 	.word	0xfffffefe

0800155c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157e:	2317      	movs	r3, #23
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2254      	movs	r2, #84	; 0x54
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x24>
 8001594:	2302      	movs	r3, #2
 8001596:	e1c0      	b.n	800191a <HAL_ADC_ConfigChannel+0x3a6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2254      	movs	r2, #84	; 0x54
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff fd3d 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d000      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x3c>
 80015ae:	e1a3      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d100      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x46>
 80015b8:	e143      	b.n	8001842 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d004      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ca:	4ac1      	ldr	r2, [pc, #772]	; (80018d0 <HAL_ADC_ConfigChannel+0x35c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0019      	movs	r1, r3
 80015da:	0010      	movs	r0, r2
 80015dc:	f7ff fc62 	bl	8000ea4 <LL_ADC_REG_SetSequencerChAdd>
 80015e0:	e0c9      	b.n	8001776 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	211f      	movs	r1, #31
 80015ec:	400b      	ands	r3, r1
 80015ee:	210f      	movs	r1, #15
 80015f0:	4099      	lsls	r1, r3
 80015f2:	000b      	movs	r3, r1
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	035b      	lsls	r3, r3, #13
 8001600:	0b5b      	lsrs	r3, r3, #13
 8001602:	d105      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x9c>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0e9b      	lsrs	r3, r3, #26
 800160a:	221f      	movs	r2, #31
 800160c:	4013      	ands	r3, r2
 800160e:	e098      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	d000      	beq.n	800161c <HAL_ADC_ConfigChannel+0xa8>
 800161a:	e091      	b.n	8001740 <HAL_ADC_ConfigChannel+0x1cc>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d000      	beq.n	8001628 <HAL_ADC_ConfigChannel+0xb4>
 8001626:	e089      	b.n	800173c <HAL_ADC_ConfigChannel+0x1c8>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2204      	movs	r2, #4
 800162e:	4013      	ands	r3, r2
 8001630:	d000      	beq.n	8001634 <HAL_ADC_ConfigChannel+0xc0>
 8001632:	e081      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1c4>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2208      	movs	r2, #8
 800163a:	4013      	ands	r3, r2
 800163c:	d000      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xcc>
 800163e:	e079      	b.n	8001734 <HAL_ADC_ConfigChannel+0x1c0>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d000      	beq.n	800164c <HAL_ADC_ConfigChannel+0xd8>
 800164a:	e071      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1bc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2220      	movs	r2, #32
 8001652:	4013      	ands	r3, r2
 8001654:	d000      	beq.n	8001658 <HAL_ADC_ConfigChannel+0xe4>
 8001656:	e069      	b.n	800172c <HAL_ADC_ConfigChannel+0x1b8>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	4013      	ands	r3, r2
 8001660:	d000      	beq.n	8001664 <HAL_ADC_ConfigChannel+0xf0>
 8001662:	e061      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1b4>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	4013      	ands	r3, r2
 800166c:	d000      	beq.n	8001670 <HAL_ADC_ConfigChannel+0xfc>
 800166e:	e059      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1b0>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d151      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1ac>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d149      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1a8>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4013      	ands	r3, r2
 8001692:	d141      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1a4>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d139      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1a0>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	4013      	ands	r3, r2
 80016aa:	d131      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x19c>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	019b      	lsls	r3, r3, #6
 80016b4:	4013      	ands	r3, r2
 80016b6:	d129      	bne.n	800170c <HAL_ADC_ConfigChannel+0x198>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	01db      	lsls	r3, r3, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	d121      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x194>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4013      	ands	r3, r2
 80016ce:	d119      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x190>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	4013      	ands	r3, r2
 80016da:	d111      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x18c>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x188>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	02db      	lsls	r3, r3, #11
 80016f0:	4013      	ands	r3, r2
 80016f2:	d001      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x184>
 80016f4:	2312      	movs	r3, #18
 80016f6:	e024      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 80016f8:	2300      	movs	r3, #0
 80016fa:	e022      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 80016fc:	2311      	movs	r3, #17
 80016fe:	e020      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001700:	2310      	movs	r3, #16
 8001702:	e01e      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001704:	230f      	movs	r3, #15
 8001706:	e01c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001708:	230e      	movs	r3, #14
 800170a:	e01a      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 800170c:	230d      	movs	r3, #13
 800170e:	e018      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001710:	230c      	movs	r3, #12
 8001712:	e016      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001714:	230b      	movs	r3, #11
 8001716:	e014      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001718:	230a      	movs	r3, #10
 800171a:	e012      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 800171c:	2309      	movs	r3, #9
 800171e:	e010      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001720:	2308      	movs	r3, #8
 8001722:	e00e      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001724:	2307      	movs	r3, #7
 8001726:	e00c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001728:	2306      	movs	r3, #6
 800172a:	e00a      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 800172c:	2305      	movs	r3, #5
 800172e:	e008      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001730:	2304      	movs	r3, #4
 8001732:	e006      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001734:	2303      	movs	r3, #3
 8001736:	e004      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001738:	2302      	movs	r3, #2
 800173a:	e002      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1ce>
 8001740:	2300      	movs	r3, #0
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	6852      	ldr	r2, [r2, #4]
 8001746:	201f      	movs	r0, #31
 8001748:	4002      	ands	r2, r0
 800174a:	4093      	lsls	r3, r2
 800174c:	000a      	movs	r2, r1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	429a      	cmp	r2, r3
 8001762:	d808      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	001a      	movs	r2, r3
 8001772:	f7ff fb77 	bl	8000e64 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	001a      	movs	r2, r3
 8001784:	f7ff fbb2 	bl	8000eec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db00      	blt.n	8001792 <HAL_ADC_ConfigChannel+0x21e>
 8001790:	e0bc      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001792:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fb13 	bl	8000dc0 <LL_ADC_GetCommonPathInternalCh>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a4d      	ldr	r2, [pc, #308]	; (80018d8 <HAL_ADC_ConfigChannel+0x364>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d122      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017b0:	d11d      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	4313      	orrs	r3, r2
 80017ba:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 80017bc:	0019      	movs	r1, r3
 80017be:	0010      	movs	r0, r2
 80017c0:	f7ff faea 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_ADC_ConfigChannel+0x368>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4945      	ldr	r1, [pc, #276]	; (80018e0 <HAL_ADC_ConfigChannel+0x36c>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7fe fc98 	bl	8000100 <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	0013      	movs	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	189b      	adds	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017de:	e002      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017ec:	e08e      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3c      	ldr	r2, [pc, #240]	; (80018e4 <HAL_ADC_ConfigChannel+0x370>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d10e      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	045b      	lsls	r3, r3, #17
 80017fe:	4013      	ands	r3, r2
 8001800:	d109      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0452      	lsls	r2, r2, #17
 8001808:	4313      	orrs	r3, r2
 800180a:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 800180c:	0019      	movs	r1, r3
 800180e:	0010      	movs	r0, r2
 8001810:	f7ff fac2 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
 8001814:	e07a      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_ADC_ConfigChannel+0x374>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d000      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x2ae>
 8001820:	e074      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	03db      	lsls	r3, r3, #15
 8001828:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800182a:	d000      	beq.n	800182e <HAL_ADC_ConfigChannel+0x2ba>
 800182c:	e06e      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	03d2      	lsls	r2, r2, #15
 8001834:	4313      	orrs	r3, r2
 8001836:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 8001838:	0019      	movs	r1, r3
 800183a:	0010      	movs	r0, r2
 800183c:	f7ff faac 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
 8001840:	e064      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	429a      	cmp	r2, r3
 800184c:	d004      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_ADC_ConfigChannel+0x35c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d107      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0019      	movs	r1, r3
 8001862:	0010      	movs	r0, r2
 8001864:	f7ff fb2f 	bl	8000ec6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da4d      	bge.n	800190c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff faa4 	bl	8000dc0 <LL_ADC_GetCommonPathInternalCh>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_ADC_ConfigChannel+0x364>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d108      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_ADC_ConfigChannel+0x378>)
 800188a:	4013      	ands	r3, r2
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 800188e:	0019      	movs	r1, r3
 8001890:	0010      	movs	r0, r2
 8001892:	f7ff fa81 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
 8001896:	e039      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_ADC_ConfigChannel+0x370>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d108      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_ConfigChannel+0x37c>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 80018aa:	0019      	movs	r1, r3
 80018ac:	0010      	movs	r0, r2
 80018ae:	f7ff fa73 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
 80018b2:	e02b      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_ADC_ConfigChannel+0x374>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d126      	bne.n	800190c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_ADC_ConfigChannel+0x380>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_ADC_ConfigChannel+0x360>)
 80018c6:	0019      	movs	r1, r3
 80018c8:	0010      	movs	r0, r2
 80018ca:	f7ff fa65 	bl	8000d98 <LL_ADC_SetCommonPathInternalCh>
 80018ce:	e01d      	b.n	800190c <HAL_ADC_ConfigChannel+0x398>
 80018d0:	80000004 	.word	0x80000004
 80018d4:	40012708 	.word	0x40012708
 80018d8:	b0001000 	.word	0xb0001000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	00030d40 	.word	0x00030d40
 80018e4:	b8004000 	.word	0xb8004000
 80018e8:	b4002000 	.word	0xb4002000
 80018ec:	ff7fffff 	.word	0xff7fffff
 80018f0:	feffffff 	.word	0xfeffffff
 80018f4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	2220      	movs	r2, #32
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001904:	2317      	movs	r3, #23
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2254      	movs	r2, #84	; 0x54
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001914:	2317      	movs	r3, #23
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b006      	add	sp, #24
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)

08001924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fb41 	bl	8000fbc <LL_ADC_IsEnabled>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d000      	beq.n	8001940 <ADC_Enable+0x1c>
 800193e:	e069      	b.n	8001a14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <ADC_Enable+0xfc>)
 8001948:	4013      	ands	r3, r2
 800194a:	d00d      	beq.n	8001968 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	2210      	movs	r2, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2201      	movs	r2, #1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e056      	b.n	8001a16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fb01 	bl	8000f74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <ADC_Enable+0x100>)
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fa23 	bl	8000dc0 <LL_ADC_GetCommonPathInternalCh>
 800197a:	0002      	movs	r2, r0
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	4013      	ands	r3, r2
 8001982:	d00f      	beq.n	80019a4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <ADC_Enable+0x104>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4928      	ldr	r1, [pc, #160]	; (8001a2c <ADC_Enable+0x108>)
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fbb8 	bl	8000100 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001994:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001996:	e002      	b.n	800199e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3b01      	subs	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e5b      	ldrb	r3, [r3, #25]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d033      	beq.n	8001a14 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80019ac:	f7ff f9ea 	bl	8000d84 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019b4:	e027      	b.n	8001a06 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fafe 	bl	8000fbc <LL_ADC_IsEnabled>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d104      	bne.n	80019ce <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fad3 	bl	8000f74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ce:	f7ff f9d9 	bl	8000d84 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d914      	bls.n	8001a06 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d00d      	beq.n	8001a06 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	2210      	movs	r2, #16
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2201      	movs	r2, #1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e007      	b.n	8001a16 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d1d0      	bne.n	80019b6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	80000017 	.word	0x80000017
 8001a24:	40012708 	.word	0x40012708
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	00030d40 	.word	0x00030d40

08001a30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff face 	bl	8000fde <LL_ADC_IsDisableOngoing>
 8001a42:	0003      	movs	r3, r0
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff fab6 	bl	8000fbc <LL_ADC_IsEnabled>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d046      	beq.n	8001ae2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d143      	bne.n	8001ae2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2205      	movs	r2, #5
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10d      	bne.n	8001a84 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff fa93 	bl	8000f98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2203      	movs	r2, #3
 8001a78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff f983 	bl	8000d84 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a82:	e028      	b.n	8001ad6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	2210      	movs	r2, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2201      	movs	r2, #1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e021      	b.n	8001ae4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aa0:	f7ff f970 	bl	8000d84 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d913      	bls.n	8001ad6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	2210      	movs	r2, #16
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2201      	movs	r2, #1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e006      	b.n	8001ae4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1de      	bne.n	8001aa0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}

08001aec <LL_ADC_SetCalibrationFactor>:
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	22b4      	movs	r2, #180	; 0xb4
 8001afa:	589b      	ldr	r3, [r3, r2]
 8001afc:	227f      	movs	r2, #127	; 0x7f
 8001afe:	4393      	bics	r3, r2
 8001b00:	001a      	movs	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	21b4      	movs	r1, #180	; 0xb4
 8001b0a:	505a      	str	r2, [r3, r1]
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LL_ADC_GetCalibrationFactor>:
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	22b4      	movs	r2, #180	; 0xb4
 8001b20:	589b      	ldr	r3, [r3, r2]
 8001b22:	227f      	movs	r2, #127	; 0x7f
 8001b24:	4013      	ands	r3, r2
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <LL_ADC_Enable>:
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <LL_ADC_Enable+0x20>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2201      	movs	r2, #1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	7fffffe8 	.word	0x7fffffe8

08001b54 <LL_ADC_Disable>:
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <LL_ADC_Disable+0x20>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	2202      	movs	r2, #2
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	7fffffe8 	.word	0x7fffffe8

08001b78 <LL_ADC_IsEnabled>:
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_IsEnabled+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_IsEnabled+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <LL_ADC_StartCalibration>:
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <LL_ADC_StartCalibration+0x24>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0612      	lsls	r2, r2, #24
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	7fffffe8 	.word	0x7fffffe8

08001bc4 <LL_ADC_IsCalibrationOnGoing>:
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0fdb      	lsrs	r3, r3, #31
 8001bd2:	07da      	lsls	r2, r3, #31
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	061b      	lsls	r3, r3, #24
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2254      	movs	r2, #84	; 0x54
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ADCEx_Calibration_Start+0x1e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e0ba      	b.n	8001d80 <HAL_ADCEx_Calibration_Start+0x194>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2254      	movs	r2, #84	; 0x54
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c12:	2317      	movs	r3, #23
 8001c14:	18fc      	adds	r4, r7, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff ff09 	bl	8001a30 <ADC_Disable>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff ffa6 	bl	8001b78 <LL_ADC_IsEnabled>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d000      	beq.n	8001c32 <HAL_ADCEx_Calibration_Start+0x46>
 8001c30:	e099      	b.n	8001d66 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	494d      	ldr	r1, [pc, #308]	; (8001d90 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e02d      	b.n	8001cc0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff97 	bl	8001b9c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c6e:	e014      	b.n	8001c9a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3301      	adds	r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4a46      	ldr	r2, [pc, #280]	; (8001d94 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d90d      	bls.n	8001c9a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	2212      	movs	r2, #18
 8001c84:	4393      	bics	r3, r2
 8001c86:	2210      	movs	r2, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2254      	movs	r2, #84	; 0x54
 8001c92:	2100      	movs	r1, #0
 8001c94:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e072      	b.n	8001d80 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff ff90 	bl	8001bc4 <LL_ADC_IsCalibrationOnGoing>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d1e3      	bne.n	8001c70 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ff31 	bl	8001b14 <LL_ADC_GetCalibrationFactor>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	189b      	adds	r3, r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b07      	cmp	r3, #7
 8001cc4:	d9ce      	bls.n	8001c64 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001cc6:	69f9      	ldr	r1, [r7, #28]
 8001cc8:	69b8      	ldr	r0, [r7, #24]
 8001cca:	f7fe fa19 	bl	8000100 <__udivsi3>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff ff2a 	bl	8001b30 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ff01 	bl	8001aec <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff ff30 	bl	8001b54 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f846 	bl	8000d84 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001cfc:	e01b      	b.n	8001d36 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cfe:	f7ff f841 	bl	8000d84 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d914      	bls.n	8001d36 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d00d      	beq.n	8001d36 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	2210      	movs	r2, #16
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e024      	b.n	8001d80 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff ff1c 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d1dc      	bne.n	8001cfe <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68d9      	ldr	r1, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	659a      	str	r2, [r3, #88]	; 0x58
 8001d64:	e005      	b.n	8001d72 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2254      	movs	r2, #84	; 0x54
 8001d76:	2100      	movs	r1, #0
 8001d78:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d7a:	2317      	movs	r3, #23
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b009      	add	sp, #36	; 0x24
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	fffffefd 	.word	0xfffffefd
 8001d8c:	00008003 	.word	0x00008003
 8001d90:	ffff7ffc 	.word	0xffff7ffc
 8001d94:	0002f1ff 	.word	0x0002f1ff

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	0002      	movs	r2, r0
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b7f      	cmp	r3, #127	; 0x7f
 8001daa:	d809      	bhi.n	8001dc0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	231f      	movs	r3, #31
 8001db4:	401a      	ands	r2, r3
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_EnableIRQ+0x30>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	4091      	lsls	r1, r2
 8001dbc:	000a      	movs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b7f      	cmp	r3, #127	; 0x7f
 8001de0:	d828      	bhi.n	8001e34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <__NVIC_SetPriority+0xd4>)
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	33c0      	adds	r3, #192	; 0xc0
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	589b      	ldr	r3, [r3, r2]
 8001df2:	1dfa      	adds	r2, r7, #7
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	0011      	movs	r1, r2
 8001df8:	2203      	movs	r2, #3
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	21ff      	movs	r1, #255	; 0xff
 8001e00:	4091      	lsls	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	43d2      	mvns	r2, r2
 8001e06:	401a      	ands	r2, r3
 8001e08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	401a      	ands	r2, r3
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	2303      	movs	r3, #3
 8001e1a:	4003      	ands	r3, r0
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e20:	481f      	ldr	r0, [pc, #124]	; (8001ea0 <__NVIC_SetPriority+0xd4>)
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	33c0      	adds	r3, #192	; 0xc0
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e32:	e031      	b.n	8001e98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	400b      	ands	r3, r1
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3306      	adds	r3, #6
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1dfa      	adds	r2, r7, #7
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	0011      	movs	r1, r2
 8001e54:	2203      	movs	r2, #3
 8001e56:	400a      	ands	r2, r1
 8001e58:	00d2      	lsls	r2, r2, #3
 8001e5a:	21ff      	movs	r1, #255	; 0xff
 8001e5c:	4091      	lsls	r1, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	43d2      	mvns	r2, r2
 8001e62:	401a      	ands	r2, r3
 8001e64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	22ff      	movs	r2, #255	; 0xff
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	0018      	movs	r0, r3
 8001e74:	2303      	movs	r3, #3
 8001e76:	4003      	ands	r3, r0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <__NVIC_SetPriority+0xd8>)
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	001c      	movs	r4, r3
 8001e84:	230f      	movs	r3, #15
 8001e86:	4023      	ands	r3, r4
 8001e88:	3b08      	subs	r3, #8
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	3306      	adds	r3, #6
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	18c3      	adds	r3, r0, r3
 8001e94:	3304      	adds	r3, #4
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b003      	add	sp, #12
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	045b      	lsls	r3, r3, #17
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d301      	bcc.n	8001ec0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e010      	b.n	8001ee2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <SysTick_Config+0x44>)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	425b      	negs	r3, r3
 8001ecc:	2103      	movs	r1, #3
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff7c 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x44>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x44>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	210f      	movs	r1, #15
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	1c02      	adds	r2, r0, #0
 8001f00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	0002      	movs	r2, r0
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ff33 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff ffaf 	bl	8001ea8 <SysTick_Config>
 8001f4a:	0003      	movs	r3, r0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e077      	b.n	8002056 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <HAL_DMA_Init+0x10c>)
 8001f6c:	4694      	mov	ip, r2
 8001f6e:	4463      	add	r3, ip
 8001f70:	2114      	movs	r1, #20
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe f8c4 	bl	8000100 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	009a      	lsls	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2225      	movs	r2, #37	; 0x25
 8001f84:	2102      	movs	r1, #2
 8001f86:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_DMA_Init+0x110>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fa97 	bl	8002504 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	01db      	lsls	r3, r3, #7
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d102      	bne.n	8001fe8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	213f      	movs	r1, #63	; 0x3f
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ffe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d011      	beq.n	800202c <HAL_DMA_Init+0xd8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d80d      	bhi.n	800202c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 faa2 	bl	800255c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e008      	b.n	800203e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2225      	movs	r2, #37	; 0x25
 8002048:	2101      	movs	r1, #1
 800204a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	bffdfff8 	.word	0xbffdfff8
 8002064:	ffff800f 	.word	0xffff800f

08002068 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2317      	movs	r3, #23
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2224      	movs	r2, #36	; 0x24
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_DMA_Start_IT+0x24>
 8002088:	2302      	movs	r3, #2
 800208a:	e06f      	b.n	800216c <HAL_DMA_Start_IT+0x104>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2224      	movs	r2, #36	; 0x24
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2225      	movs	r2, #37	; 0x25
 8002098:	5c9b      	ldrb	r3, [r3, r2]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d157      	bne.n	8002150 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2225      	movs	r2, #37	; 0x25
 80020a4:	2102      	movs	r1, #2
 80020a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	438a      	bics	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f9dd 	bl	8002484 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	210e      	movs	r1, #14
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e00f      	b.n	8002104 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	210a      	movs	r1, #10
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4013      	ands	r3, r2
 8002110:	d008      	beq.n	8002124 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0049      	lsls	r1, r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	0049      	lsls	r1, r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00a      	b.n	8002166 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2224      	movs	r2, #36	; 0x24
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002166:	2317      	movs	r3, #23
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b006      	add	sp, #24
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e050      	b.n	8002228 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2225      	movs	r2, #37	; 0x25
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d008      	beq.n	80021a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	2100      	movs	r1, #0
 800219e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e041      	b.n	8002228 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	210e      	movs	r1, #14
 80021b0:	438a      	bics	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	491c      	ldr	r1, [pc, #112]	; (8002230 <HAL_DMA_Abort+0xbc>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_DMA_Abort+0xc0>)
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	221c      	movs	r2, #28
 80021de:	4013      	ands	r3, r2
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_DMA_Abort+0xc0>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_DMA_Abort+0xbc>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002214:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2225      	movs	r2, #37	; 0x25
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	fffffeff 	.word	0xfffffeff
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	210f      	movs	r1, #15
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2225      	movs	r2, #37	; 0x25
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d006      	beq.n	8002262 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800225a:	187b      	adds	r3, r7, r1
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e049      	b.n	80022f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	210e      	movs	r1, #14
 800226e:	438a      	bics	r2, r1
 8002270:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	438a      	bics	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	491d      	ldr	r1, [pc, #116]	; (8002304 <HAL_DMA_Abort_IT+0xcc>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_DMA_Abort_IT+0xd0>)
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	221c      	movs	r2, #28
 800229c:	4013      	ands	r3, r2
 800229e:	2201      	movs	r2, #1
 80022a0:	409a      	lsls	r2, r3
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_DMA_Abort_IT+0xd0>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c4:	490f      	ldr	r1, [pc, #60]	; (8002304 <HAL_DMA_Abort_IT+0xcc>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80022d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2225      	movs	r2, #37	; 0x25
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	0010      	movs	r0, r2
 80022f4:	4798      	blx	r3
    }
  }
  return status;
 80022f6:	230f      	movs	r3, #15
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fffffeff 	.word	0xfffffeff
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002314:	4b55      	ldr	r3, [pc, #340]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	221c      	movs	r2, #28
 8002328:	4013      	ands	r3, r2
 800232a:	2204      	movs	r2, #4
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	d027      	beq.n	8002386 <HAL_DMA_IRQHandler+0x7a>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2204      	movs	r2, #4
 800233a:	4013      	ands	r3, r2
 800233c:	d023      	beq.n	8002386 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2220      	movs	r2, #32
 8002346:	4013      	ands	r3, r2
 8002348:	d107      	bne.n	800235a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2104      	movs	r1, #4
 8002356:	438a      	bics	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	221c      	movs	r2, #28
 8002364:	4013      	ands	r3, r2
 8002366:	2204      	movs	r2, #4
 8002368:	409a      	lsls	r2, r3
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	2b00      	cmp	r3, #0
 8002376:	d100      	bne.n	800237a <HAL_DMA_IRQHandler+0x6e>
 8002378:	e073      	b.n	8002462 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	0010      	movs	r0, r2
 8002382:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002384:	e06d      	b.n	8002462 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	221c      	movs	r2, #28
 800238c:	4013      	ands	r3, r2
 800238e:	2202      	movs	r2, #2
 8002390:	409a      	lsls	r2, r3
 8002392:	0013      	movs	r3, r2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	d02e      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xec>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d02a      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2220      	movs	r2, #32
 80023aa:	4013      	ands	r3, r2
 80023ac:	d10b      	bne.n	80023c6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	210a      	movs	r1, #10
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2225      	movs	r2, #37	; 0x25
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	221c      	movs	r2, #28
 80023d0:	4013      	ands	r3, r2
 80023d2:	2202      	movs	r2, #2
 80023d4:	409a      	lsls	r2, r3
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	2100      	movs	r1, #0
 80023e2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03a      	beq.n	8002462 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	0010      	movs	r0, r2
 80023f4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80023f6:	e034      	b.n	8002462 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	221c      	movs	r2, #28
 80023fe:	4013      	ands	r3, r2
 8002400:	2208      	movs	r2, #8
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	d02b      	beq.n	8002464 <HAL_DMA_IRQHandler+0x158>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2208      	movs	r2, #8
 8002410:	4013      	ands	r3, r2
 8002412:	d027      	beq.n	8002464 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	210e      	movs	r1, #14
 8002420:	438a      	bics	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	221c      	movs	r2, #28
 800242e:	4013      	ands	r3, r2
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_DMA_IRQHandler+0x160>)
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2225      	movs	r2, #37	; 0x25
 8002444:	2101      	movs	r1, #1
 8002446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	; 0x24
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0010      	movs	r0, r2
 8002460:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46c0      	nop			; (mov r8, r8)
}
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800249a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80024ac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <DMA_SetConfig+0x7c>)
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	221c      	movs	r2, #28
 80024b8:	4013      	ands	r3, r2
 80024ba:	2201      	movs	r2, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <DMA_SetConfig+0x7c>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d108      	bne.n	80024e6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024e4:	e007      	b.n	80024f6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	60da      	str	r2, [r3, #12]
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	40020000 	.word	0x40020000

08002504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002514:	4694      	mov	ip, r2
 8002516:	4463      	add	r3, ip
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	001a      	movs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	001a      	movs	r2, r3
 8002526:	23ff      	movs	r3, #255	; 0xff
 8002528:	4013      	ands	r3, r2
 800252a:	3b08      	subs	r3, #8
 800252c:	2114      	movs	r1, #20
 800252e:	0018      	movs	r0, r3
 8002530:	f7fd fde6 	bl	8000100 <__udivsi3>
 8002534:	0003      	movs	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800253c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	221f      	movs	r2, #31
 8002542:	4013      	ands	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	10008200 	.word	0x10008200
 8002558:	40020880 	.word	0x40020880

0800255c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	223f      	movs	r2, #63	; 0x3f
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002572:	4694      	mov	ip, r2
 8002574:	4463      	add	r3, ip
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002582:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3b01      	subs	r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	1000823f 	.word	0x1000823f
 80025a0:	40020940 	.word	0x40020940

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e147      	b.n	8002844 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4091      	lsls	r1, r2
 80025be:	000a      	movs	r2, r1
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d100      	bne.n	80025cc <HAL_GPIO_Init+0x28>
 80025ca:	e138      	b.n	800283e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x40>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	409a      	lsls	r2, r3
 80025f2:	0013      	movs	r3, r2
 80025f4:	43da      	mvns	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	409a      	lsls	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	2201      	movs	r2, #1
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	4013      	ands	r3, r2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	58d3      	ldr	r3, [r2, r3]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2107      	movs	r1, #7
 80026ba:	400b      	ands	r3, r1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	43da      	mvns	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2203      	movs	r2, #3
 80026f4:	401a      	ands	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	23c0      	movs	r3, #192	; 0xc0
 8002710:	029b      	lsls	r3, r3, #10
 8002712:	4013      	ands	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_GPIO_Init+0x174>
 8002716:	e092      	b.n	800283e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002718:	4a50      	ldr	r2, [pc, #320]	; (800285c <HAL_GPIO_Init+0x2b8>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3318      	adds	r3, #24
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	589b      	ldr	r3, [r3, r2]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	220f      	movs	r2, #15
 8002730:	409a      	lsls	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	43da      	mvns	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	23a0      	movs	r3, #160	; 0xa0
 8002740:	05db      	lsls	r3, r3, #23
 8002742:	429a      	cmp	r2, r3
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x1ca>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a45      	ldr	r2, [pc, #276]	; (8002860 <HAL_GPIO_Init+0x2bc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x1c6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_GPIO_Init+0x2c0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x1c2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <HAL_GPIO_Init+0x2c4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x1be>
 800275e:	2303      	movs	r3, #3
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x1cc>
 8002762:	2305      	movs	r3, #5
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x1cc>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x1cc>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x1cc>
 800276e:	2300      	movs	r3, #0
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	2103      	movs	r1, #3
 8002774:	400a      	ands	r2, r1
 8002776:	00d2      	lsls	r2, r2, #3
 8002778:	4093      	lsls	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002780:	4936      	ldr	r1, [pc, #216]	; (800285c <HAL_GPIO_Init+0x2b8>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3318      	adds	r3, #24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_GPIO_Init+0x2b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43da      	mvns	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	035b      	lsls	r3, r3, #13
 80027a6:	4013      	ands	r3, r2
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	039b      	lsls	r3, r3, #14
 80027d0:	4013      	ands	r3, r2
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80027e4:	2384      	movs	r3, #132	; 0x84
 80027e6:	58d3      	ldr	r3, [r2, r3]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002808:	4914      	ldr	r1, [pc, #80]	; (800285c <HAL_GPIO_Init+0x2b8>)
 800280a:	2284      	movs	r2, #132	; 0x84
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_GPIO_Init+0x2b8>)
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	58d3      	ldr	r3, [r2, r3]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	4013      	ands	r3, r2
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <HAL_GPIO_Init+0x2b8>)
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	40da      	lsrs	r2, r3
 800284c:	1e13      	subs	r3, r2, #0
 800284e:	d000      	beq.n	8002852 <HAL_GPIO_Init+0x2ae>
 8002850:	e6b0      	b.n	80025b4 <HAL_GPIO_Init+0x10>
  }
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b006      	add	sp, #24
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021800 	.word	0x40021800
 8002860:	50000400 	.word	0x50000400
 8002864:	50000800 	.word	0x50000800
 8002868:	50000c00 	.word	0x50000c00

0800286c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d11f      	bne.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	0013      	movs	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	189b      	adds	r3, r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4912      	ldr	r1, [pc, #72]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fd fc2e 	bl	8000100 <__udivsi3>
 80028a4:	0003      	movs	r3, r0
 80028a6:	3301      	adds	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028aa:	e008      	b.n	80028be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e001      	b.n	80028be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e009      	b.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	401a      	ands	r2, r3
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d0ed      	beq.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b004      	add	sp, #16
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40007000 	.word	0x40007000
 80028e0:	fffff9ff 	.word	0xfffff9ff
 80028e4:	20000000 	.word	0x20000000
 80028e8:	000f4240 	.word	0x000f4240

080028ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <LL_RCC_GetAPB1Prescaler+0x14>)
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	23e0      	movs	r3, #224	; 0xe0
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4013      	ands	r3, r2
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e2f3      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4013      	ands	r3, r2
 800291e:	d100      	bne.n	8002922 <HAL_RCC_OscConfig+0x1e>
 8002920:	e07c      	b.n	8002a1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4bc3      	ldr	r3, [pc, #780]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2238      	movs	r2, #56	; 0x38
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4bc0      	ldr	r3, [pc, #768]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2203      	movs	r2, #3
 8002932:	4013      	ands	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b10      	cmp	r3, #16
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x3e>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d002      	beq.n	8002948 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d10b      	bne.n	8002960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	4bb9      	ldr	r3, [pc, #740]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d062      	beq.n	8002a1a <HAL_RCC_OscConfig+0x116>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d15e      	bne.n	8002a1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e2ce      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	025b      	lsls	r3, r3, #9
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x78>
 800296c:	4bb0      	ldr	r3, [pc, #704]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	0249      	lsls	r1, r1, #9
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e020      	b.n	80029be <HAL_RCC_OscConfig+0xba>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	23a0      	movs	r3, #160	; 0xa0
 8002982:	02db      	lsls	r3, r3, #11
 8002984:	429a      	cmp	r2, r3
 8002986:	d10e      	bne.n	80029a6 <HAL_RCC_OscConfig+0xa2>
 8002988:	4ba9      	ldr	r3, [pc, #676]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4ba8      	ldr	r3, [pc, #672]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	02c9      	lsls	r1, r1, #11
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	4ba6      	ldr	r3, [pc, #664]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4ba5      	ldr	r3, [pc, #660]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0249      	lsls	r1, r1, #9
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e00b      	b.n	80029be <HAL_RCC_OscConfig+0xba>
 80029a6:	4ba2      	ldr	r3, [pc, #648]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4ba1      	ldr	r3, [pc, #644]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	49a1      	ldr	r1, [pc, #644]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	4b9f      	ldr	r3, [pc, #636]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 80029b8:	499f      	ldr	r1, [pc, #636]	; (8002c38 <HAL_RCC_OscConfig+0x334>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d014      	beq.n	80029f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe f9dd 	bl	8000d84 <HAL_GetTick>
 80029ca:	0003      	movs	r3, r0
 80029cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe f9d8 	bl	8000d84 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e28d      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	029b      	lsls	r3, r3, #10
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xcc>
 80029ee:	e015      	b.n	8002a1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe f9c8 	bl	8000d84 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fa:	f7fe f9c3 	bl	8000d84 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	; 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e278      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	4013      	ands	r3, r2
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0xf6>
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d100      	bne.n	8002a28 <HAL_RCC_OscConfig+0x124>
 8002a26:	e099      	b.n	8002b5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a28:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2238      	movs	r2, #56	; 0x38
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x144>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d002      	beq.n	8002a4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d135      	bne.n	8002aba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4e:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x162>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e24b      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b72      	ldr	r3, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x338>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	4b6e      	ldr	r3, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x33c>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0adb      	lsrs	r3, r3, #11
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x340>)
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x344>)
 8002aa6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <HAL_RCC_OscConfig+0x348>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe f90d 	bl	8000ccc <HAL_InitTick>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d051      	beq.n	8002b5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e221      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d030      	beq.n	8002b24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ac2:	4b5b      	ldr	r3, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5e      	ldr	r2, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x33c>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	0049      	lsls	r1, r1, #1
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f94e 	bl	8000d84 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe f949 	bl	8000d84 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1fe      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_RCC_OscConfig+0x338>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	021a      	lsls	r2, r3, #8
 8002b1c:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e01b      	b.n	8002b5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	4949      	ldr	r1, [pc, #292]	; (8002c50 <HAL_RCC_OscConfig+0x34c>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe f928 	bl	8000d84 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe f923 	bl	8000d84 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1d8      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4013      	ands	r3, r2
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x236>
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	4013      	ands	r3, r2
 8002b64:	d047      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b66:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2238      	movs	r2, #56	; 0x38
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b18      	cmp	r3, #24
 8002b70:	d10a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d138      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e1ba      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f8f2 	bl	8000d84 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f8ed 	bl	8000d84 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a2      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d0f1      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2a2>
 8002bc2:	e018      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	438a      	bics	r2, r1
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f8d8 	bl	8000d84 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe f8d3 	bl	8000d84 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e188      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d1f1      	bne.n	8002bda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2fe>
 8002c00:	e0c6      	b.n	8002d90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	231f      	movs	r3, #31
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2238      	movs	r2, #56	; 0x38
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d11e      	bne.n	8002c54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x32c>)
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <HAL_RCC_OscConfig+0x31e>
 8002c20:	e0b6      	b.n	8002d90 <HAL_RCC_OscConfig+0x48c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d000      	beq.n	8002c2c <HAL_RCC_OscConfig+0x328>
 8002c2a:	e0b1      	b.n	8002d90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e166      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	fffeffff 	.word	0xfffeffff
 8002c38:	fffbffff 	.word	0xfffbffff
 8002c3c:	ffff80ff 	.word	0xffff80ff
 8002c40:	ffffc7ff 	.word	0xffffc7ff
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c54:	4bac      	ldr	r3, [pc, #688]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	055b      	lsls	r3, r3, #21
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_OscConfig+0x360>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x362>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4ba7      	ldr	r3, [pc, #668]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c6e:	4ba6      	ldr	r3, [pc, #664]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0549      	lsls	r1, r1, #21
 8002c74:	430a      	orrs	r2, r1
 8002c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c78:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	055b      	lsls	r3, r3, #21
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	4b9f      	ldr	r3, [pc, #636]	; (8002f0c <HAL_RCC_OscConfig+0x608>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d11a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c9a:	4b9c      	ldr	r3, [pc, #624]	; (8002f0c <HAL_RCC_OscConfig+0x608>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b9b      	ldr	r3, [pc, #620]	; (8002f0c <HAL_RCC_OscConfig+0x608>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0049      	lsls	r1, r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f86c 	bl	8000d84 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f867 	bl	8000d84 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e11c      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc4:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_RCC_OscConfig+0x608>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3e2>
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cdc:	4b8a      	ldr	r3, [pc, #552]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x41c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x404>
 8002cee:	4b86      	ldr	r3, [pc, #536]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf2:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cfa:	4b83      	ldr	r3, [pc, #524]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cfe:	4b82      	ldr	r3, [pc, #520]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	430a      	orrs	r2, r1
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0x41c>
 8002d08:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d0c:	4b7e      	ldr	r3, [pc, #504]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d14:	4b7c      	ldr	r3, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d014      	beq.n	8002d52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f82c 	bl	8000d84 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe f827 	bl	8000d84 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	4a74      	ldr	r2, [pc, #464]	; (8002f10 <HAL_RCC_OscConfig+0x60c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0db      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x42e>
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe f817 	bl	8000d84 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5a:	e009      	b.n	8002d70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f812 	bl	8000d84 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x60c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0c6      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d70:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2202      	movs	r2, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d7a:	231f      	movs	r3, #31
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b60      	ldr	r3, [pc, #384]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d88:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d8a:	4962      	ldr	r1, [pc, #392]	; (8002f14 <HAL_RCC_OscConfig+0x610>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <HAL_RCC_OscConfig+0x496>
 8002d98:	e0b0      	b.n	8002efc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2238      	movs	r2, #56	; 0x38
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d100      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4a4>
 8002da6:	e078      	b.n	8002e9a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d153      	bne.n	8002e58 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b55      	ldr	r3, [pc, #340]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b54      	ldr	r3, [pc, #336]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002db6:	4958      	ldr	r1, [pc, #352]	; (8002f18 <HAL_RCC_OscConfig+0x614>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fd ffe2 	bl	8000d84 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fd ffdd 	bl	8000d84 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e092      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	049b      	lsls	r3, r3, #18
 8002de0:	4013      	ands	r3, r2
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de4:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_RCC_OscConfig+0x618>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0449      	lsls	r1, r1, #17
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	0549      	lsls	r1, r1, #21
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fd ffa9 	bl	8000d84 <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fd ffa4 	bl	8000d84 <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e059      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	049b      	lsls	r3, r3, #18
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x534>
 8002e56:	e051      	b.n	8002efc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e5e:	492e      	ldr	r1, [pc, #184]	; (8002f18 <HAL_RCC_OscConfig+0x614>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd ff8e 	bl	8000d84 <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fd ff89 	bl	8000d84 <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e03e      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	049b      	lsls	r3, r3, #18
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002e92:	4923      	ldr	r1, [pc, #140]	; (8002f20 <HAL_RCC_OscConfig+0x61c>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	e030      	b.n	8002efc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e02b      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x604>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11e      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2270      	movs	r2, #112	; 0x70
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d117      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	23fe      	movs	r3, #254	; 0xfe
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	401a      	ands	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	23f8      	movs	r3, #248	; 0xf8
 8002ede:	039b      	lsls	r3, r3, #14
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0f5b      	lsrs	r3, r3, #29
 8002eee:	075a      	lsls	r2, r3, #29
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b008      	add	sp, #32
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	00001388 	.word	0x00001388
 8002f14:	efffffff 	.word	0xefffffff
 8002f18:	feffffff 	.word	0xfeffffff
 8002f1c:	1fc1808c 	.word	0x1fc1808c
 8002f20:	effefffc 	.word	0xeffefffc

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0e9      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d91e      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f58:	f7fd ff14 	bl	8000d84 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f60:	e009      	b.n	8002f76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7fd ff0f 	bl	8000d84 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0ca      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d006      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f98:	4b60      	ldr	r3, [pc, #384]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002f9e:	21e0      	movs	r1, #224	; 0xe0
 8002fa0:	01c9      	lsls	r1, r1, #7
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4a5d      	ldr	r2, [pc, #372]	; (8003120 <HAL_RCC_ClockConfig+0x1fc>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d057      	beq.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d12b      	bne.n	8003030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e097      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	049b      	lsls	r3, r3, #18
 8002fec:	4013      	ands	r3, r2
 8002fee:	d11f      	bne.n	8003030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e08b      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4013      	ands	r3, r2
 8003006:	d113      	bne.n	8003030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e07f      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003014:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	2202      	movs	r2, #2
 800301a:	4013      	ands	r3, r2
 800301c:	d108      	bne.n	8003030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e074      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	4b3e      	ldr	r3, [pc, #248]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e06d      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2207      	movs	r2, #7
 8003036:	4393      	bics	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8003040:	430a      	orrs	r2, r1
 8003042:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fd fe9e 	bl	8000d84 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304c:	e009      	b.n	8003062 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7fd fe99 	bl	8000d84 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a2f      	ldr	r2, [pc, #188]	; (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e054      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2238      	movs	r2, #56	; 0x38
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	429a      	cmp	r2, r3
 8003072:	d1ec      	bne.n	800304e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2207      	movs	r2, #7
 800307a:	4013      	ands	r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d21e      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2207      	movs	r2, #7
 8003088:	4393      	bics	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003094:	f7fd fe76 	bl	8000d84 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800309c:	e009      	b.n	80030b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309e:	f7fd fe71 	bl	8000d84 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e02c      	b.n	800310c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_RCC_ClockConfig+0x200>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80030de:	f000 f829 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030e2:	0001      	movs	r1, r0
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	220f      	movs	r2, #15
 80030ec:	401a      	ands	r2, r3
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x204>)
 80030f0:	0092      	lsls	r2, r2, #2
 80030f2:	58d3      	ldr	r3, [r2, r3]
 80030f4:	221f      	movs	r2, #31
 80030f6:	4013      	ands	r3, r2
 80030f8:	000a      	movs	r2, r1
 80030fa:	40da      	lsrs	r2, r3
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x208>)
 80030fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_ClockConfig+0x20c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0018      	movs	r0, r3
 8003106:	f7fd fde1 	bl	8000ccc <HAL_InitTick>
 800310a:	0003      	movs	r3, r0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40022000 	.word	0x40022000
 8003118:	00001388 	.word	0x00001388
 800311c:	40021000 	.word	0x40021000
 8003120:	fffff0ff 	.word	0xfffff0ff
 8003124:	ffff8fff 	.word	0xffff8fff
 8003128:	080056e0 	.word	0x080056e0
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2238      	movs	r2, #56	; 0x38
 8003140:	4013      	ands	r3, r2
 8003142:	d10f      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	0adb      	lsrs	r3, r3, #11
 800314a:	2207      	movs	r2, #7
 800314c:	4013      	ands	r3, r2
 800314e:	2201      	movs	r2, #1
 8003150:	409a      	lsls	r2, r3
 8003152:	0013      	movs	r3, r2
 8003154:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	4835      	ldr	r0, [pc, #212]	; (8003230 <HAL_RCC_GetSysClockFreq+0xfc>)
 800315a:	f7fc ffd1 	bl	8000100 <__udivsi3>
 800315e:	0003      	movs	r3, r0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e05d      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003164:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2238      	movs	r2, #56	; 0x38
 800316a:	4013      	ands	r3, r2
 800316c:	2b08      	cmp	r3, #8
 800316e:	d102      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_GetSysClockFreq+0x100>)
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e054      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2238      	movs	r2, #56	; 0x38
 800317c:	4013      	ands	r3, r2
 800317e:	2b10      	cmp	r3, #16
 8003180:	d138      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2203      	movs	r2, #3
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	2207      	movs	r2, #7
 8003194:	4013      	ands	r3, r2
 8003196:	3301      	adds	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d10d      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4824      	ldr	r0, [pc, #144]	; (8003234 <HAL_RCC_GetSysClockFreq+0x100>)
 80031a4:	f7fc ffac 	bl	8000100 <__udivsi3>
 80031a8:	0003      	movs	r3, r0
 80031aa:	0019      	movs	r1, r3
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	227f      	movs	r2, #127	; 0x7f
 80031b4:	4013      	ands	r3, r2
 80031b6:	434b      	muls	r3, r1
 80031b8:	617b      	str	r3, [r7, #20]
        break;
 80031ba:	e00d      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	481c      	ldr	r0, [pc, #112]	; (8003230 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031c0:	f7fc ff9e 	bl	8000100 <__udivsi3>
 80031c4:	0003      	movs	r3, r0
 80031c6:	0019      	movs	r1, r3
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	227f      	movs	r2, #127	; 0x7f
 80031d0:	4013      	ands	r3, r2
 80031d2:	434b      	muls	r3, r1
 80031d4:	617b      	str	r3, [r7, #20]
        break;
 80031d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0f5b      	lsrs	r3, r3, #29
 80031de:	2207      	movs	r2, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	6978      	ldr	r0, [r7, #20]
 80031ea:	f7fc ff89 	bl	8000100 <__udivsi3>
 80031ee:	0003      	movs	r3, r0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e015      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2238      	movs	r2, #56	; 0x38
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d103      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_RCC_GetSysClockFreq+0xf8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2238      	movs	r2, #56	; 0x38
 800320e:	4013      	ands	r3, r2
 8003210:	2b18      	cmp	r3, #24
 8003212:	d103      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003214:	23fa      	movs	r3, #250	; 0xfa
 8003216:	01db      	lsls	r3, r3, #7
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e001      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003220:	693b      	ldr	r3, [r7, #16]
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b006      	add	sp, #24
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	00f42400 	.word	0x00f42400
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <HAL_RCC_GetHCLKFreq+0x10>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000000 	.word	0x20000000

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003250:	f7ff fff2 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003254:	0004      	movs	r4, r0
 8003256:	f7ff fb49 	bl	80028ec <LL_RCC_GetAPB1Prescaler>
 800325a:	0003      	movs	r3, r0
 800325c:	0b1a      	lsrs	r2, r3, #12
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	58d3      	ldr	r3, [r2, r3]
 8003264:	221f      	movs	r2, #31
 8003266:	4013      	ands	r3, r2
 8003268:	40dc      	lsrs	r4, r3
 800326a:	0023      	movs	r3, r4
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bdb0      	pop	{r4, r5, r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	08005720 	.word	0x08005720

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003280:	2313      	movs	r3, #19
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003288:	2312      	movs	r3, #18
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800329c:	e0a3      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2011      	movs	r0, #17
 80032a0:	183b      	adds	r3, r7, r0
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b7f      	ldr	r3, [pc, #508]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	055b      	lsls	r3, r3, #21
 80032ae:	4013      	ands	r3, r2
 80032b0:	d110      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4b7c      	ldr	r3, [pc, #496]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b6:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	0549      	lsls	r1, r1, #21
 80032bc:	430a      	orrs	r2, r1
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	055b      	lsls	r3, r3, #21
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d4:	4b74      	ldr	r3, [pc, #464]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	0049      	lsls	r1, r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032e2:	f7fd fd4f 	bl	8000d84 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	e00b      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fd fd4a 	bl	8000d84 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d904      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032fa:	2313      	movs	r3, #19
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
        break;
 8003302:	e005      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d0ed      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003310:	2313      	movs	r3, #19
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d154      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800331a:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800331c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331e:	23c0      	movs	r3, #192	; 0xc0
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4013      	ands	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d014      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003336:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	4a5c      	ldr	r2, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003340:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003344:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	0249      	lsls	r1, r1, #9
 800334a:	430a      	orrs	r2, r1
 800334c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003352:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003354:	4956      	ldr	r1, [pc, #344]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003356:	400a      	ands	r2, r1
 8003358:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800335a:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d016      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fd0c 	bl	8000d84 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003370:	e00c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fd07 	bl	8000d84 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d904      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003382:	2313      	movs	r3, #19
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2203      	movs	r2, #3
 8003388:	701a      	strb	r2, [r3, #0]
            break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2202      	movs	r2, #2
 8003392:	4013      	ands	r3, r2
 8003394:	d0ed      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003396:	2313      	movs	r3, #19
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	4a41      	ldr	r2, [pc, #260]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80033b4:	e00c      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b6:	2312      	movs	r3, #18
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2213      	movs	r2, #19
 80033bc:	18ba      	adds	r2, r7, r2
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e005      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	2312      	movs	r3, #18
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2213      	movs	r2, #19
 80033ca:	18ba      	adds	r2, r7, r2
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d0:	2311      	movs	r3, #17
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f0:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2203      	movs	r2, #3
 80033f6:	4393      	bics	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003400:	430a      	orrs	r2, r1
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2220      	movs	r2, #32
 800340a:	4013      	ands	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800341e:	430a      	orrs	r2, r1
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	01db      	lsls	r3, r3, #7
 800342a:	4013      	ands	r3, r2
 800342c:	d015      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	0899      	lsrs	r1, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800343c:	430a      	orrs	r2, r1
 800343e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	05db      	lsls	r3, r3, #23
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0249      	lsls	r1, r1, #9
 8003456:	430a      	orrs	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4013      	ands	r3, r2
 8003464:	d016      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003476:	430a      	orrs	r2, r1
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	01db      	lsls	r3, r3, #7
 8003482:	429a      	cmp	r2, r3
 8003484:	d106      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0249      	lsls	r1, r1, #9
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003494:	2312      	movs	r3, #18
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	781b      	ldrb	r3, [r3, #0]
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	fffffcff 	.word	0xfffffcff
 80034b0:	fffeffff 	.word	0xfffeffff
 80034b4:	00001388 	.word	0x00001388
 80034b8:	efffffff 	.word	0xefffffff
 80034bc:	ffffcfff 	.word	0xffffcfff
 80034c0:	ffff3fff 	.word	0xffff3fff

080034c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e04a      	b.n	800356c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	; 0x3d
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	223c      	movs	r2, #60	; 0x3c
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fd f9e9 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223d      	movs	r2, #61	; 0x3d
 80034f6:	2102      	movs	r1, #2
 80034f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	0019      	movs	r1, r3
 8003504:	0010      	movs	r0, r2
 8003506:	f000 faab 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2248      	movs	r2, #72	; 0x48
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223e      	movs	r2, #62	; 0x3e
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223f      	movs	r2, #63	; 0x3f
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2241      	movs	r2, #65	; 0x41
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2242      	movs	r2, #66	; 0x42
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2243      	movs	r2, #67	; 0x43
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2244      	movs	r2, #68	; 0x44
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2245      	movs	r2, #69	; 0x45
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2246      	movs	r2, #70	; 0x46
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2247      	movs	r2, #71	; 0x47
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	223d      	movs	r2, #61	; 0x3d
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	223d      	movs	r2, #61	; 0x3d
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d001      	beq.n	800358c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e037      	b.n	80035fc <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	223d      	movs	r2, #61	; 0x3d
 8003590:	2102      	movs	r1, #2
 8003592:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	430a      	orrs	r2, r1
 80035a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_TIM_Base_Start_IT+0x90>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x44>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_TIM_Base_Start_IT+0x94>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d116      	bne.n	80035e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_TIM_Base_Start_IT+0x98>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d016      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x84>
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d011      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	e008      	b.n	80035f8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e000      	b.n	80035fa <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	00010007 	.word	0x00010007

08003610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d124      	bne.n	8003670 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2202      	movs	r2, #2
 800362e:	4013      	ands	r3, r2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d11d      	bne.n	8003670 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2203      	movs	r2, #3
 800363a:	4252      	negs	r2, r2
 800363c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f9ec 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003658:	e007      	b.n	800366a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 f9df 	bl	8003a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f9eb 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2204      	movs	r2, #4
 8003678:	4013      	ands	r3, r2
 800367a:	2b04      	cmp	r3, #4
 800367c:	d125      	bne.n	80036ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2204      	movs	r2, #4
 8003686:	4013      	ands	r3, r2
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11e      	bne.n	80036ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2205      	movs	r2, #5
 8003692:	4252      	negs	r2, r2
 8003694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4013      	ands	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f9bf 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 80036b2:	e007      	b.n	80036c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f9b2 	bl	8003a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f9be 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2208      	movs	r2, #8
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d124      	bne.n	8003722 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2208      	movs	r2, #8
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11d      	bne.n	8003722 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2209      	movs	r2, #9
 80036ec:	4252      	negs	r2, r2
 80036ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2204      	movs	r2, #4
 80036f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2203      	movs	r2, #3
 80036fe:	4013      	ands	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 f993 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 800370a:	e007      	b.n	800371c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 f986 	bl	8003a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f992 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	2b10      	cmp	r3, #16
 800372e:	d125      	bne.n	800377c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2210      	movs	r2, #16
 8003738:	4013      	ands	r3, r2
 800373a:	2b10      	cmp	r3, #16
 800373c:	d11e      	bne.n	800377c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2211      	movs	r2, #17
 8003744:	4252      	negs	r2, r2
 8003746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2208      	movs	r2, #8
 800374c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	23c0      	movs	r3, #192	; 0xc0
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4013      	ands	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f966 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003764:	e007      	b.n	8003776 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f959 	bl	8003a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 f965 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2201      	movs	r2, #1
 8003784:	4013      	ands	r3, r2
 8003786:	2b01      	cmp	r3, #1
 8003788:	d10f      	bne.n	80037aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	2b01      	cmp	r3, #1
 8003796:	d108      	bne.n	80037aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2202      	movs	r2, #2
 800379e:	4252      	negs	r2, r2
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fc ff15 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d10f      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d108      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2281      	movs	r2, #129	; 0x81
 80037cc:	4252      	negs	r2, r2
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 fab6 	bl	8003d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	401a      	ands	r2, r3
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d10e      	bne.n	800380a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d107      	bne.n	800380a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_TIM_IRQHandler+0x260>)
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 faa5 	bl	8003d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	4013      	ands	r3, r2
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d10f      	bne.n	8003838 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	4013      	ands	r3, r2
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d108      	bne.n	8003838 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2241      	movs	r2, #65	; 0x41
 800382c:	4252      	negs	r2, r2
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f90c 	bl	8003a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	2b20      	cmp	r3, #32
 8003844:	d10f      	bne.n	8003866 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	4013      	ands	r3, r2
 8003850:	2b20      	cmp	r3, #32
 8003852:	d108      	bne.n	8003866 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2221      	movs	r2, #33	; 0x21
 800385a:	4252      	negs	r2, r2
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fa67 	bl	8003d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	fffffeff 	.word	0xfffffeff

08003874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	230f      	movs	r3, #15
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	223c      	movs	r2, #60	; 0x3c
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIM_ConfigClockSource+0x20>
 8003890:	2302      	movs	r3, #2
 8003892:	e0bc      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x19a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223c      	movs	r2, #60	; 0x3c
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	223d      	movs	r2, #61	; 0x3d
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a5a      	ldr	r2, [pc, #360]	; (8003a18 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a59      	ldr	r2, [pc, #356]	; (8003a1c <HAL_TIM_ConfigClockSource+0x1a8>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0192      	lsls	r2, r2, #6
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xde>
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	0192      	lsls	r2, r2, #6
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d900      	bls.n	80038da <HAL_TIM_ConfigClockSource+0x66>
 80038d8:	e088      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	0152      	lsls	r2, r2, #5
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x70>
 80038e2:	e088      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x182>
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	0152      	lsls	r2, r2, #5
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d900      	bls.n	80038ee <HAL_TIM_ConfigClockSource+0x7a>
 80038ec:	e07e      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 80038ee:	2b70      	cmp	r3, #112	; 0x70
 80038f0:	d018      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0xb0>
 80038f2:	d900      	bls.n	80038f6 <HAL_TIM_ConfigClockSource+0x82>
 80038f4:	e07a      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 80038f6:	2b60      	cmp	r3, #96	; 0x60
 80038f8:	d04f      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x126>
 80038fa:	d900      	bls.n	80038fe <HAL_TIM_ConfigClockSource+0x8a>
 80038fc:	e076      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 80038fe:	2b50      	cmp	r3, #80	; 0x50
 8003900:	d03b      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x106>
 8003902:	d900      	bls.n	8003906 <HAL_TIM_ConfigClockSource+0x92>
 8003904:	e072      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d057      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x146>
 800390a:	d900      	bls.n	800390e <HAL_TIM_ConfigClockSource+0x9a>
 800390c:	e06e      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 800390e:	2b30      	cmp	r3, #48	; 0x30
 8003910:	d063      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x166>
 8003912:	d86b      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d060      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x166>
 8003918:	d868      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d05d      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x166>
 800391e:	2b10      	cmp	r3, #16
 8003920:	d05b      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x166>
 8003922:	e063      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	f000 f97c 	bl	8003c30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2277      	movs	r2, #119	; 0x77
 8003944:	4313      	orrs	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e052      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003962:	f000 f965 	bl	8003c30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	01c9      	lsls	r1, r1, #7
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
      break;
 8003978:	e03e      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	001a      	movs	r2, r3
 8003988:	f000 f8d6 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2150      	movs	r1, #80	; 0x50
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f930 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 8003998:	e02e      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a6:	001a      	movs	r2, r3
 80039a8:	f000 f8f4 	bl	8003b94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2160      	movs	r1, #96	; 0x60
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f920 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80039b8:	e01e      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c6:	001a      	movs	r2, r3
 80039c8:	f000 f8b6 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2140      	movs	r1, #64	; 0x40
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f910 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80039d8:	e00e      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0019      	movs	r1, r3
 80039e4:	0010      	movs	r0, r2
 80039e6:	f000 f907 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80039ea:	e005      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039ec:	230f      	movs	r3, #15
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
      break;
 80039f4:	e000      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	223d      	movs	r2, #61	; 0x3d
 80039fc:	2101      	movs	r1, #1
 80039fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	223c      	movs	r2, #60	; 0x3c
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

  return status;
 8003a08:	230f      	movs	r3, #15
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	ffceff88 	.word	0xffceff88
 8003a1c:	ffff00ff 	.word	0xffff00ff

08003a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <TIM_Base_SetConfig+0xc0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0x20>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <TIM_Base_SetConfig+0xc4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2270      	movs	r2, #112	; 0x70
 8003a84:	4393      	bics	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <TIM_Base_SetConfig+0xc0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0x5a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <TIM_Base_SetConfig+0xc4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0x5a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <TIM_Base_SetConfig+0xc8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0x5a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <TIM_Base_SetConfig+0xcc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0x5a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <TIM_Base_SetConfig+0xd0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <TIM_Base_SetConfig+0xd4>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <TIM_Base_SetConfig+0xc0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0xaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <TIM_Base_SetConfig+0xcc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0xaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <TIM_Base_SetConfig+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d103      	bne.n	8003b12 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	615a      	str	r2, [r3, #20]
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b004      	add	sp, #16
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40002000 	.word	0x40002000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800
 8003b34:	fffffcff 	.word	0xfffffcff

08003b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4393      	bics	r3, r2
 8003b52:	001a      	movs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	22f0      	movs	r2, #240	; 0xf0
 8003b62:	4393      	bics	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	220a      	movs	r2, #10
 8003b74:	4393      	bics	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b006      	add	sp, #24
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	001a      	movs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <TIM_TI2_ConfigInputStage+0x60>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	22a0      	movs	r2, #160	; 0xa0
 8003bd0:	4393      	bics	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b006      	add	sp, #24
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	ffff0fff 	.word	0xffff0fff

08003bf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <TIM_ITRx_SetConfig+0x34>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	2207      	movs	r2, #7
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	ffcfff8f 	.word	0xffcfff8f

08003c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <TIM_ETR_SetConfig+0x3c>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	021a      	lsls	r2, r3, #8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	ffff00ff 	.word	0xffff00ff

08003c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	223c      	movs	r2, #60	; 0x3c
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e04a      	b.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223c      	movs	r2, #60	; 0x3c
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	223d      	movs	r2, #61	; 0x3d
 8003c94:	2102      	movs	r1, #2
 8003c96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2270      	movs	r2, #112	; 0x70
 8003cc8:	4393      	bics	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	223d      	movs	r2, #61	; 0x3d
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	223c      	movs	r2, #60	; 0x3c
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	ff0fffff 	.word	0xff0fffff
 8003d30:	40000400 	.word	0x40000400

08003d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b002      	add	sp, #8
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e046      	b.n	8003e04 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2288      	movs	r2, #136	; 0x88
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2284      	movs	r2, #132	; 0x84
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fc fe1e 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2288      	movs	r2, #136	; 0x88
 8003d94:	2124      	movs	r1, #36	; 0x24
 8003d96:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fd08 	bl	80047c0 <UART_SetConfig>
 8003db0:	0003      	movs	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e024      	b.n	8003e04 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fe65 	bl	8004a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	490d      	ldr	r1, [pc, #52]	; (8003e0c <HAL_UART_Init+0xa8>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	212a      	movs	r1, #42	; 0x2a
 8003de6:	438a      	bics	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 fefd 	bl	8004bfc <UART_CheckIdleState>
 8003e02:	0003      	movs	r3, r0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	ffffb7ff 	.word	0xffffb7ff

08003e10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2288      	movs	r2, #136	; 0x88
 8003e22:	589b      	ldr	r3, [r3, r2]
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d000      	beq.n	8003e2a <HAL_UART_Transmit_DMA+0x1a>
 8003e28:	e079      	b.n	8003f1e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_UART_Transmit_DMA+0x28>
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e071      	b.n	8003f20 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	015b      	lsls	r3, r3, #5
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d109      	bne.n	8003e5c <HAL_UART_Transmit_DMA+0x4c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4013      	ands	r3, r2
 8003e56:	d001      	beq.n	8003e5c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e061      	b.n	8003f20 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1dba      	adds	r2, r7, #6
 8003e66:	2154      	movs	r1, #84	; 0x54
 8003e68:	8812      	ldrh	r2, [r2, #0]
 8003e6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1dba      	adds	r2, r7, #6
 8003e70:	2156      	movs	r1, #86	; 0x56
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2290      	movs	r2, #144	; 0x90
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2288      	movs	r2, #136	; 0x88
 8003e82:	2121      	movs	r1, #33	; 0x21
 8003e84:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d028      	beq.n	8003ee0 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e92:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <HAL_UART_Transmit_DMA+0x118>)
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <HAL_UART_Transmit_DMA+0x11c>)
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea2:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_UART_Transmit_DMA+0x120>)
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eaa:	2200      	movs	r2, #0
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3328      	adds	r3, #40	; 0x28
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	1dbb      	adds	r3, r7, #6
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	f7fe f8d0 	bl	8002068 <HAL_DMA_Start_IT>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2290      	movs	r2, #144	; 0x90
 8003ed0:	2110      	movs	r1, #16
 8003ed2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2288      	movs	r2, #136	; 0x88
 8003ed8:	2120      	movs	r1, #32
 8003eda:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e01f      	b.n	8003f20 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eec:	613b      	str	r3, [r7, #16]
  return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b008      	add	sp, #32
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	080050c1 	.word	0x080050c1
 8003f2c:	08005159 	.word	0x08005159
 8003f30:	080052eb 	.word	0x080052eb

08003f34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	1dbb      	adds	r3, r7, #6
 8003f40:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	228c      	movs	r2, #140	; 0x8c
 8003f46:	589b      	ldr	r3, [r3, r2]
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d145      	bne.n	8003fd8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_UART_Receive_DMA+0x26>
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e03d      	b.n	8003fda <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	015b      	lsls	r3, r3, #5
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d109      	bne.n	8003f7e <HAL_UART_Receive_DMA+0x4a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	d001      	beq.n	8003f7e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02d      	b.n	8003fda <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d019      	beq.n	8003fc6 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	613b      	str	r3, [r7, #16]
  return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	04c9      	lsls	r1, r1, #19
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f383 8810 	msr	PRIMASK, r3
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 ff2a 	bl	8004e28 <UART_Start_Receive_DMA>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	e000      	b.n	8003fda <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b008      	add	sp, #32
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b08c      	sub	sp, #48	; 0x30
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2288      	movs	r2, #136	; 0x88
 8003fee:	589b      	ldr	r3, [r3, r2]
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	228c      	movs	r2, #140	; 0x8c
 8003ff6:	589b      	ldr	r3, [r3, r2]
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	4013      	ands	r3, r2
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d138      	bne.n	800407a <HAL_UART_DMAStop+0x98>
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d135      	bne.n	800407a <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	617b      	str	r3, [r7, #20]
  return(result);
 8004014:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	2301      	movs	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	438a      	bics	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d014      	beq.n	8004072 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	0018      	movs	r0, r3
 800404e:	f7fe f891 	bl	8002174 <HAL_DMA_Abort>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d00d      	beq.n	8004072 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405a:	0018      	movs	r0, r3
 800405c:	f7fe fa08 	bl	8002470 <HAL_DMA_GetError>
 8004060:	0003      	movs	r3, r0
 8004062:	2b20      	cmp	r3, #32
 8004064:	d105      	bne.n	8004072 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2290      	movs	r2, #144	; 0x90
 800406a:	2110      	movs	r1, #16
 800406c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e047      	b.n	8004102 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 ff7d 	bl	8004f74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	4013      	ands	r3, r2
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d13b      	bne.n	8004100 <HAL_UART_DMAStop+0x11e>
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b22      	cmp	r3, #34	; 0x22
 800408c:	d138      	bne.n	8004100 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408e:	f3ef 8310 	mrs	r3, PRIMASK
 8004092:	60bb      	str	r3, [r7, #8]
  return(result);
 8004094:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	2301      	movs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	438a      	bics	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	589b      	ldr	r3, [r3, r2]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	589b      	ldr	r3, [r3, r2]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fe f84f 	bl	8002174 <HAL_DMA_Abort>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d00e      	beq.n	80040f8 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	589b      	ldr	r3, [r3, r2]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe f9c5 	bl	8002470 <HAL_DMA_GetError>
 80040e6:	0003      	movs	r3, r0
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d105      	bne.n	80040f8 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2290      	movs	r2, #144	; 0x90
 80040f0:	2110      	movs	r1, #16
 80040f2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e004      	b.n	8004102 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 ff7a 	bl	8004ff4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b00c      	add	sp, #48	; 0x30
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800410c:	b5b0      	push	{r4, r5, r7, lr}
 800410e:	b0aa      	sub	sp, #168	; 0xa8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	22a4      	movs	r2, #164	; 0xa4
 800411c:	18b9      	adds	r1, r7, r2
 800411e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	20a0      	movs	r0, #160	; 0xa0
 8004128:	1839      	adds	r1, r7, r0
 800412a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	249c      	movs	r4, #156	; 0x9c
 8004134:	1939      	adds	r1, r7, r4
 8004136:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004138:	0011      	movs	r1, r2
 800413a:	18bb      	adds	r3, r7, r2
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4aa2      	ldr	r2, [pc, #648]	; (80043c8 <HAL_UART_IRQHandler+0x2bc>)
 8004140:	4013      	ands	r3, r2
 8004142:	2298      	movs	r2, #152	; 0x98
 8004144:	18bd      	adds	r5, r7, r2
 8004146:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004148:	18bb      	adds	r3, r7, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11a      	bne.n	8004186 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004150:	187b      	adds	r3, r7, r1
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	4013      	ands	r3, r2
 8004158:	d015      	beq.n	8004186 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800415a:	183b      	adds	r3, r7, r0
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2220      	movs	r2, #32
 8004160:	4013      	ands	r3, r2
 8004162:	d105      	bne.n	8004170 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004164:	193b      	adds	r3, r7, r4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	055b      	lsls	r3, r3, #21
 800416c:	4013      	ands	r3, r2
 800416e:	d00a      	beq.n	8004186 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	2b00      	cmp	r3, #0
 8004176:	d100      	bne.n	800417a <HAL_UART_IRQHandler+0x6e>
 8004178:	e2dc      	b.n	8004734 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	0010      	movs	r0, r2
 8004182:	4798      	blx	r3
      }
      return;
 8004184:	e2d6      	b.n	8004734 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004186:	2398      	movs	r3, #152	; 0x98
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d100      	bne.n	8004192 <HAL_UART_IRQHandler+0x86>
 8004190:	e122      	b.n	80043d8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004192:	239c      	movs	r3, #156	; 0x9c
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a8c      	ldr	r2, [pc, #560]	; (80043cc <HAL_UART_IRQHandler+0x2c0>)
 800419a:	4013      	ands	r3, r2
 800419c:	d106      	bne.n	80041ac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800419e:	23a0      	movs	r3, #160	; 0xa0
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a8a      	ldr	r2, [pc, #552]	; (80043d0 <HAL_UART_IRQHandler+0x2c4>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	d100      	bne.n	80041ac <HAL_UART_IRQHandler+0xa0>
 80041aa:	e115      	b.n	80043d8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ac:	23a4      	movs	r3, #164	; 0xa4
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d012      	beq.n	80041de <HAL_UART_IRQHandler+0xd2>
 80041b8:	23a0      	movs	r3, #160	; 0xa0
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d00b      	beq.n	80041de <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2290      	movs	r2, #144	; 0x90
 80041d2:	589b      	ldr	r3, [r3, r2]
 80041d4:	2201      	movs	r2, #1
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2190      	movs	r1, #144	; 0x90
 80041dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041de:	23a4      	movs	r3, #164	; 0xa4
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2202      	movs	r2, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	d011      	beq.n	800420e <HAL_UART_IRQHandler+0x102>
 80041ea:	239c      	movs	r3, #156	; 0x9c
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00b      	beq.n	800420e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2202      	movs	r2, #2
 80041fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2290      	movs	r2, #144	; 0x90
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	2204      	movs	r2, #4
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2190      	movs	r1, #144	; 0x90
 800420c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800420e:	23a4      	movs	r3, #164	; 0xa4
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	4013      	ands	r3, r2
 8004218:	d011      	beq.n	800423e <HAL_UART_IRQHandler+0x132>
 800421a:	239c      	movs	r3, #156	; 0x9c
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d00b      	beq.n	800423e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2204      	movs	r2, #4
 800422c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2290      	movs	r2, #144	; 0x90
 8004232:	589b      	ldr	r3, [r3, r2]
 8004234:	2202      	movs	r2, #2
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2190      	movs	r1, #144	; 0x90
 800423c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800423e:	23a4      	movs	r3, #164	; 0xa4
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	4013      	ands	r3, r2
 8004248:	d017      	beq.n	800427a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800424a:	23a0      	movs	r3, #160	; 0xa0
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2220      	movs	r2, #32
 8004252:	4013      	ands	r3, r2
 8004254:	d105      	bne.n	8004262 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004256:	239c      	movs	r3, #156	; 0x9c
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <HAL_UART_IRQHandler+0x2c0>)
 800425e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004260:	d00b      	beq.n	800427a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2208      	movs	r2, #8
 8004268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2290      	movs	r2, #144	; 0x90
 800426e:	589b      	ldr	r3, [r3, r2]
 8004270:	2208      	movs	r2, #8
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2190      	movs	r1, #144	; 0x90
 8004278:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800427a:	23a4      	movs	r3, #164	; 0xa4
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_UART_IRQHandler+0x1a4>
 8004288:	23a0      	movs	r3, #160	; 0xa0
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	04db      	lsls	r3, r3, #19
 8004292:	4013      	ands	r3, r2
 8004294:	d00c      	beq.n	80042b0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2290      	movs	r2, #144	; 0x90
 80042a4:	589b      	ldr	r3, [r3, r2]
 80042a6:	2220      	movs	r2, #32
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2190      	movs	r1, #144	; 0x90
 80042ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2290      	movs	r2, #144	; 0x90
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d100      	bne.n	80042bc <HAL_UART_IRQHandler+0x1b0>
 80042ba:	e23d      	b.n	8004738 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042bc:	23a4      	movs	r3, #164	; 0xa4
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2220      	movs	r2, #32
 80042c4:	4013      	ands	r3, r2
 80042c6:	d015      	beq.n	80042f4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042c8:	23a0      	movs	r3, #160	; 0xa0
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2220      	movs	r2, #32
 80042d0:	4013      	ands	r3, r2
 80042d2:	d106      	bne.n	80042e2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042d4:	239c      	movs	r3, #156	; 0x9c
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	055b      	lsls	r3, r3, #21
 80042de:	4013      	ands	r3, r2
 80042e0:	d008      	beq.n	80042f4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	0010      	movs	r0, r2
 80042f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2290      	movs	r2, #144	; 0x90
 80042f8:	589b      	ldr	r3, [r3, r2]
 80042fa:	2194      	movs	r1, #148	; 0x94
 80042fc:	187a      	adds	r2, r7, r1
 80042fe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	4013      	ands	r3, r2
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d004      	beq.n	8004318 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800430e:	187b      	adds	r3, r7, r1
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2228      	movs	r2, #40	; 0x28
 8004314:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004316:	d04c      	beq.n	80043b2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 fe6a 	bl	8004ff4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2240      	movs	r2, #64	; 0x40
 8004328:	4013      	ands	r3, r2
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d13c      	bne.n	80043a8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	2090      	movs	r0, #144	; 0x90
 8004338:	183a      	adds	r2, r7, r0
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2140      	movs	r1, #64	; 0x40
 8004354:	438a      	bics	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	183b      	adds	r3, r7, r0
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2280      	movs	r2, #128	; 0x80
 800436a:	589b      	ldr	r3, [r3, r2]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d016      	beq.n	800439e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	589b      	ldr	r3, [r3, r2]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_UART_IRQHandler+0x2c8>)
 8004378:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	589b      	ldr	r3, [r3, r2]
 8004380:	0018      	movs	r0, r3
 8004382:	f7fd ff59 	bl	8002238 <HAL_DMA_Abort_IT>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d01c      	beq.n	80043c4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	589b      	ldr	r3, [r3, r2]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	5852      	ldr	r2, [r2, r1]
 8004398:	0010      	movs	r0, r2
 800439a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e012      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 f9f9 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a6:	e00d      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 f9f4 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e008      	b.n	80043c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f9ef 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2290      	movs	r2, #144	; 0x90
 80043be:	2100      	movs	r1, #0
 80043c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80043c2:	e1b9      	b.n	8004738 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	46c0      	nop			; (mov r8, r8)
    return;
 80043c6:	e1b7      	b.n	8004738 <HAL_UART_IRQHandler+0x62c>
 80043c8:	0000080f 	.word	0x0000080f
 80043cc:	10000001 	.word	0x10000001
 80043d0:	04000120 	.word	0x04000120
 80043d4:	08005371 	.word	0x08005371

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d000      	beq.n	80043e2 <HAL_UART_IRQHandler+0x2d6>
 80043e0:	e13e      	b.n	8004660 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043e2:	23a4      	movs	r3, #164	; 0xa4
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2210      	movs	r2, #16
 80043ea:	4013      	ands	r3, r2
 80043ec:	d100      	bne.n	80043f0 <HAL_UART_IRQHandler+0x2e4>
 80043ee:	e137      	b.n	8004660 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043f0:	23a0      	movs	r3, #160	; 0xa0
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2210      	movs	r2, #16
 80043f8:	4013      	ands	r3, r2
 80043fa:	d100      	bne.n	80043fe <HAL_UART_IRQHandler+0x2f2>
 80043fc:	e130      	b.n	8004660 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4013      	ands	r3, r2
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d000      	beq.n	8004416 <HAL_UART_IRQHandler+0x30a>
 8004414:	e0a4      	b.n	8004560 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	589b      	ldr	r3, [r3, r2]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	217e      	movs	r1, #126	; 0x7e
 8004422:	187b      	adds	r3, r7, r1
 8004424:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004426:	187b      	adds	r3, r7, r1
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d100      	bne.n	8004430 <HAL_UART_IRQHandler+0x324>
 800442e:	e185      	b.n	800473c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	225c      	movs	r2, #92	; 0x5c
 8004434:	5a9b      	ldrh	r3, [r3, r2]
 8004436:	187a      	adds	r2, r7, r1
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d300      	bcc.n	8004440 <HAL_UART_IRQHandler+0x334>
 800443e:	e17d      	b.n	800473c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	187a      	adds	r2, r7, r1
 8004444:	215e      	movs	r1, #94	; 0x5e
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	589b      	ldr	r3, [r3, r2]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2220      	movs	r2, #32
 8004456:	4013      	ands	r3, r2
 8004458:	d170      	bne.n	800453c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445a:	f3ef 8310 	mrs	r3, PRIMASK
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004462:	67bb      	str	r3, [r7, #120]	; 0x78
 8004464:	2301      	movs	r3, #1
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	49b4      	ldr	r1, [pc, #720]	; (800474c <HAL_UART_IRQHandler+0x640>)
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448c:	f3ef 8310 	mrs	r3, PRIMASK
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	677b      	str	r3, [r7, #116]	; 0x74
 8004496:	2301      	movs	r3, #1
 8004498:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	438a      	bics	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044be:	f3ef 8310 	mrs	r3, PRIMASK
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80044c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	673b      	str	r3, [r7, #112]	; 0x70
 80044c8:	2301      	movs	r3, #1
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	438a      	bics	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	228c      	movs	r2, #140	; 0x8c
 80044f4:	2120      	movs	r1, #32
 80044f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004502:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004504:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004508:	2301      	movs	r3, #1
 800450a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2110      	movs	r1, #16
 8004520:	438a      	bics	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	589b      	ldr	r3, [r3, r2]
 8004536:	0018      	movs	r0, r3
 8004538:	f7fd fe1c 	bl	8002174 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	225c      	movs	r2, #92	; 0x5c
 8004546:	5a9a      	ldrh	r2, [r3, r2]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	215e      	movs	r1, #94	; 0x5e
 800454c:	5a5b      	ldrh	r3, [r3, r1]
 800454e:	b29b      	uxth	r3, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0011      	movs	r1, r2
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f925 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800455e:	e0ed      	b.n	800473c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225c      	movs	r2, #92	; 0x5c
 8004564:	5a99      	ldrh	r1, [r3, r2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	225e      	movs	r2, #94	; 0x5e
 800456a:	5a9b      	ldrh	r3, [r3, r2]
 800456c:	b29a      	uxth	r2, r3
 800456e:	208e      	movs	r0, #142	; 0x8e
 8004570:	183b      	adds	r3, r7, r0
 8004572:	1a8a      	subs	r2, r1, r2
 8004574:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	225e      	movs	r2, #94	; 0x5e
 800457a:	5a9b      	ldrh	r3, [r3, r2]
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d100      	bne.n	8004584 <HAL_UART_IRQHandler+0x478>
 8004582:	e0dd      	b.n	8004740 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004584:	183b      	adds	r3, r7, r0
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d100      	bne.n	800458e <HAL_UART_IRQHandler+0x482>
 800458c:	e0d8      	b.n	8004740 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	60fb      	str	r3, [r7, #12]
  return(result);
 8004594:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004596:	2488      	movs	r4, #136	; 0x88
 8004598:	193a      	adds	r2, r7, r4
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	2301      	movs	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4967      	ldr	r1, [pc, #412]	; (8004750 <HAL_UART_IRQHandler+0x644>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80045cc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ce:	2484      	movs	r4, #132	; 0x84
 80045d0:	193a      	adds	r2, r7, r4
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f383 8810 	msr	PRIMASK, r3
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	495a      	ldr	r1, [pc, #360]	; (8004754 <HAL_UART_IRQHandler+0x648>)
 80045ec:	400a      	ands	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f383 8810 	msr	PRIMASK, r3
}
 80045fc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	228c      	movs	r2, #140	; 0x8c
 8004602:	2120      	movs	r1, #32
 8004604:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004612:	f3ef 8310 	mrs	r3, PRIMASK
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461a:	2480      	movs	r4, #128	; 0x80
 800461c:	193a      	adds	r2, r7, r4
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	2301      	movs	r3, #1
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	f383 8810 	msr	PRIMASK, r3
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2110      	movs	r1, #16
 8004638:	438a      	bics	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	193b      	adds	r3, r7, r4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004650:	183b      	adds	r3, r7, r0
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f000 f8a5 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800465e:	e06f      	b.n	8004740 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004660:	23a4      	movs	r3, #164	; 0xa4
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	035b      	lsls	r3, r3, #13
 800466a:	4013      	ands	r3, r2
 800466c:	d010      	beq.n	8004690 <HAL_UART_IRQHandler+0x584>
 800466e:	239c      	movs	r3, #156	; 0x9c
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	03db      	lsls	r3, r3, #15
 8004678:	4013      	ands	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	0352      	lsls	r2, r2, #13
 8004684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 feb4 	bl	80053f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800468e:	e05a      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004690:	23a4      	movs	r3, #164	; 0xa4
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	4013      	ands	r3, r2
 800469a:	d016      	beq.n	80046ca <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800469c:	23a0      	movs	r3, #160	; 0xa0
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	4013      	ands	r3, r2
 80046a6:	d106      	bne.n	80046b6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046a8:	239c      	movs	r3, #156	; 0x9c
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	4013      	ands	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d042      	beq.n	8004744 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	0010      	movs	r0, r2
 80046c6:	4798      	blx	r3
    }
    return;
 80046c8:	e03c      	b.n	8004744 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046ca:	23a4      	movs	r3, #164	; 0xa4
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	4013      	ands	r3, r2
 80046d4:	d00a      	beq.n	80046ec <HAL_UART_IRQHandler+0x5e0>
 80046d6:	23a0      	movs	r3, #160	; 0xa0
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2240      	movs	r2, #64	; 0x40
 80046de:	4013      	ands	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 fe5a 	bl	800539e <UART_EndTransmit_IT>
    return;
 80046ea:	e02c      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80046ec:	23a4      	movs	r3, #164	; 0xa4
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	4013      	ands	r3, r2
 80046f8:	d00b      	beq.n	8004712 <HAL_UART_IRQHandler+0x606>
 80046fa:	23a0      	movs	r3, #160	; 0xa0
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	4013      	ands	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fe83 	bl	8005416 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004710:	e019      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004712:	23a4      	movs	r3, #164	; 0xa4
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	045b      	lsls	r3, r3, #17
 800471c:	4013      	ands	r3, r2
 800471e:	d012      	beq.n	8004746 <HAL_UART_IRQHandler+0x63a>
 8004720:	23a0      	movs	r3, #160	; 0xa0
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da0d      	bge.n	8004746 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 fe6a 	bl	8005406 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004732:	e008      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
      return;
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	e006      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
    return;
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	e004      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
      return;
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	e002      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
      return;
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	e000      	b.n	8004746 <HAL_UART_IRQHandler+0x63a>
    return;
 8004744:	46c0      	nop			; (mov r8, r8)
  }
}
 8004746:	46bd      	mov	sp, r7
 8004748:	b02a      	add	sp, #168	; 0xa8
 800474a:	bdb0      	pop	{r4, r5, r7, pc}
 800474c:	fffffeff 	.word	0xfffffeff
 8004750:	fffffedf 	.word	0xfffffedf
 8004754:	effffffe 	.word	0xeffffffe

08004758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b002      	add	sp, #8
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	000a      	movs	r2, r1
 80047b2:	1cbb      	adds	r3, r7, #2
 80047b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c8:	231a      	movs	r3, #26
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4aa1      	ldr	r2, [pc, #644]	; (8004a74 <UART_SetConfig+0x2b4>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a9c      	ldr	r2, [pc, #624]	; (8004a78 <UART_SetConfig+0x2b8>)
 8004806:	4013      	ands	r3, r2
 8004808:	0019      	movs	r1, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	4313      	orrs	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a93      	ldr	r2, [pc, #588]	; (8004a7c <UART_SetConfig+0x2bc>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	220f      	movs	r2, #15
 8004844:	4393      	bics	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a89      	ldr	r2, [pc, #548]	; (8004a80 <UART_SetConfig+0x2c0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d127      	bne.n	80048ae <UART_SetConfig+0xee>
 800485e:	4b89      	ldr	r3, [pc, #548]	; (8004a84 <UART_SetConfig+0x2c4>)
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2203      	movs	r2, #3
 8004864:	4013      	ands	r3, r2
 8004866:	2b03      	cmp	r3, #3
 8004868:	d017      	beq.n	800489a <UART_SetConfig+0xda>
 800486a:	d81b      	bhi.n	80048a4 <UART_SetConfig+0xe4>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d00a      	beq.n	8004886 <UART_SetConfig+0xc6>
 8004870:	d818      	bhi.n	80048a4 <UART_SetConfig+0xe4>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <UART_SetConfig+0xbc>
 8004876:	2b01      	cmp	r3, #1
 8004878:	d00a      	beq.n	8004890 <UART_SetConfig+0xd0>
 800487a:	e013      	b.n	80048a4 <UART_SetConfig+0xe4>
 800487c:	231b      	movs	r3, #27
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e021      	b.n	80048ca <UART_SetConfig+0x10a>
 8004886:	231b      	movs	r3, #27
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e01c      	b.n	80048ca <UART_SetConfig+0x10a>
 8004890:	231b      	movs	r3, #27
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	2204      	movs	r2, #4
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e017      	b.n	80048ca <UART_SetConfig+0x10a>
 800489a:	231b      	movs	r3, #27
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2208      	movs	r2, #8
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e012      	b.n	80048ca <UART_SetConfig+0x10a>
 80048a4:	231b      	movs	r3, #27
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2210      	movs	r2, #16
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x10a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <UART_SetConfig+0x2c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d104      	bne.n	80048c2 <UART_SetConfig+0x102>
 80048b8:	231b      	movs	r3, #27
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e003      	b.n	80048ca <UART_SetConfig+0x10a>
 80048c2:	231b      	movs	r3, #27
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2210      	movs	r2, #16
 80048c8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d000      	beq.n	80048d8 <UART_SetConfig+0x118>
 80048d6:	e065      	b.n	80049a4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80048d8:	231b      	movs	r3, #27
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d015      	beq.n	800490e <UART_SetConfig+0x14e>
 80048e2:	dc18      	bgt.n	8004916 <UART_SetConfig+0x156>
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d00d      	beq.n	8004904 <UART_SetConfig+0x144>
 80048e8:	dc15      	bgt.n	8004916 <UART_SetConfig+0x156>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x134>
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d005      	beq.n	80048fe <UART_SetConfig+0x13e>
 80048f2:	e010      	b.n	8004916 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fe fcaa 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 80048f8:	0003      	movs	r3, r0
 80048fa:	617b      	str	r3, [r7, #20]
        break;
 80048fc:	e012      	b.n	8004924 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <UART_SetConfig+0x2cc>)
 8004900:	617b      	str	r3, [r7, #20]
        break;
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004904:	f7fe fc16 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8004908:	0003      	movs	r3, r0
 800490a:	617b      	str	r3, [r7, #20]
        break;
 800490c:	e00a      	b.n	8004924 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	617b      	str	r3, [r7, #20]
        break;
 8004914:	e006      	b.n	8004924 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800491a:	231a      	movs	r3, #26
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
        break;
 8004922:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <UART_SetConfig+0x16c>
 800492a:	e08d      	b.n	8004a48 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004930:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <UART_SetConfig+0x2d0>)
 8004932:	0052      	lsls	r2, r2, #1
 8004934:	5ad3      	ldrh	r3, [r2, r3]
 8004936:	0019      	movs	r1, r3
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f7fb fbe1 	bl	8000100 <__udivsi3>
 800493e:	0003      	movs	r3, r0
 8004940:	005a      	lsls	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	18d2      	adds	r2, r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	0019      	movs	r1, r3
 8004950:	0010      	movs	r0, r2
 8004952:	f7fb fbd5 	bl	8000100 <__udivsi3>
 8004956:	0003      	movs	r3, r0
 8004958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d91c      	bls.n	800499a <UART_SetConfig+0x1da>
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	429a      	cmp	r2, r3
 8004968:	d217      	bcs.n	800499a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	b29a      	uxth	r2, r3
 800496e:	200e      	movs	r0, #14
 8004970:	183b      	adds	r3, r7, r0
 8004972:	210f      	movs	r1, #15
 8004974:	438a      	bics	r2, r1
 8004976:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	2207      	movs	r2, #7
 8004980:	4013      	ands	r3, r2
 8004982:	b299      	uxth	r1, r3
 8004984:	183b      	adds	r3, r7, r0
 8004986:	183a      	adds	r2, r7, r0
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	183a      	adds	r2, r7, r0
 8004994:	8812      	ldrh	r2, [r2, #0]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e056      	b.n	8004a48 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800499a:	231a      	movs	r3, #26
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e051      	b.n	8004a48 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a4:	231b      	movs	r3, #27
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d015      	beq.n	80049da <UART_SetConfig+0x21a>
 80049ae:	dc18      	bgt.n	80049e2 <UART_SetConfig+0x222>
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d00d      	beq.n	80049d0 <UART_SetConfig+0x210>
 80049b4:	dc15      	bgt.n	80049e2 <UART_SetConfig+0x222>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0x200>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d005      	beq.n	80049ca <UART_SetConfig+0x20a>
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fc44 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 80049c4:	0003      	movs	r3, r0
 80049c6:	617b      	str	r3, [r7, #20]
        break;
 80049c8:	e012      	b.n	80049f0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <UART_SetConfig+0x2cc>)
 80049cc:	617b      	str	r3, [r7, #20]
        break;
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d0:	f7fe fbb0 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80049d4:	0003      	movs	r3, r0
 80049d6:	617b      	str	r3, [r7, #20]
        break;
 80049d8:	e00a      	b.n	80049f0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e006      	b.n	80049f0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049e6:	231a      	movs	r3, #26
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
        break;
 80049ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d028      	beq.n	8004a48 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <UART_SetConfig+0x2d0>)
 80049fc:	0052      	lsls	r2, r2, #1
 80049fe:	5ad3      	ldrh	r3, [r2, r3]
 8004a00:	0019      	movs	r1, r3
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7fb fb7c 	bl	8000100 <__udivsi3>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	18d2      	adds	r2, r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0019      	movs	r1, r3
 8004a1a:	0010      	movs	r0, r2
 8004a1c:	f7fb fb70 	bl	8000100 <__udivsi3>
 8004a20:	0003      	movs	r3, r0
 8004a22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d90a      	bls.n	8004a40 <UART_SetConfig+0x280>
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	025b      	lsls	r3, r3, #9
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d205      	bcs.n	8004a40 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e003      	b.n	8004a48 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004a40:	231a      	movs	r3, #26
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	226a      	movs	r2, #106	; 0x6a
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2268      	movs	r2, #104	; 0x68
 8004a54:	2101      	movs	r1, #1
 8004a56:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004a64:	231a      	movs	r3, #26
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	781b      	ldrb	r3, [r3, #0]
}
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b008      	add	sp, #32
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	cfff69f3 	.word	0xcfff69f3
 8004a78:	ffffcfff 	.word	0xffffcfff
 8004a7c:	11fff4ff 	.word	0x11fff4ff
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40004400 	.word	0x40004400
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	08005740 	.word	0x08005740

08004a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a4a      	ldr	r2, [pc, #296]	; (8004bd8 <UART_AdvFeatureConfig+0x144>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a43      	ldr	r2, [pc, #268]	; (8004bdc <UART_AdvFeatureConfig+0x148>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a3b      	ldr	r2, [pc, #236]	; (8004be0 <UART_AdvFeatureConfig+0x14c>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	2208      	movs	r2, #8
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a34      	ldr	r2, [pc, #208]	; (8004be4 <UART_AdvFeatureConfig+0x150>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2210      	movs	r2, #16
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <UART_AdvFeatureConfig+0x154>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <UART_AdvFeatureConfig+0x158>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	2240      	movs	r2, #64	; 0x40
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d01d      	beq.n	8004bae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <UART_AdvFeatureConfig+0x15c>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	035b      	lsls	r3, r3, #13
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10b      	bne.n	8004bae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <UART_AdvFeatureConfig+0x160>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <UART_AdvFeatureConfig+0x164>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	fffdffff 	.word	0xfffdffff
 8004bdc:	fffeffff 	.word	0xfffeffff
 8004be0:	fffbffff 	.word	0xfffbffff
 8004be4:	ffff7fff 	.word	0xffff7fff
 8004be8:	ffffefff 	.word	0xffffefff
 8004bec:	ffffdfff 	.word	0xffffdfff
 8004bf0:	ffefffff 	.word	0xffefffff
 8004bf4:	ff9fffff 	.word	0xff9fffff
 8004bf8:	fff7ffff 	.word	0xfff7ffff

08004bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2290      	movs	r2, #144	; 0x90
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c0c:	f7fc f8ba 	bl	8000d84 <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d10c      	bne.n	8004c3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	0391      	lsls	r1, r2, #14
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <UART_CheckIdleState+0x98>)
 8004c2c:	9200      	str	r2, [sp, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f000 f832 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d001      	beq.n	8004c3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e026      	b.n	8004c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2204      	movs	r2, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d10c      	bne.n	8004c64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	03d1      	lsls	r1, r2, #15
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <UART_CheckIdleState+0x98>)
 8004c54:	9200      	str	r2, [sp, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f000 f81e 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	1e03      	subs	r3, r0, #0
 8004c5e:	d001      	beq.n	8004c64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e012      	b.n	8004c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2288      	movs	r2, #136	; 0x88
 8004c68:	2120      	movs	r1, #32
 8004c6a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	228c      	movs	r2, #140	; 0x8c
 8004c70:	2120      	movs	r1, #32
 8004c72:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2284      	movs	r2, #132	; 0x84
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	01ffffff 	.word	0x01ffffff

08004c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b094      	sub	sp, #80	; 0x50
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	1dfb      	adds	r3, r7, #7
 8004ca6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca8:	e0a7      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cac:	3301      	adds	r3, #1
 8004cae:	d100      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004cb0:	e0a3      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fc f867 	bl	8000d84 <HAL_GetTick>
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13f      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	494e      	ldr	r1, [pc, #312]	; (8004e24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004cea:	400a      	ands	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40
 8004d04:	2301      	movs	r3, #1
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d26:	f383 8810 	msr	PRIMASK, r3
}
 8004d2a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2288      	movs	r2, #136	; 0x88
 8004d30:	2120      	movs	r1, #32
 8004d32:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	228c      	movs	r2, #140	; 0x8c
 8004d38:	2120      	movs	r1, #32
 8004d3a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2284      	movs	r2, #132	; 0x84
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e069      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	d052      	beq.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	401a      	ands	r2, r3
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d148      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d72:	f3ef 8310 	mrs	r3, PRIMASK
 8004d76:	613b      	str	r3, [r7, #16]
  return(result);
 8004d78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f383 8810 	msr	PRIMASK, r3
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4924      	ldr	r1, [pc, #144]	; (8004e24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d94:	400a      	ands	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f383 8810 	msr	PRIMASK, r3
}
 8004da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da4:	f3ef 8310 	mrs	r3, PRIMASK
 8004da8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004daa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dae:	2301      	movs	r3, #1
 8004db0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f383 8810 	msr	PRIMASK, r3
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	438a      	bics	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2288      	movs	r2, #136	; 0x88
 8004dda:	2120      	movs	r1, #32
 8004ddc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	228c      	movs	r2, #140	; 0x8c
 8004de2:	2120      	movs	r1, #32
 8004de4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2290      	movs	r2, #144	; 0x90
 8004dea:	2120      	movs	r1, #32
 8004dec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2284      	movs	r2, #132	; 0x84
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e010      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4013      	ands	r3, r2
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	425a      	negs	r2, r3
 8004e0a:	4153      	adcs	r3, r2
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	001a      	movs	r2, r3
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d100      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x182>
 8004e18:	e747      	b.n	8004caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b014      	add	sp, #80	; 0x50
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffffe5f 	.word	0xfffffe5f

08004e28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	1dbb      	adds	r3, r7, #6
 8004e34:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1dba      	adds	r2, r7, #6
 8004e40:	215c      	movs	r1, #92	; 0x5c
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2290      	movs	r2, #144	; 0x90
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	228c      	movs	r2, #140	; 0x8c
 8004e52:	2122      	movs	r1, #34	; 0x22
 8004e54:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2280      	movs	r2, #128	; 0x80
 8004e5a:	589b      	ldr	r3, [r3, r2]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02d      	beq.n	8004ebc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	589b      	ldr	r3, [r3, r2]
 8004e66:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <UART_Start_Receive_DMA+0x140>)
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	589b      	ldr	r3, [r3, r2]
 8004e70:	4a3e      	ldr	r2, [pc, #248]	; (8004f6c <UART_Start_Receive_DMA+0x144>)
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	589b      	ldr	r3, [r3, r2]
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <UART_Start_Receive_DMA+0x148>)
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	589b      	ldr	r3, [r3, r2]
 8004e84:	2200      	movs	r2, #0
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	5898      	ldr	r0, [r3, r2]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	0019      	movs	r1, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	1dbb      	adds	r3, r7, #6
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	f7fd f8e2 	bl	8002068 <HAL_DMA_Start_IT>
 8004ea4:	1e03      	subs	r3, r0, #0
 8004ea6:	d009      	beq.n	8004ebc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2290      	movs	r2, #144	; 0x90
 8004eac:	2110      	movs	r1, #16
 8004eae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	228c      	movs	r2, #140	; 0x8c
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e050      	b.n	8004f5e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	0049      	lsls	r1, r1, #1
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	613b      	str	r3, [r7, #16]
  return(result);
 8004efe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f30:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
 8004f34:	2301      	movs	r3, #1
 8004f36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b010      	add	sp, #64	; 0x40
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	08005179 	.word	0x08005179
 8004f6c:	080052a9 	.word	0x080052a9
 8004f70:	080052eb 	.word	0x080052eb

08004f74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	2301      	movs	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	21c0      	movs	r1, #192	; 0xc0
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f383 8810 	msr	PRIMASK, r3
}
 8004fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fae:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8004fb4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4908      	ldr	r1, [pc, #32]	; (8004ff0 <UART_EndTxTransfer+0x7c>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2288      	movs	r2, #136	; 0x88
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	5099      	str	r1, [r3, r2]
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b00a      	add	sp, #40	; 0x28
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	ff7fffff 	.word	0xff7fffff

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8005000:	617b      	str	r3, [r7, #20]
  return(result);
 8005002:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
 8005006:	2301      	movs	r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f383 8810 	msr	PRIMASK, r3
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4926      	ldr	r1, [pc, #152]	; (80050b8 <UART_EndRxTransfer+0xc4>)
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502e:	f3ef 8310 	mrs	r3, PRIMASK
 8005032:	623b      	str	r3, [r7, #32]
  return(result);
 8005034:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f383 8810 	msr	PRIMASK, r3
}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	491b      	ldr	r1, [pc, #108]	; (80050bc <UART_EndRxTransfer+0xc8>)
 8005050:	400a      	ands	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d118      	bne.n	800509a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	60bb      	str	r3, [r7, #8]
  return(result);
 800506e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005072:	2301      	movs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2110      	movs	r1, #16
 800508a:	438a      	bics	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	228c      	movs	r2, #140	; 0x8c
 800509e:	2120      	movs	r1, #32
 80050a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b00e      	add	sp, #56	; 0x38
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	fffffedf 	.word	0xfffffedf
 80050bc:	effffffe 	.word	0xeffffffe

080050c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2220      	movs	r2, #32
 80050d6:	4013      	ands	r3, r2
 80050d8:	d135      	bne.n	8005146 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	2256      	movs	r2, #86	; 0x56
 80050de:	2100      	movs	r1, #0
 80050e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e2:	f3ef 8310 	mrs	r3, PRIMASK
 80050e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ec:	2301      	movs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f383 8810 	msr	PRIMASK, r3
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	438a      	bics	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f383 8810 	msr	PRIMASK, r3
}
 8005112:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	61bb      	str	r3, [r7, #24]
  return(result);
 800511a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	430a      	orrs	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	e004      	b.n	8005150 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	0018      	movs	r0, r3
 800514a:	f7ff fb05 	bl	8004758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b00c      	add	sp, #48	; 0x30
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff fafd 	bl	8004768 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b004      	add	sp, #16
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b094      	sub	sp, #80	; 0x50
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2220      	movs	r2, #32
 800518e:	4013      	ands	r3, r2
 8005190:	d16f      	bne.n	8005272 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	225e      	movs	r2, #94	; 0x5e
 8005196:	2100      	movs	r1, #0
 8005198:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8310 	mrs	r3, PRIMASK
 800519e:	61bb      	str	r3, [r7, #24]
  return(result);
 80051a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a4:	2301      	movs	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	493a      	ldr	r1, [pc, #232]	; (80052a4 <UART_DMAReceiveCplt+0x12c>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
 80051d6:	2301      	movs	r3, #1
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2101      	movs	r1, #1
 80051ee:	438a      	bics	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	643b      	str	r3, [r7, #64]	; 0x40
 8005208:	2301      	movs	r3, #1
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2140      	movs	r1, #64	; 0x40
 8005220:	438a      	bics	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f383 8810 	msr	PRIMASK, r3
}
 800522e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005232:	228c      	movs	r2, #140	; 0x8c
 8005234:	2120      	movs	r1, #32
 8005236:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d118      	bne.n	8005272 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005240:	f3ef 8310 	mrs	r3, PRIMASK
 8005244:	60fb      	str	r3, [r7, #12]
  return(result);
 8005246:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800524a:	2301      	movs	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2110      	movs	r1, #16
 8005262:	438a      	bics	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f383 8810 	msr	PRIMASK, r3
}
 8005270:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	2200      	movs	r2, #0
 8005276:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005282:	225c      	movs	r2, #92	; 0x5c
 8005284:	5a9a      	ldrh	r2, [r3, r2]
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	0011      	movs	r1, r2
 800528a:	0018      	movs	r0, r3
 800528c:	f7ff fa8c 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005290:	e003      	b.n	800529a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	0018      	movs	r0, r3
 8005296:	f7ff fa6f 	bl	8004778 <HAL_UART_RxCpltCallback>
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b014      	add	sp, #80	; 0x50
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	fffffeff 	.word	0xfffffeff

080052a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10a      	bne.n	80052da <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	225c      	movs	r2, #92	; 0x5c
 80052c8:	5a9b      	ldrh	r3, [r3, r2]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	0011      	movs	r1, r2
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7ff fa68 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052d8:	e003      	b.n	80052e2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff fa53 	bl	8004788 <HAL_UART_RxHalfCpltCallback>
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b004      	add	sp, #16
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2288      	movs	r2, #136	; 0x88
 80052fc:	589b      	ldr	r3, [r3, r2]
 80052fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	228c      	movs	r2, #140	; 0x8c
 8005304:	589b      	ldr	r3, [r3, r2]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	4013      	ands	r3, r2
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d10a      	bne.n	800532c <UART_DMAError+0x42>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b21      	cmp	r3, #33	; 0x21
 800531a:	d107      	bne.n	800532c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2256      	movs	r2, #86	; 0x56
 8005320:	2100      	movs	r1, #0
 8005322:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	0018      	movs	r0, r3
 8005328:	f7ff fe24 	bl	8004f74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	4013      	ands	r3, r2
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10a      	bne.n	8005350 <UART_DMAError+0x66>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b22      	cmp	r3, #34	; 0x22
 800533e:	d107      	bne.n	8005350 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	225e      	movs	r2, #94	; 0x5e
 8005344:	2100      	movs	r1, #0
 8005346:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	0018      	movs	r0, r3
 800534c:	f7ff fe52 	bl	8004ff4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2290      	movs	r2, #144	; 0x90
 8005354:	589b      	ldr	r3, [r3, r2]
 8005356:	2210      	movs	r2, #16
 8005358:	431a      	orrs	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2190      	movs	r1, #144	; 0x90
 800535e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fa18 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b006      	add	sp, #24
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	225e      	movs	r2, #94	; 0x5e
 8005382:	2100      	movs	r1, #0
 8005384:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2256      	movs	r2, #86	; 0x56
 800538a:	2100      	movs	r1, #0
 800538c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	0018      	movs	r0, r3
 8005392:	f7ff fa01 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b004      	add	sp, #16
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a6:	f3ef 8310 	mrs	r3, PRIMASK
 80053aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	2301      	movs	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f383 8810 	msr	PRIMASK, r3
}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2140      	movs	r1, #64	; 0x40
 80053c8:	438a      	bics	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f383 8810 	msr	PRIMASK, r3
}
 80053d6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2288      	movs	r2, #136	; 0x88
 80053dc:	2120      	movs	r1, #32
 80053de:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff f9b5 	bl	8004758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b006      	add	sp, #24
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b002      	add	sp, #8
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b002      	add	sp, #8
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2284      	movs	r2, #132	; 0x84
 8005434:	5c9b      	ldrb	r3, [r3, r2]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_UARTEx_DisableFifoMode+0x16>
 800543a:	2302      	movs	r3, #2
 800543c:	e027      	b.n	800548e <HAL_UARTEx_DisableFifoMode+0x66>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2284      	movs	r2, #132	; 0x84
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2288      	movs	r2, #136	; 0x88
 800544a:	2124      	movs	r1, #36	; 0x24
 800544c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	438a      	bics	r2, r1
 8005464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <HAL_UARTEx_DisableFifoMode+0x70>)
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2288      	movs	r2, #136	; 0x88
 8005480:	2120      	movs	r1, #32
 8005482:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2284      	movs	r2, #132	; 0x84
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	dfffffff 	.word	0xdfffffff

0800549c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2284      	movs	r2, #132	; 0x84
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e02e      	b.n	8005512 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2284      	movs	r2, #132	; 0x84
 80054b8:	2101      	movs	r1, #1
 80054ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2288      	movs	r2, #136	; 0x88
 80054c0:	2124      	movs	r1, #36	; 0x24
 80054c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	438a      	bics	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	08d9      	lsrs	r1, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 f854 	bl	80055a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2288      	movs	r2, #136	; 0x88
 8005504:	2120      	movs	r1, #32
 8005506:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2284      	movs	r2, #132	; 0x84
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2284      	movs	r2, #132	; 0x84
 800552a:	5c9b      	ldrb	r3, [r3, r2]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005530:	2302      	movs	r3, #2
 8005532:	e02f      	b.n	8005594 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2284      	movs	r2, #132	; 0x84
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2288      	movs	r2, #136	; 0x88
 8005540:	2124      	movs	r1, #36	; 0x24
 8005542:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2101      	movs	r1, #1
 8005558:	438a      	bics	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 f813 	bl	80055a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2288      	movs	r2, #136	; 0x88
 8005586:	2120      	movs	r1, #32
 8005588:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2284      	movs	r2, #132	; 0x84
 800558e:	2100      	movs	r1, #0
 8005590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b004      	add	sp, #16
 800559a:	bd80      	pop	{r7, pc}
 800559c:	f1ffffff 	.word	0xf1ffffff

080055a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	226a      	movs	r2, #106	; 0x6a
 80055b4:	2101      	movs	r1, #1
 80055b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2268      	movs	r2, #104	; 0x68
 80055bc:	2101      	movs	r1, #1
 80055be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055c0:	e043      	b.n	800564a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055c2:	260f      	movs	r6, #15
 80055c4:	19bb      	adds	r3, r7, r6
 80055c6:	2208      	movs	r2, #8
 80055c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055ca:	200e      	movs	r0, #14
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	2208      	movs	r2, #8
 80055d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	0e5b      	lsrs	r3, r3, #25
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	240d      	movs	r4, #13
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	2107      	movs	r1, #7
 80055e2:	400a      	ands	r2, r1
 80055e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	0f5b      	lsrs	r3, r3, #29
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	250c      	movs	r5, #12
 80055f2:	197b      	adds	r3, r7, r5
 80055f4:	2107      	movs	r1, #7
 80055f6:	400a      	ands	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055fa:	183b      	adds	r3, r7, r0
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	197a      	adds	r2, r7, r5
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	4914      	ldr	r1, [pc, #80]	; (8005654 <UARTEx_SetNbDataToProcess+0xb4>)
 8005604:	5c8a      	ldrb	r2, [r1, r2]
 8005606:	435a      	muls	r2, r3
 8005608:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800560a:	197b      	adds	r3, r7, r5
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <UARTEx_SetNbDataToProcess+0xb8>)
 8005610:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005612:	0019      	movs	r1, r3
 8005614:	f7fa fdfe 	bl	8000214 <__divsi3>
 8005618:	0003      	movs	r3, r0
 800561a:	b299      	uxth	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	226a      	movs	r2, #106	; 0x6a
 8005620:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005622:	19bb      	adds	r3, r7, r6
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	193a      	adds	r2, r7, r4
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <UARTEx_SetNbDataToProcess+0xb4>)
 800562c:	5c8a      	ldrb	r2, [r1, r2]
 800562e:	435a      	muls	r2, r3
 8005630:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005632:	193b      	adds	r3, r7, r4
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	4a08      	ldr	r2, [pc, #32]	; (8005658 <UARTEx_SetNbDataToProcess+0xb8>)
 8005638:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800563a:	0019      	movs	r1, r3
 800563c:	f7fa fdea 	bl	8000214 <__divsi3>
 8005640:	0003      	movs	r3, r0
 8005642:	b299      	uxth	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2268      	movs	r2, #104	; 0x68
 8005648:	5299      	strh	r1, [r3, r2]
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	b005      	add	sp, #20
 8005650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	08005758 	.word	0x08005758
 8005658:	08005760 	.word	0x08005760

0800565c <memset>:
 800565c:	0003      	movs	r3, r0
 800565e:	1882      	adds	r2, r0, r2
 8005660:	4293      	cmp	r3, r2
 8005662:	d100      	bne.n	8005666 <memset+0xa>
 8005664:	4770      	bx	lr
 8005666:	7019      	strb	r1, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	e7f9      	b.n	8005660 <memset+0x4>

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	2600      	movs	r6, #0
 8005670:	4c0c      	ldr	r4, [pc, #48]	; (80056a4 <__libc_init_array+0x38>)
 8005672:	4d0d      	ldr	r5, [pc, #52]	; (80056a8 <__libc_init_array+0x3c>)
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	2600      	movs	r6, #0
 800567e:	f000 f823 	bl	80056c8 <_init>
 8005682:	4c0a      	ldr	r4, [pc, #40]	; (80056ac <__libc_init_array+0x40>)
 8005684:	4d0a      	ldr	r5, [pc, #40]	; (80056b0 <__libc_init_array+0x44>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	00b3      	lsls	r3, r6, #2
 8005692:	58eb      	ldr	r3, [r5, r3]
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	00b3      	lsls	r3, r6, #2
 800569c:	58eb      	ldr	r3, [r5, r3]
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08005768 	.word	0x08005768
 80056a8:	08005768 	.word	0x08005768
 80056ac:	0800576c 	.word	0x0800576c
 80056b0:	08005768 	.word	0x08005768

080056b4 <memcpy>:
 80056b4:	2300      	movs	r3, #0
 80056b6:	b510      	push	{r4, lr}
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d100      	bne.n	80056be <memcpy+0xa>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	5ccc      	ldrb	r4, [r1, r3]
 80056c0:	54c4      	strb	r4, [r0, r3]
 80056c2:	3301      	adds	r3, #1
 80056c4:	e7f8      	b.n	80056b8 <memcpy+0x4>
	...

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
